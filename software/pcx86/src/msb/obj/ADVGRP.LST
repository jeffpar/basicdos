Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-1
                                                            

                                ; [ This translation created 10-Feb-83 by Versi
				on 4.3 ] 
                                 
 0008                           	.RADIX  8		; To be safe 
                                 
 0000                           CSEG	SEGMENT PUBLIC 'CODESG' 
                                	ASSUME  CS:CSEG 
                                 
                             C  INCLUDE	OEM.INC 
                             C  ; [ This translation created 10-Feb-83 by Versi
				on 4.3 ] 
                             C   
                             C  	PAGE	,132D 
                             C  	SUBTTL  Common file to produce 2-segment 8086 GW-CPM BASIC 
                             C   
                             C  	.SALL 
                             C   
 000A                        C  	.RADIX	10 
 = 0000                      C  	OEMRAM=0D 
                             C  ;Pascal program HFILE searches for the following line - DO NOT MODIFY 
                             C  ;** (VERSION SPECIFIC VALUES) ************************************************ 
 = 0019                      C  	NMLINE=25		;Max screen display text lines 
 = 0001                      C  	NBANKS=1		;Number of graphic planes 
 = 0000                      C  	PALSIZ=0		;Size of OEM color palette 
 = 0000                      C  	DBLCHR=0		;Editor support for KANJI chars 
 = 0000                      C  	KANABS=0		;Kana BASIC (Japanese JIS codes) 
 = 0000                      C  	KANJFN=0		;KANJI String Functions KPOS, KLEN .. 
 = 0000                      C  	JISKTN=0		;&K, &J constants (KANJI) 
 = 0001                      C  	SUPRSH=1		;1=super shift key feature 
 = 000A                      C  	NMKEYF=10		;number of function keys 
 = 000E                      C  	NMKEYT=14		;number of function key traps 
 = 0001                      C  	FKEYON=1		;yes=display function keys 
 = 0001                      C  	SCROLT=1		;Line 25 allocated for status only 
 = 0001                      C  	PLAYSW=1		;for PLAY statement 
 = 0001                      C  	BEEPSW=1		;for SOUND, BEEP statements 
 = 0003                      C  	NMLPT=3			;number of line printers 
 = 0001                      C  	CONSSW=1		;Device CONS: 
 = 0002                      C  	NMCOMT=2		;number of COMmunications ports 
 = 0001                      C  	NMPENT=1		;number of light pens 
 = 0004                      C  	NMSTRT=4		;number of joysticks 
 = 0000                      C  	GWCASS=0		;Cassette switch (CSAVE,CLOAD,MOTOR) 
 = 0001                      C  	IBMLIK=1		;IBM compatibility package 
 = 0001                      C  	IBMTOK=1		;IBM token compatibility 
 = 0001                      C  	DYNCOM=1		;Dynamic communication buffers 
                             C  ;** (END OF VERSION SPECIFIC VALUES) ***************************************** 
                             C  ;Pascal program HFILE searches for the previous line - DO NOT MODIFY 
                             C  ; 
 = 0015                      C  	NUMTRP=NMKEYT+NMCOMT+NMPENT+NMSTRT 
 = 0001                      C  	GW=1			;GW BASIC 
 = 0000                      C  	ESCCTL=0		;Escape Sequence processing in SCROUT 
 = 0000                      C  	GWDBUG=0		;DEBUG statement (TEST VERSIONS ONLY) 
                             C  				; Support is in BINTRP.MAC and GWSTS.MAC 
 = 0000                      C  	SIXDIG=0		;# of digits of accuracy assumed when formatting 
                             C  				;single precision numbers for output. 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-2
Common file to produce 2-segment 8086 GW-CPM BASIC          

                             C  				; 0 := 7 digits 
                             C  				; 1 := 6 digits 
 = 0000                      C  	CASSW=0			;CASSETTE SWITCH 
 = 0001                      C  	LABKEY=1		;^T (LABEL) key capability 
 = 0001                      C  	HGHBIT=1		;8-bit characters (ASCII & Graphics) 
 = 0001                      C  	QUEUE=1			;Queued painting algorithm (vs. stack) 
 = 0001                      C  	GIO86=1			;BASIC-86 Generalized I/O 
 = 0001                      C  	SCRNIO=1		;Screen editor 
 = 0001                      C  	SCRN86=1		;8086 Screen editor 
 = 0001                      C  	I8086=1			;CROSS ASSEMBLING FOR 8086 
 = 0001                      C  	MULSEG=1		;MULTI-SEGMENT 8086 BASIC 
 = 0000                      C  	SMALL=0			;"SMALL" VERSION OF 8086 BASIC IF SET 
 = 0001                      C  	TRUROM=1 
 = 0000                      C  	SBC86=0			;SBC 86/02 BOARD? 
 = 0001                      C  	SHORTJ=1		;USE INTRA-SEGMENT SHORT JUMPS 
                             C  				;IN 8086 CODE 
 = 0001                      C  	LNGVAR=1		;LONG VARIABLE NAME SUPPORT (EXTENDED ONLY) 
 = 0000                      C  	SHTERR=0		;SHORT (2 CHAR) ERROR MESSAGES 
 = 0000                      C  	SHTINS=0		;INSTR IN NON-FAST LEN2 VERSIONS 
 = 0000                      C  	SHTLHM=0		;LEFT HAND SIDE MID IN NON FAST LEN2 VERSIONS 
 = 0000                      C  	SHTCHN=0		;ALLOW CHAIN IN NON-5.0 
 = 0000                      C  	SHTPRO=0		;ALLOW PROTECTED FILES IN NON-FIVDSK 
 = 0000                      C  	SHTLIN=0		;ALLOW LINE INPUT IN NON-EXTENDED NON-FAST 
 = 0000                      C  	SHTREN=0		;ALLOW RENUM IN NON-FST VERSIONS 
 = 0001                      C  	INKEYF=1		;ADDS INKEY$ FUNCTION 
 = 0000                      C  	NOIOS=0			;NO I/O STATMENTS (INP,OUT, WAIT) 
 = 0000                      C  	NOPEKS=0		;NO PEEK, POKE 
 = 0000                      C  	NOUSR=0			;NO USR 
 = 0000                      C  	NOCTLA=0		;NO CONTROL-A IN EXTENDED 
 = 0000                      C  	NORUBT=0		;NO RUBOUT 
 = 0000                      C  	NOROMP=0		;NO ROM PROGRAM FEATURE 
 = 0000                      C  	NOATDL=0		;NO AUTO DELETE IN NON-FAST EXTENDED 
 = 0000                      C  	NODOT=0			;NO DOT IN LEN2 
 = 0000                      C  	NOEDIT=0		;NO EDIT COMMAND 
 = 0000                      C  	CRONLY=0		;ONLY PUT OUT CR, NOT CRLF TO TERMINAL 
                             C  				;AND FILES 
 = 0000                      C  	NONULL=0		;NO NULL COMMAND, PUT OUT NULLS IN CRDO & OUTCH1 
 = 0000                      C  	NOVARP=0		;NO VARPTR FUNCTION 
 = 0001                      C  	FIVEO=1			;GENERATE VERSION WITH RELEASE 5.0 FEATURES 
 = 0001                      C  	FIVMEM=1 
 = 0001                      C  	ANSI=1 
 = 0001                      C  	FIVDSK=1		;5.0 NEW DSK CODE 
 = 0001                      C  	FIVLPT=1		;WIDTH LPRINT AND 255 FEATURE 
 = 0001                      C  	HEXOCT=1		;&H..., HEX$, &O..., OCT$ 
 = 0000                      C  	BINCSW=0		;&B..., BIN$ 
 = 0001                      C  	BLODSW=1		;BLOAD, BSAVE COMMANDS 
 = 0001                      C  	MEMIMG=1		;MEMORY IMAGE FILES 
 = 0001                      C  	GENBIN=1 
                             C   
 = 0000                      C  	TRUANS=0		;TRUE ANSI VERSION (STATIC SCAN, ON ERROR) 
 = 0000                      C  	COMMNT=0		;DONT WANT BIG COMMENT 
 = 0000                      C  	INTEL=0			;INTEL PROPRIETARY 
 = 0000                      C  	INTFSW=0		;INTEL FLOATING POINT 
 = 0000                      C  	INTFHW=0 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-3
Common file to produce 2-segment 8086 GW-CPM BASIC          

 = 0000                      C  	RMX=0			;INTEL RMX VERSION 
 = 0000                      C  	EDIT80=0		;FOR EDIT80 I/O ROUTINES 
 = 0000                      C  	RSHACK=0 
 = 0000                      C  	INTLEC=0 
 = 0002                      C  	LENGTH=2		;  1 MEANS 8K, 2 MEANS 12K 
 = 0000                      C  	BASDEB=0		;WHETHER DBG WILL BE LOADED WITH BASIC 
 = 0001                      C  	RSTLES=1		;WHETHER BASIC WILL USE RST LOCATIONS 
                             C  				;TO MAKE ITSELF SMALLER & QUICKER 
 = 0001                      C  	REALIO=1		;WHETHER SIMULATE (=0) OR ON MACHINE (=1) 
 = 0001                      C  	GENIO=1			;USE G/P ROUTINES 
 = 0001                      C  	CHSEAT=1		;CHSNS eats chars 
 = 0000                      C  	GENDSK=0		;USE G/P DSK CODE 
 = 0000                      C  	LONGI=0			;WHETHER WE ASK "TERMINAL WIDTH?" 
                             C  				;AND WANT SIN-TAN-COS-ATN? 
 = 0000                      C  	INSTSW=0		;FOR INSTR INSTRUCTION 
 = 0001                      C  	SWAPSW=1		;FOR SWAP STATEMENT 
 = 0000                      C  	MDS=0			;FOR INTEL MDS SYSTEMS 
 = 0000                      C  	SBC=0			;FOR INTEL SINGLE BOARD COMPUTER 
                             C  				;1=SBC 80/10, 2=SBC 80/20 
 = 0001                      C  	PURE=1			;ON FOR PURE CODE 
 = 0000                      C  	KILLER=0		;FOR ROM VERSION THAT WONT RUN IN RAM 
 = 0000                      C  	INTROM=0 
 = 0001                      C  	LPTSW=1 
 = 0001                      C  	NCRLPT=1 
 = 0000                      C  	NCRCAS=0 
 = 0000                      C  	ISC=0			;FOR ISC VERSION 
 = 0000                      C  	LPT3=0			;THREE LPT DRIVER VERSION(QUME,OKIA,CENT) 
 = 0000                      C  	TSLPT=0 
                             C   
 = 0000                      C  	DOS=0			;ON TO GEN ROUTINES FOR DOS 
 = 0001                      C  	DISK=1			;FILE I/O FEATURES 
 = 0000                      C  	TIMSHR=0		;NO TIME-SHARING DISK 
 = 0000                      C  	TSDISK=0		;NO TIME-SHARING DISK FOR US 
 = 0000                      C  	SPCDSK=0		;MAY HAVE MM'S DISK CODE 
 = 0000                      C  	SPCNDS=0 
 = 0001                      C  	FAST=1			;CONSTANT COMPRESSION, RENUM & FRIENDS 
 = 0000                      C  	KEYSTA=0 
 = 0000                      C  	ISIS=0			;FOR VERSION TO RUN UNDER INTEL'S ISIS II DOS 
 = 0000                      C  	MDSISS=0		;FOR MDS VERSION THAT RUNS UNDER ISIS-II 
 = 0001                      C  	CPM=1			;FOR CPM compatible operating systems 
 = 0001                      C  	CPM2=1			;VERSION 2. CPM 
 = 0000                      C  	CPM86=0			;FOR CP/M-86 operating system 
 = 0001                      C  	SCP=1			;MS-DOS operating system 
 = 0000                      C  	CPMCON=0 
 = 0000                      C  	CPMSER=0		;CHECK CPM SERIAL #'S 
 = 0000                      C  	CPMADD=0		;FOR VERSION TO RUN ON ADDS CPM 
 = 0000                      C  	CPMA75=0		;FOR VERSION TO RUN ON ADDS SYSTEM 75 
                             C  				;CP/M 
 = 0000                      C  	CPMRSH=0		;FOR RADIO SHACK CPM/M 
 = 0000                      C  	CPM110=0		;FOR CP/M @1100 HEX (INTERALIA) 
 = 0000                      C  	CPMSBC=0		;FOR VERSION TO RUN ON SBC CP/M AT 4100H 
 = 0000                      C  	CPMPER=0		;FOR PERTEC VERSION OF CPM 
 = 0000                      C  	CPMLIF=0		;LIFEBOAT CP/M AT 4200H 
 = 0000                      C  	CPMMDS=0		;MOHAWK DATA SYSTEMS CP/M 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-4
Common file to produce 2-segment 8086 GW-CPM BASIC          

 = 0000                      C  	CPMCON=0 
 = 0000                      C  	Z80=0 
 = 0001                      C  	DISK=1 
 = 0001                      C  	NCRLPT=1 
 = 0001                      C  	RSTLES=1 
 = 0000                      C  	DRVPOS=CPMADD 
 = 0000                      C  	TRNCHR=CPMADD 
 = 0000                      C  	INLADD=CPMADD 
 = 0001                      C  	LISTEN=1		;ON MEANS LISTEN FOR ^C 
 = 0001                      C  	LISTEN=1 
 = 0000                      C  	LEN2=0 
 = 0001                      C  	LEN2=1 
 = 0001                      C  	HEXOCT=1 
 = 0002                      C  	LENGTH=2 
 = 0001                      C  	RSTLES=1 
 = 0001                      C  	FIVLPT=1 
 = 0000                      C  	I8251=0			;THIS SWITCH IS USED FOR ROSEMOUNT VERSION 
 = 0001                      C  	CONTRO=1		;ALLOW ^O 
 = 0001                      C  	LEN3=LEN2 OR CASSW 
                             C   
                             C   
                             C   
 = 0001                      C  	STRING=1 
 = 0001                      C  	NCRLPT=1 
                             C   
                             C  ; *** OEM Switches which need to be defaulted to 0 
                             C  ; 
 = 0000                      C  	CMPUTN=0 
 = 0000                      C  	DUPONT=0 
 = 0000                      C  	EXIDY=0 
 = 0000                      C  	GESBC=0 
 = 0000                      C  	HEATH=0 
 = 0000                      C  	LOKHED=0 
 = 0000                      C  	MOSTEK=0 
 = 0000                      C  	TEK=0 
 = 0000                      C  	TRSER2=0 
 = 0000                      C  	NASCOM=0 
 = 0000                      C  	NATROM=0 
 = 0000                      C  	NCRBAS=0 
 = 0000                      C  	NCRDEB=0 
 = 0000                      C  	NCRDEB=0 
 = 0000                      C  	NCRELS=0 
 = 0000                      C  	ONTEL=0 
 = 0000                      C  	PCS=0 
 = 0000                      C  	SGSATS=0 
 = 0000                      C  	ALTAIR=0 
 = 0000                      C  	DMC=0 
 = 0000                      C  	PANBAS=0 
 = 0000                      C  	XTNSYS=0 
 = 0000                      C  	NECBAS=0 
                             C  ;******************************************************************* 
                             C  ; Z80 related macros 
                             C  ;******************************************************************* 
 = 0001                      C  	Z80=1			;FOR VERSION THAT RUNS ON BOTH 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-5
Common file to produce 2-segment 8086 GW-CPM BASIC          

                             C  				;8080'S AND ZILOG Z-80'S 
 = 0001                      C  	Z80MAC=1		;USE 8080 MACROS INSTEAD OF Z80 INSTRUCTIONS 
 = 0000                      C  	Z80=0 
 = 0001                      C  	Z80=1 
                             C  LDIR	MACRO 
                             C  	MOV	WORD PTR A,WORD PTR M 
                             C  	STAX	D 
                             C  	INXF	H 
                             C  	INXF	D 
                             C  	DCXF	B 
                             C  	MOV	WORD PTR A,WORD PTR B 
                             C  	ORA	C 
                             C  	JNZ	_-8D 
                             C  ENDM 
                             C  LDDR	MACRO 
                             C  	MOV	WORD PTR A,WORD PTR M 
                             C  	STAX	D 
                             C  	DCXF	H 
                             C  	DCXF	D 
                             C  	DCXF	B 
                             C  	MOV	WORD PTR A,WORD PTR B 
                             C  	ORA	C 
                             C  	JNZ	_-8D 
                             C  ENDM 
                             C  DJNZ	MACRO	    DEST 
                             C  	DCR	B 
                             C  	JNZ	DEST 
                             C  ENDM 
                             C  ;******************************************************************* 
                             C  ; Define reset routines. 
                             C  ;******************************************************************* 
                             C  FSIGN	MACRO 
                             C  	CALL	SIGN 
                             C  ENDM 
                             C  PUSHM	MACRO 
                             C  	MOV	WORD PTR C,WORD PTR M 
                             C  	INX	H 
                             C  	MOV	WORD PTR B,WORD PTR M 
                             C  	INX	H 
                             C  	PUSH	WORD PTR B 
                             C  ENDM 
                             C  SYNCHK	MACRO	X 
                             C  	CALL	SYNCHR 
                             C  	DB	OFFSET X 
                             C  ENDM 
                             C  OUTCHR	MACRO 
                             C  	CALL	OUTDO 
                             C  ENDM 
                             C  CHRGET	MACRO 
                             C  	CALL	CHRGTR 
                             C  ENDM 
                             C  COMPAR	MACRO 
                             C  	CALL	DCOMPR 
                             C  ENDM 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-6
Common file to produce 2-segment 8086 GW-CPM BASIC          

                             C  GETYPE	MACRO 
                             C  	CALL	GETYPR 
                             C  ENDM 
                             C  COMPAR	MACRO 
                             C  	DB	73O 
                             C  	DB	332O 
                             C   ENDM 
                             C  ACRLF	MACRO 
                             C  	DB	13D 
                             C  	DB	10D 
                             C  ENDM 
                             C  PUSHR	MACRO 
                             C  	PUSH	WORD PTR D 
                             C  	PUSH	WORD PTR B 
                             C  ENDM 
                             C  POPR	MACRO 
                             C  	POP	WORD PTR B 
                             C  	POP	WORD PTR D 
                             C  ENDM 
                             C  MOVRI	MACRO	B,C,D,E 
                             C  	DB	1O		; "LXI  B" 
                             C  	DB	OFFSET C 
                             C  	DB	OFFSET B 
                             C  	DB	21O		; "LXI  D" 
                             C  	DB	OFFSET E 
                             C  	DB	OFFSET D 
                             C  ENDM 
                             C  INST	MACRO	X 
                             C  	DB	OX 
                             C  ENDM 
                             C   
                             C   
 = 000F                      C  	CONTO=15		;CHARACTER TO SUPRESS OUTPUT (USUALLY CONTROL-O) 
 = 0000                      C  	DBLTRN=0		;FOR DOUBLE PRECISION TRANSCENDENTALS 
                             C   
 = 000E                      C  	CLMWID=14D		;MAKE COMMA COLUMNS FOURTEEN CHARACTERS 
 = 0080                      C  	DATPSC=128D		;NUMBER OF DATA BYTES IN DISK SECTOR 
 = 0050                      C  	LINLN=80D		;TERMINAL LINE LENGTH 
 = 0084                      C  	LPTLEN=132D 
 = 00FF                      C  	BUFLEN=255		;LONG LINES 
 = 0028                      C  	NAMLEN=40D		;MAXIMUM LENGTH NAME -- 3 TO 127 
                             C   
 = 006E                      C  	NUMLEV=110D		;NUMBER OF STACK LEVELS RESERVED 
                             C  				;BY AN EXPLICIT CALL TO GETSTK 
 = 0004                      C  	STRSIZ=4 
 = 0003                      C  	STRSIZ=3 
 = 0003                      C  	NUMTMP=3		;NUMBER OF STRING TEMPORARIES 
 = 000A                      C  	NUMTMP=10 
                             C   
 0008                        C  	.RADIX	8 
                             C  ; 
                             C  ; Useful macros 
                             C  ; 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-7
Common file to produce 2-segment 8086 GW-CPM BASIC          

                             C  ACRLF   MACRO 
                             C          DB      13D 
                             C          DB      10D 
                             C  ENDM 
                             C   
                             C  INS86   MACRO   A,B,C,D 
                             C          DB      A&O 
                             C  IFNB    <B> 
                             C          DB      B&O 
                             C  ENDIF 
                             C  IFNB    <D> 
                             C          DB      C&O 
                             C          DB      D&O 
                             C  ENDIF 
                             C  IFB     <D> 
                             C   IFNB   <C> 
                             C          DW      C 
                             C    ENDIF 
                             C   ENDIF 
                             C  ENDM 
                             C   
                             C  CALLOS  MACRO 
                             C          CALL    CPMENT 
                             C  ENDM 
                             C   
                             C  POPR    MACRO 
                             C          POP     CX 
                             C          POP     DX 
                             C  ENDM 
                             C   
                             C  ADR     MACRO   X 
                             C          DW      X 
                             C  ENDM 
                             C   
                             C  DC      MACRO   ARG 
                             C          IRPC    ZZ,<ARG> 
                             C              IFDIF       <ZZ>,<">
                             C                  DB      "&ZZ&" 
                             C                  _A="&ZZ&" 
                             C              ENDIF 
                             C          ENDM 
                             C  ENDM 
                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-8
Common file to produce 2-segment 8086 GW-CPM BASIC          

                             C          PAGE 
                             C   
                             C  DBGBRK	MACRO 
                             C  	DB	0CDh,06h,0CCh 
                             C  	ENDM 
                                 
                                 
                                	TITLE   ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF 
                                 
 000A                           	.RADIX	10 
                                 
 = 0000                         TETRA=0 
 = 0000                         ZENITH=0 
 = 0000                         MCI=0 
 = 0000                         MELCO=0				;Mitsubishi Electronics Co. 
 = 0000                         SIRIUS=0 
 = 0000                         HAL=0 
 = 0000                         HALL3=0 
 = 0000                         HALL4=0 
 = 0000                         ALPCPM=0 
 = 0000                         PC8A=0 
 = 0000                         MODEL3=0 
 = 0000                         TSHIBA=0 
 = 0000                         KANJSW=PC8A OR (TSHIBA AND (TRUROM-1)) 
                                				;PUT @(x,y),KANJI(c) function,on,off 
                                 
                                				;Number of graphics planes.  Used to 
                                				;calculate the array size in PUT/GET. 
 =-0001                         PWR2PX=(MELCO OR TETRA OR MCI OR SIRIUS)-1 
                                				;TRUE IF BITS/PIXEL IS ALWAYS POWER 
                                				;OF TWO. SAVES MULTIPLICATION. 
                                 
                                ; 
                                ; MACHINE DEPENDENT SWITCHES 
                                ; 
 = 0000                         TILE=0 
 = 0000                         WINDOW=0 
 = 0000                         LINEST=0 
 = 0000                         VIEW=0 
                                 
 = 0000                         	VIEW=MODEL3 OR PC8A OR TRSER2	; SWITCH FOR GRAPHICS VIEW 
 = 0000                         	TILE=MODEL3 OR PC8A OR TRSER2 OR HALL4 
 = 0000                         	WINDOW=PC8A 
 = 0001                         	QUEUE=MODEL3 OR PC8A OR TRSER2 OR GW 
 = 0000                         	LINEST=MODEL3 OR PC8A OR TRSER2 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	ASSUME DS:DSEG 
                                	EXTRN	QUELEN:WORD,PSNLEN:WORD,QUEINP:WORD,QUEOUT:WORD 
 0000                           DSEG	ENDS 
                                 
                                ; MACHINE DEPENDENT GRAPHICS ROUTINES: 
                                 
                                	EXTRN	SETATR:NEAR,SETC:NEAR 
                                	EXTRN	MAPXYC:NEAR,SCALXY:NEAR,FETCHC:NEAR,STOREC:NEAR,UPC:NEAR 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-9
Common file to produce 2-segment 8086 GW-CPM BASIC          

                                	EXTRN	DOWNC:NEAR,LEFTC:NEAR 
                                	EXTRN	PGINIT:NEAR,PIXSIZ:NEAR,SCANL:NEAR,SCANR:NEAR,PNTINI:NEAR 
                                	EXTRN	TUPC:NEAR 
                                	EXTRN	TDOWNC:NEAR,NREAD:NEAR,NWRITE:NEAR,GTASPC:NEAR 
                                 
                                 
                                ; STUFF IN GENGRP.MAC: 
                                 
                                	EXTRN	DOGRPH:NEAR,ATRSCN:NEAR,SCAN1:NEAR,SCAND:NEAR 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	GRPACX:WORD,GRPACY:WORD,GXPOS:WORD,GYPOS:WORD,ATRBYT:WORD 
 0000                           DSEG	ENDS 
                                 
                                ; OTHER STUFF: 
                                 
                                	EXTRN	CHRGTR:NEAR,GETBYT:NEAR,GETIN2:NEAR,GETYPR:NEAR 
                                	EXTRN	SYNCHR:NEAR 
                                	EXTRN	UMULT:NEAR,MINUTK:NEAR,FDIV:NEAR 
                                	EXTRN	FCERR:NEAR 
                                 
                                	EXTRN	MAKINT:NEAR 
                                	EXTRN	POLKEY:NEAR 
 =                              	CKCNTC	EQU	POLKEY 
 =                              	MKINTC	EQU	MAKINT 
                                	EXTRN	DCOMPR:NEAR 
                                 
                                ; 
                                ; MACRO DEFINITIONS 
                                ; 
                                 
                                MOVRI	MACRO	B,C,D,E 
                                	INS86	271		;;MOVI CX, 
                                	DB	OFFSET C 
                                	DB	OFFSET B 
                                	INS86	272		;;MOVI DX, 
                                	DB	OFFSET E 
                                	DB	OFFSET D 
                                ENDM 
                                HLFDE	MACRO 
                                	INS86	321,352		;;SHR DX,1 
                                ENDM 
                                HLFHL	MACRO 
                                	INS86	321,353		;;SHR BX,1 
                                ENDM 
                                NEGDE	MACRO 
                                	INS86	367,332 
                                ENDM 
                                NEGHL	MACRO 
                                	INS86	367,333 
                                ENDM 
                                 
                                	SUBTTL PAINT - Fill an area with color 
                                ; 
                                ;       PAINT - FILL AN AREA WITH COLOR 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-10
PAINT - Fill an area with color                             

                                ; 
                                ; SYNTAX: PAINT (X,Y), FILLC, BORDC]] 
                                ; 
                                	PUBLIC	PAINT 
                                	EXTRN	PNTINI:NEAR,SCANL:NEAR,SCANR:NEAR,TUPC:NEAR,TDOWNC:NEAR 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	PDIREC:WORD,CSAVEA:WORD,CSAVEM:WORD,MOVCNT:WORD,SKPCNT:WORD 
                                	EXTRN	LFPROG:WORD,RTPROG:WORD 
 0000                           DSEG	ENDS 
                                 
 0000                           PAINT:				;GET (X,Y) OF START 
 0000  E8 0154 R                	CALL	INTQUE		;INIT QUE 
 0003  E8 0000 E                	CALL	SCAN1 
 0006  51                       	PUSH	CX		;SAVE COORDS OF START 
 0007  52                       	PUSH	DX 
 0008  E8 0000 E                	CALL	ATRSCN		;SET FILL ATTRIBUTE AS CURRENT 
 000B  A0 0000 E                	MOV	AL,BYTE PTR ATRBYT	;DEFAULT BORDER COLOR IS SAME AS FILL 
 000E  8A D0                    	MOV	DL,AL		;DEFAULT ATTRIBUTE TO [E] LIKE GETBYT 
 0010  4B                       	DEC	BX 
 0011  E8 0000 E                	CALL	CHRGTR 
 0014  74 07                    	JZ	SHORT GOTBRD	;NOTHING THERE - USE DEFAULT 
 0016  E8 0000 E                	CALL	SYNCHR 
 0019  2C                       	DB	OFFSET 44	;MAKE SURE OF COMMA 
 001A  E8 0000 E                	CALL	GETBYT		;GET BORDER COLOR ARGUMENT 
 001D  8A C2                    GOTBRD:	MOV	AL,DL		;BORDER ATTRIBUTE TO A 
 001F  E8 0000 E                	CALL	PNTINI		;INIT PAINT STUFF & CHECK BORDER ATTRIB 
 0022  73 03                    	JAE	SHORT ??L000 
 0024  E9 0000 E                	JMP	FCERR 
 0027                           ??L000: 
                                 
 0027  5A                       	POP	DX		;GET BACK START COORDS 
 0028  59                       	POP	CX 
 0029  53                       	PUSH	BX		;SAVE TXTPTR UNTIL DONE 
 002A  E8 0815 R                	CALL	CHKRNG		;MAKE SURE POINT IS ON SCREEN 
 002D  E8 0000 E                	CALL	MAPXYC 
                                 
 0030  BA 0001                  	MOV	DX,1		;ENTRY COUNT IS ONE (SKIP NO BORDER) 
 0033  E8 0120 R                	CALL	SCANR1		;SCAN RIGHT FROM INITIAL POSITION 
 0036  74 12                    	JZ	SHORT POPTRT	;STARTED ON BORDER - GET TXTPTR & QUIT 
 0038  53                       	PUSH	BX		;SAVE NO. OF POINTED PAINTED TO RIGHT 
 0039  E8 0133 R                	CALL	SCANL1		;NOW SCAN LEFT FROM INITIAL POS. 
 003C  5A                       	POP	DX		;GET RIGHT SCAN COUNT. 
 003D  03 DA                    	ADD	BX,DX		;ADD TO LEFT SCAN COUNT 
 003F  87 DA                    	XCHG	BX,DX		;COUNT TO [DE] 
                                 
 0041  B0 40                    	MOV	AL,LOW 64	;MAKE ENTRY FOR GOING DOWN 
 0043  E8 0116 R                	CALL	ENTST1 
                                 
 0046  B5 C0                    	MOV	CH,LOW 192	;CAUSE PAINTING UP 
 0048  EB 0D                    	JMP	SHORT STPAIN	;START PAINTING UPWARD 
                                 
 004A  5B                       POPTRT:	POP	BX		;GET BACK TEXTPTR 
 004B  C3                       	RET 
                                ; 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-11
PAINT - Fill an area with color                             

                                ; MAIN PAINT LOOP 
                                ; 
 004C                           PNTLOP: 
 004C  E8 0000 E                	CALL	CKCNTC		;CHECK FOR CTRL-C ABORT 
 004F  E8 01E5 R                PNTLP1:	CALL	GETQ		;GET ONE ENTRY FROM QUEUE 
 0052  8A C1                    	MOV	AL,CL		;NOW GO SET UP CURRENT LOCATION 
 0054  E8 0000 E                	CALL	STOREC 
 0057  8A C5                    STPAIN:	MOV	AL,CH		;GET DIRECTION 
 0059  A2 0000 E                	MOV	BYTE PTR PDIREC,AL 
 005C  02 C0                    	ADD	AL,AL		;SEE WHETHER TO GO UP, DOWN, OR QUIT 
 005E  74 EA                    	JZ	SHORT POPTRT	;IF ZERO, ALL DONE. 
 0060  52                       	PUSH	DX		;SAVE SKPCNT IN CASE TUP&TDOWN DON'T 
 0061  73 05                    	JAE	SHORT PDOWN	;IF POSITIVE, GO DOWN FIRST 
 0063  E8 0000 E                	CALL	TUPC		;MOVE UP BEFORE SCANNING 
 0066  EB 03                    	JMP	SHORT PDOWN2 
                                 
 0068  E8 0000 E                PDOWN:	CALL	TDOWNC		;SEE IF AT BOTTOM & MOVE DOWN IF NOT 
 006B  5A                       PDOWN2:	POP	DX		;GET SKPCNT BACK 
 006C  72 E1                    	JB	SHORT PNTLP1	;OFF SCREEN - GET NEXT ENTRY 
 006E                           PNTLP2:				;SCAN RIGHT & SKIP UP TO SKPCNT BORDER 
 006E  E8 0120 R                	CALL	SCANR1 
 0071  75 02                    	JNZ	SHORT ??L001 
 0073  EB DA                    	JMP	PNTLP1		;IF NO POINTS PAINTED, GET NEXT ENTRY 
 0075                           ??L001: 
 0075  E8 0133 R                	CALL	SCANL1		;NOW SCAN LEFT FROM START POINT 
 0078  8A D3                    	MOV	DL,BL		;[DE] = LEFT MOVCNT 
 007A  8A F7                    	MOV	DH,BH 
 007C  0A C0                    	OR	AL,AL		;SEE IF LINE WAS ALREADY PAINTED 
 007E  74 21                    	JZ	SHORT PNTLP3	;IT WAS - DON'T MAKE OVERHANG ENTRY 
 0080  4B                       	DEC	BX		;IF LMVCNT.GT.1, NEED TO MAKE ENTRY 
 0081  4B                       	DEC	BX		;IN OPPOSITE DIRECTION FOR OVERHANG. 
 0082  8A C7                    	MOV	AL,BH 
 0084  02 C0                    	ADD	AL,AL		;SEE IF [HL] WAS .GT. 1 
 0086  72 19                    	JB	SHORT PNTLP3 
                                 
                                 
 0088  A0 0000 E                	MOV	AL,BYTE PTR PDIREC 
 008B  F6 D0                    	NOT	AL 
 008D  9F                       	LAHF			; PUSH PSW 
 008E  86 C4                    	XCHG	AL,AH 
 0090  50                       	PUSH	AX 
 0091  86 C4                    	XCHG	AL,AH 
 0093  E8 0000 E                	CALL	FETCHC		;GET CURRENT POINT ADDRESS 
 0096  8A C8                    	MOV	CL,AL		;C=CMASK 
 0098  58                       	POP	AX		; POP PSW 
 0099  86 C4                    	XCHG	AL,AH 
 009B  9E                       	SAHF			;GET BACK DIRECTION AND INDEX 
 009C  8A E8                    	MOV	CH,AL 
 009E  E8 0199 R                	CALL	PUTQ 
 00A1  8B 1E 0000 E             PNTLP3:	MOV	BX,MOVCNT	;GET COUNT PAINTED DURING RIGHT SCAN 
 00A5  03 DA                    	ADD	BX,DX		;ADD TO LEFT MOVCNT 
 00A7  87 DA                    	XCHG	BX,DX		;ENTRY COUNT TO [DE] 
 00A9  E8 0106 R                	CALL	ENTSLR		;GO MAKE ENTRY. 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-12
PAINT - Fill an area with color                             

 00AC  8B 1E 0000 E             	MOV	BX,CSAVEA	;SET CURRENT LOCATION BACK TO END 
 00B0  A0 0000 E                	MOV	AL,BYTE PTR CSAVEM	;OF RIGHT SCAN. 
 00B3  E8 0000 E                	CALL	STOREC 
                                 
 00B6  8B 1E 0000 E             PNTLP4:	MOV	BX,SKPCNT	;CALC SKPCNT - MOVCNT TO SEE IF 
 00BA  8B 16 0000 E             	MOV	DX,MOVCNT	;ANY MORE BORDER TO SKIP 
 00BE  2B DA                    	SUB	BX,DX 
 00C0  74 41                    	JZ	SHORT GOPLOP	;NO MORE - END OF THIS SCAN 
 00C2  72 20                    	JB	SHORT PNTLP6	;RIGHT OVERHANG - SEE IF ENTRY NEEDED 
                                 
 00C4  87 DA                    	XCHG	BX,DX		;SKIP COUNT TO [DE] FOR SCANR 
 00C6  E8 0120 R                	CALL	SCANR1		;HERE IF NEED TO CONTINUE RIGHT SCAN 
 00C9  74 38                    	JZ	SHORT GOPLOP	;NO MORE POINTS. 
 00CB  0A C0                    	OR	AL,AL		;SEE IF LINE ALREADY PAINTED 
 00CD  74 E7                    	JZ	SHORT PNTLP4	;YES, DON'T ENTER ANYTHING 
 00CF  87 DA                    	XCHG	BX,DX		;ENTRY COUNT TO [DE] 
 00D1  8B 1E 0000 E             	MOV	BX,CSAVEA	;MAKE ENTRY AT LOCATION SAVED BY SCANR 
 00D5  A0 0000 E                	MOV	AL,BYTE PTR CSAVEM	;SO WE CAN ENTER A POSITIVE SKPCNT 
 00D8  8A C8                    	MOV	CL,AL 
 00DA  A0 0000 E                	MOV	AL,BYTE PTR PDIREC 
 00DD  8A E8                    	MOV	CH,AL 
 00DF  E8 011D R                	CALL	ENTSTK		;MAKE ENTRY 
 00E2  EB D2                    	JMP	SHORT PNTLP4	;CONTINUE UNTIL SKPCNT .LE. 0 
                                 
 00E4                           PNTLP6:	NEGHL			;MAKE NEW SKPCNT POSITIVE 
 00E6  4B                       	DEC	BX		;IF SKPCNT-MOVCNT .LT. -1 
 00E7  4B                       	DEC	BX		;THEN RIGHT OVERHANG ENTRY IS NEEDED. 
 00E8  8A C7                    	MOV	AL,BH		;SEE IF POSITIVE. 
 00EA  02 C0                    	ADD	AL,AL 
 00EC  72 15                    	JB	SHORT GOPLOP	;OVERHANG TOO SMALL FOR NEW ENTRY 
                                 
                                 
 00EE  43                       RTOVH0:	INC	BX		;NOW MOVE LEFT TO BEGINNING OF SCAN 
 00EF  53                       	PUSH	BX		;SO WE CAN ENTER A POSITIVE SKPCNT 
 00F0  87 DA                    	XCHG	BX,DX 
 00F2  E8 0000 E                RTOVH1:	CALL	LEFTC		;START IS -(SKPCNT-MOVCNT)-1 TO LEFT 
 00F5  4A                       	DEC	DX 
 00F6  0B D2                    	OR	DX,DX 
 00F8  75 F8                    	JNZ	SHORT RTOVH1 
                                 
 00FA  5A                       RTOVH2:	POP	DX		;GET BACK ENTRY SKPCNT INTO [DE] 
 00FB  A0 0000 E                	MOV	AL,BYTE PTR PDIREC	;MAKE ENTRY IN OPPOSITE DIRECTION 
 00FE  F6 D0                    	NOT	AL 
 0100  E8 0116 R                	CALL	ENTST1		;MAKE ENTRY 
 0103  E9 004C R                GOPLOP:	JMP	PNTLOP		;GO PROCESS NEXT ENTRY 
                                 
 0106                           ENTSLR: 
 0106  A0 0000 E                	MOV	AL,BYTE PTR LFPROG	;DON'T STACK IF SCANNED LINE 
 0109  8A C8                    	MOV	CL,AL		;WAS ALREADY PAINTED 
 010B  A0 0000 E                	MOV	AL,BYTE PTR RTPROG 
 010E  0A C1                    	OR	AL,CL 
 0110  75 01                    	JNZ	SHORT $+3 
 0112  C3                       	RET			;Z IF SCAN LINE ALREADY PAINTED 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-13
PAINT - Fill an area with color                             

 0113  A0 0000 E                ENTST0:	MOV	AL,BYTE PTR PDIREC 
 0116  8A E8                    ENTST1:	MOV	CH,AL		;DIRECTION IN [B] 
 0118  E8 0000 E                	CALL	FETCHC		;LOAD REGS WITH CURRENT "C" 
 011B  8A C8                    	MOV	CL,AL		;BIT MASK IN [C] 
 011D                           ENTSTK: 
 011D  EB 7A 90                 ENTST9:	JMP	PUTQ 
                                 
 0120  E8 0000 E                SCANR1:	CALL	SCANR		;PERFORM LOW LEVEL RIGHT SCAN 
 0123  89 16 0000 E             	MOV	SKPCNT,DX	;SAVE UPDATED SKPCNT 
 0127  89 1E 0000 E             	MOV	MOVCNT,BX	;SAVE MOVCNT 
 012B  0B DB                    	OR	BX,BX		;SET CC'S ON MOVCNT 
 012D  8A C1                    	MOV	AL,CL		;GET ALREADY-PAINTED FLAG FROM [C] 
 012F  A2 0000 E                	MOV	BYTE PTR RTPROG,AL 
 0132  C3                       	RET 
                                 
 0133  E8 0000 E                SCANL1:	CALL	FETCHC		;GET CURRENT LOCATION 
 0136  53                       	PUSH	BX		;AND SWAP WITH CSV 
 0137  50                       	PUSH	AX 
 0138  8B 1E 0000 E             	MOV	BX,CSAVEA 
 013C  A0 0000 E                	MOV	AL,BYTE PTR CSAVEM 
 013F  E8 0000 E                	CALL	STOREC		;REPOS AT BEGINNING OF SCAN 
 0142  58                       	POP	AX		;REGET PLACE WHERE RT SCN STOPPED 
 0143  5B                       	POP	BX 
 0144  89 1E 0000 E             	MOV	CSAVEA,BX	;AND SAVE IT IN TEMP LOCATION 
 0148  A2 0000 E                	MOV	BYTE PTR CSAVEM,AL 
 014B  E8 0000 E                	CALL	SCANL		;NOW DO LOW LEVEL LEFT SCAN 
 014E  8A C1                    	MOV	AL,CL		;GET ALREADY-PAINTED FLAG FROM [C] 
 0150  A2 0000 E                	MOV	BYTE PTR LFPROG,AL	;WHETHER IT WAS ALREADY PAINTED 
 0153  C3                       	RET 
                                 
                                ;ROUTINE FOR INITIALISING QUEUE PARAMS 
                                ;QUELEN:CONTAINS QUEUE LENGTH 
                                ;PSNLEN:CONTAINS PRESENT QUEUE LENGTH 
                                ;QUEINP:        QUEINPUT POINTER 
                                ;QUEOUT:        QUEOUTPUT POINTER 
 0154  53                       INTQUE:	PUSH	BX 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	STREND:WORD 
 0000                           DSEG	ENDS 
 0155  8B 1E 0000 E             	MOV	BX,STREND	;GET BEGINNING OF FREE SPACE 
 0159  87 DA                    	XCHG	BX,DX		; 
 015B  52                       	PUSH	DX 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	FRETOP:WORD 
 0000                           DSEG	ENDS 
 015C  8B 1E 0000 E             	MOV	BX,FRETOP	;GET END OF FREE SPACE 
 0160  2B DA                    	SUB	BX,DX		;HL=FREE SPACE 
 0162  BA 03E8                  	MOV	DX,1000D	; 
 0165  3B DA                    	CMP	BX,DX		;IS IT LESSTHAN  1000 BYTES 
 0167  72 03                    	JNAE	SHORT ??L002 
 0169  EB 04 90                 	JMP	INTQU2 
 016C                           ??L002: 
                                EXTRN	GARBA2:NEAR 
 016C  E8 0000 E                	CALL	GARBA2		;CALL GARBAGE COLLECTION 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-14
PAINT - Fill an area with color                             

 016F  5A                       INTQU2:	POP	DX		;GET BACK FREE START 
                                 
 0170  8B 1E 0000 E             	MOV	BX,FRETOP 
                                 
 0174  2B DA                    	SUB	BX,DX 
 0176  BA 000C                  	MOV	DX,12D 
 0179  3B DA                    	CMP	BX,DX 
 017B  73 03                    	JAE	SHORT ??L003 
                                EXTRN	OMERR:NEAR 
 017D  E9 0000 E                	JMP	OMERR		;IF LESS THAN 12 BYTES GIVE MEMORY OVERFLOW 
 0180                           ??L003: 
 0180  89 1E 0000 E             	MOV	QUELEN,BX	;SET LENGTH OF QUEUE 
 0184  BB 0000                  	MOV	BX,0 
 0187  89 1E 0000 E             	MOV	PSNLEN,BX	;SET PRESENT LENGTH 
 018B  8B 1E 0000 E             	MOV	BX,STREND	;HL=BEGINNING OF FREE SPACE 
 018F  89 1E 0000 E             	MOV	QUEINP,BX	; 
 0193  89 1E 0000 E             	MOV	QUEOUT,BX	;INIT QUEUE POINTERS 
 0197  5B                       	POP	BX		;GET BACK CALLERS HL 
 0198  C3                       	RET 
 0199  52                       PUTQ:	PUSH	DX 
 019A  53                       	PUSH	BX 
 019B  8B 1E 0000 E             	MOV	BX,PSNLEN	;GET QUEUE      PRESENT LENGTH 
 019F  BA 0006                  	MOV	DX,6		;IS ENOUGH SPACE LEFT OUT 
 01A2  9F                       	LAHF 
 01A3  03 DA                    	ADD	BX,DX 
 01A5  D1 DE                    	RCR	SI,1 
 01A7  9E                       	SAHF 
 01A8  D1 D6                    	RCL	SI,1 
 01AA  89 1E 0000 E             	MOV	PSNLEN,BX	;UPDATE PRESENT LENGTH 
 01AE  8B 16 0000 E             	MOV	DX,QUELEN	; 
 01B2  3B DA                    	CMP	BX,DX		; 
 01B4  72 03                    	JNAE	SHORT ??L004 
 01B6  E9 0000 E                	JMP	OMERR		;IF THE PRESENT LENGTH IS EQUAL TO MAX OR GREATER THEN GIVE ERROR 
 01B9                           ??L004: 
 01B9  8B 1E 0000 E             	MOV	BX,QUEINP 
 01BD  E8 0227 R                	CALL	WRAP		;CHECK FOR WRAP AROUND CASE 
 01C0  5A                       	POP	DX 
 01C1  88 17                    	MOV	BYTE PTR [BX],DL 
 01C3  9F                       	LAHF 
 01C4  43                       	INC	BX 
 01C5  9E                       	SAHF 
 01C6  88 37                    	MOV	BYTE PTR [BX],DH 
 01C8  9F                       	LAHF 
 01C9  43                       	INC	BX 
 01CA  9E                       	SAHF 
 01CB  88 0F                    	MOV	BYTE PTR [BX],CL 
 01CD  9F                       	LAHF 
 01CE  43                       	INC	BX 
 01CF  9E                       	SAHF 
 01D0  88 2F                    	MOV	BYTE PTR [BX],CH 
 01D2  9F                       	LAHF 
 01D3  43                       	INC	BX 
 01D4  9E                       	SAHF 
 01D5  5A                       	POP	DX 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-15
PAINT - Fill an area with color                             

 01D6  88 17                    	MOV	BYTE PTR [BX],DL 
 01D8  9F                       	LAHF 
 01D9  43                       	INC	BX 
 01DA  9E                       	SAHF 
 01DB  88 37                    	MOV	BYTE PTR [BX],DH 
 01DD  9F                       	LAHF 
 01DE  43                       	INC	BX 
 01DF  9E                       	SAHF 
 01E0  89 1E 0000 E             	MOV	QUEINP,BX 
 01E4  C3                       	RET 
 01E5  8B 1E 0000 E             GETQ:	MOV	BX,PSNLEN 
 01E9  8A C7                    	MOV	AL,BH 
 01EB  0A C3                    	OR	AL,BL		;ANY ENTRYS ON STACK 
 01ED  B5 00                    	MOV	CH,LOW 0	;FOR NO ENTRIES SET B TO ZERO 
 01EF  75 01                    	JNZ	SHORT $+3 
 01F1  C3                       	RET 
 01F2  BA 0006                  	MOV	DX,6		;DECREMENT QUEUE LENGTH BY 6 
 01F5  2B DA                    	SUB	BX,DX 
 01F7  89 1E 0000 E             	MOV	PSNLEN,BX 
 01FB  8B 1E 0000 E             	MOV	BX,QUEOUT	;HL=DEQUE POINTER 
 01FF  E8 0227 R                	CALL	WRAP		;CHECK FOR WRAP AROUND 
 0202  8A 17                    	MOV	DL,BYTE PTR [BX] 
 0204  9F                       	LAHF 
 0205  43                       	INC	BX 
 0206  9E                       	SAHF 
 0207  8A 37                    	MOV	DH,BYTE PTR [BX] 
 0209  9F                       	LAHF 
 020A  43                       	INC	BX 
 020B  9E                       	SAHF 
 020C  52                       	PUSH	DX 
 020D  8A 0F                    	MOV	CL,BYTE PTR [BX] 
 020F  9F                       	LAHF 
 0210  43                       	INC	BX 
 0211  9E                       	SAHF 
 0212  8A 2F                    	MOV	CH,BYTE PTR [BX] 
 0214  9F                       	LAHF 
 0215  43                       	INC	BX 
 0216  9E                       	SAHF 
 0217  8A 17                    	MOV	DL,BYTE PTR [BX] 
 0219  9F                       	LAHF 
 021A  43                       	INC	BX 
 021B  9E                       	SAHF 
 021C  8A 37                    	MOV	DH,BYTE PTR [BX] 
 021E  9F                       	LAHF 
 021F  43                       	INC	BX 
 0220  9E                       	SAHF 
 0221  89 1E 0000 E             	MOV	QUEOUT,BX 
 0225  5B                       	POP	BX 
 0226  C3                       	RET 
 0227  53                       WRAP:	PUSH	BX		; 
 0228  BA 0006                  	MOV	DX,6 
 022B  9F                       	LAHF 
 022C  03 DA                    	ADD	BX,DX 
 022E  D1 DE                    	RCR	SI,1 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-16
PAINT - Fill an area with color                             

 0230  9E                       	SAHF 
 0231  D1 D6                    	RCL	SI,1 
 0233  8B 16 0000 E             	MOV	DX,FRETOP 
 0237  3B DA                    	CMP	BX,DX		;ARE WE GOING OUT OF QUEUE END 
 0239  5B                       	POP	BX 
 023A  73 01                    	JNB	SHORT $+3 
 023C  C3                       	RET			;NO 
 023D  8B 1E 0000 E             	MOV	BX,STREND	;SET TO BEGINNING OF QUEUE 
 0241  C3                       	RET 
                                 
                                	SUBTTL CIRCLE - Draw a circle 
                                ; 
                                ;       CIRCLE - DRAW A CIRCLE 
                                ; 
                                ; SYNTAX: CIRCLE @(X,Y),RADIUS[,ATRB[,+/-STARTANG[,+/-ENDANG[,ASPECT]]]] 
                                ; 
                                	EXTRN	GTASPC:NEAR 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	ASPECT:WORD,CSTCNT:WORD,CENCNT:WORD,CRCSUM:WORD,CPLOTF:WORD 
                                	EXTRN	CLINEF:WORD 
                                	EXTRN	CNPNTS:WORD,CPCNT:WORD,CPCNT8:WORD,VALTYP:WORD,CXOFF:WORD 
                                	EXTRN	CYOFF:WORD,CSCLXY:WORD 
 0000                           DSEG	ENDS 
                                 
                                PUBLIC	CIRCLE 
 0242  E8 0000 E                CIRCLE:	CALL	SCAN1		;GET (X,Y) OF CENTER INTO GRPACX,Y 
 0245  E8 0000 E                	CALL	SYNCHR 
 0248  2C                       	DB	OFFSET 44	;EAT COMMA 
 0249  E8 0000 E                	CALL	GETIN2		;GET THE RADIUS 
 024C  53                       	PUSH	BX		;SAVE TXTPTR 
 024D  87 DA                    	XCHG	BX,DX 
 024F  89 1E 0000 E             	MOV	GXPOS,BX	;SAVE HERE TILL START OF MAIN LOOP 
 0253  E8 0000 E                	CALL	MKINTC		;PUT INTEGER INTO FAC 
                                EXTRN	FRCSNG:NEAR 
 0256  E8 0000 E                	CALL	FRCSNG		;CONVERT TO SINGLE PRECISION 
                                	MOVRI	200O,65O,4O,363O	;LOAD REGS WITH SQR(2)/2 
                                EXTRN	FMULT:NEAR 
 025F  E8 0000 E                	CALL	FMULT		;DO FLOATING PT MULTIPLY 
                                EXTRN	FRCINT:NEAR 
 0262  E8 0000 E                	CALL	FRCINT		;CONVERT TO INTEGER & GET INTO [HL] 
 0265  89 1E 0000 E             	MOV	CNPNTS,BX	;CNPNTS=RADIUS*SQR(2)/2=# PTS TO PLOT 
 0269  32 C0                    	XOR	AL,AL		;ZERO OUT CLINEF - NO LINES TO CENTER 
 026B  A2 0000 E                	MOV	BYTE PTR CLINEF,AL 
 026E  A2 0000 E                	MOV	BYTE PTR CSCLXY,AL	;INITIALLY SCALING Y 
 0271  5B                       	POP	BX		;REGET TXTPTR 
 0272  E8 0000 E                	CALL	ATRSCN		;SCAN POSSIBLE ATTRIBUTE 
 0275  B1 01                    	MOV	CL,LOW 1	;SET LO BIT IN CLINEF FOR LINE TO CNTR 
 0277  BA 0000                  	MOV	DX,0		;DEFAULT START COUNT = 0 
 027A  E8 0488 R                	CALL	CGTCNT 
 027D  52                       	PUSH	DX		;SAVE COUNT FOR LATER COMPARISON 
 027E  B1 80                    	MOV	CL,LOW 128D	;SET HI BIT IN CLINEF FOR LINE TO CNTR 
 0280  BA FFFF                  	MOV	DX,OFFSET 0-1	;DEFAULT END COUNT = INFINITY 
 0283  E8 0488 R                	CALL	CGTCNT 
 0286  5E                       	POP	SI		;XTHL 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-17
CIRCLE - Draw a circle                                      

 0287  87 F3                    	XCHG	SI,BX 
 0289  56                       	PUSH	SI		;GET START COUNT, PUSH TXTPTR TILL DONE 
 028A  32 C0                    	XOR	AL,AL 
 028C  87 DA                    	XCHG	BX,DX		;REVERSE REGS TO TEST FOR .LT. 
 028E  3B DA                    	CMP	BX,DX		;SEE IF END .GE. START 
 0290  B0 00                    	MOV	AL,LOW 0 
 0292  73 16                    	JAE	SHORT CSTPLT	;YES, PLOT POINTS BETWEEN STRT & END 
 0294  FE C8                    	DEC	AL		;PLOT POINTS ABOVE & BELOW 
 0296  87 DA                    	XCHG	BX,DX		;SWAP START AND END SO START .LT. END 
 0298  50                       	PUSH	AX		;Swap sense of center line flags 
 0299  A0 0000 E                	MOV	AL,BYTE PTR CLINEF 
 029C  8A C8                    	MOV	CL,AL 
 029E  D0 C0                    	ROL	AL,1 
 02A0  D0 C0                    	ROL	AL,1 
 02A2  0A C1                    	OR	AL,CL 
 02A4  D0 C8                    	ROR	AL,1 
 02A6  A2 0000 E                	MOV	BYTE PTR CLINEF,AL	;Store swapped flags 
 02A9  58                       	POP	AX 
 02AA  A2 0000 E                CSTPLT:	MOV	BYTE PTR CPLOTF,AL	;SET UP PLOT POLARITY FLAG 
 02AD  89 16 0000 E             	MOV	CSTCNT,DX	;STORE START COUNT 
 02B1  89 1E 0000 E             	MOV	CENCNT,BX	;AND END COUNT 
 02B5  5B                       	POP	BX		;GET TXTPTR 
 02B6  4B                       	DEC	BX		;NOW SEE IF LAST CHAR WAS A COMMA 
 02B7  E8 0000 E                	CALL	CHRGTR 
 02BA  75 13                    	JNZ	SHORT CIRC1	;SOMETHING THERE 
 02BC  53                       	PUSH	BX		;SAVE TXTPTR 
 02BD  E8 0000 E                	CALL	GTASPC		;GET DEFAULT ASPECT RATIO INTO [HL] 
 02C0  8A C7                    	MOV	AL,BH 
 02C2  0A C0                    	OR	AL,AL		;IS ASPECT RATIO GREATER THAN ONE? 
 02C4  74 2D                    	JZ	SHORT CIRC2	;BRIF GOOD ASPECT RATIO 
 02C6  B0 01                    	MOV	AL,LOW 1 
 02C8  A2 0000 E                	MOV	BYTE PTR CSCLXY,AL 
 02CB  87 DA                    	XCHG	BX,DX		;ASPECT RATIO IS GREATER THAN ONE, USE INVERSE 
 02CD  EB 24                    	JMP	SHORT CIRC2	;NOW GO CONVERT TO FRACTION OF 256 
                                 
 02CF  E8 0000 E                CIRC1:	CALL	SYNCHR 
 02D2  2C                       	DB	OFFSET 44	;EAT COMMA 
                                EXTRN	FRMEVL:NEAR 
 02D3  E8 0000 E                	CALL	FRMEVL 
 02D6  53                       	PUSH	BX		;SAVE TXTPTR 
 02D7  E8 0000 E                	CALL	FRCSNG		;MAKE IT FLOATING POINT 
 02DA  E8 04F7 R                	CALL	CMPONE		;SEE IF GREATER THAN ONE 
 02DD  75 08                    	JNZ	SHORT CIRC11	;LESS THAN ONE - SCALING Y 
 02DF  FE C0                    	INC	AL		;MAKE [A] NZ 
 02E1  A2 0000 E                	MOV	BYTE PTR CSCLXY,AL	;FLAG SCALING X 
 02E4  E8 0000 E                	CALL	FDIV		;RATIO = 1/RATIO 
                                				;MAKE NUMBER FRACTION OF 256 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	FAC:WORD 
 0000                           DSEG	ENDS 
                                 
 02E7  BB 0000 E                CIRC11:	MOV	BX,OFFSET FAC	;BY MULTIPLYING BY 2^8 (256) 
 02EA  8A 07                    	MOV	AL,BYTE PTR [BX] 
 02EC  04 08                    	ADD	AL,LOW 8	;ADD 8 TO EXPONENT 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-18
CIRCLE - Draw a circle                                      

 02EE  88 07                    	MOV	BYTE PTR [BX],AL 
 02F0  E8 0000 E                	CALL	FRCINT		;MAKE IT AN INTEGER IN [HL] 
 02F3  89 1E 0000 E             CIRC2:	MOV	ASPECT,BX	;STORE ASPECT RATIO 
                                ; 
                                ;       CIRCLE ALGORITHM 
                                ; 
                                ;       [HL]=X=RADIUS * 2 (ONE BIT FRACTION FOR ROUNDING) 
                                ;       [DE]=Y=0 
                                ;       SUM =0 
                                ; LOOP: IF Y IS EVEN THEN 
                                ;             REFLECT((X+1)/2,(Y+1)/2) (I.E., PLOT POINTS) 
                                ;             IF X.LT.Y THEN EXIT 
                                ;       SUM=SUM+2*Y+1 
                                ;       Y=Y+1 
                                ;       IF SUM.GGWGRP.RNO 
                                ;             SUM=SUM-2*X+1 
                                ;             X=X-1 
                                ;       ENDIF 
                                ;       GOTO LOOP 
                                ; 
 02F7  BA 0000                  	MOV	DX,0		;INIT Y = 0 
 02FA  89 16 0000 E             	MOV	CRCSUM,DX	;SUM = 0 
 02FE  8B 1E 0000 E             	MOV	BX,GXPOS	;X = RADIUS*2 
 0302  03 DB                    	ADD	BX,BX 
                                 
 0304                           CIRCLP: 
 0304  8A C2                    	MOV	AL,DL		;TEST EVENNESS OF Y 
 0306  D0 D8                    	RCR	AL,1		;TO SEE IF WE NEED TO PLOT 
 0308  72 16                    	JB	SHORT CRCLP2	;Y IS ODD - DON'T TEST OR PLOT 
 030A  52                       	PUSH	DX		;SAVE Y AND X 
 030B  53                       	PUSH	BX 
 030C  43                       	INC	BX		;ACTUAL COORDS ARE (X+1)/2,(Y+1)/2 
                                	HLFHL			;(PLUS ONE BEFORE DIVIDE TO ROUND UP) 
 030F  42                       	INC	DX 
                                	HLFDE 
 0312  E8 0358 R                	CALL	CPLOT8 
 0315  5A                       	POP	DX		;RESTORE X AND Y 
 0316  5B                       	POP	BX		;INTO [DE] AND [HL] (BACKWARDS FOR CMP) 
 0317  3B DA                    	CMP	BX,DX		;QUIT IF Y .GE. X 
 0319  72 03                    	JNAE	SHORT ??L005 
 031B  E9 004A R                	JMP	POPTRT		;GO POP TXTPTR AND QUIT 
 031E                           ??L005: 
 031E  87 DA                    	XCHG	BX,DX		;GET OFFSETS INTO PROPER REGISTERS 
 0320  8B CB                    CRCLP2:	MOV	CX,BX		;[BC]=X 
 0322  8B 1E 0000 E             	MOV	BX,CRCSUM 
 0326  43                       	INC	BX		;SUM = SUM+2*Y+1 
 0327  03 DA                    	ADD	BX,DX 
 0329  03 DA                    	ADD	BX,DX 
 032B  8A C7                    	MOV	AL,BH		;NOW CHECK SIGN OF RESULT 
 032D  02 C0                    	ADD	AL,AL 
 032F  72 0E                    	JB	SHORT CNODEX	;DON'T ADJUST X IF WAS NEGATIVE 
 0331  52                       	PUSH	DX		;SAVE Y 
 0332  87 DA                    	XCHG	BX,DX		;[DE]=SUM 
 0334  8B D9                    	MOV	BX,CX		;[HL]=X 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-19
CIRCLE - Draw a circle                                      

 0336  03 DB                    	ADD	BX,BX		;[HL]=2*X-1 
 0338  4B                       	DEC	BX 
 0339  87 DA                    	XCHG	BX,DX		;PREPARE TO SUBTRACT 
 033B  2B DA                    	SUB	BX,DX		;CALC SUM-2*X+1 
 033D  49                       	DEC	CX		;X=X-1 
 033E  5A                       	POP	DX		;GET Y BACK 
 033F  89 1E 0000 E             CNODEX:	MOV	CRCSUM,BX	;UPDATE CIRCLE SUM 
 0343  8B D9                    	MOV	BX,CX		;GET X BACK TO [HL] 
 0345  42                       	INC	DX		;Y=Y+1 
 0346  EB BC                    	JMP	SHORT CIRCLP 
                                 
 0348  52                       CPLSCX:	PUSH	DX 
 0349  E8 0466 R                	CALL	SCALEY 
 034C  5B                       	POP	BX		;GET UNSCALED INTO [HL] 
 034D  A0 0000 E                	MOV	AL,BYTE PTR CSCLXY	;SEE WHETHER ASPECT WAS .GT. 1 
 0350  0A C0                    	OR	AL,AL 
 0352  75 01                    	JNZ	SHORT $+3 
 0354  C3                       	RET			;DON'T SWAP IF ZERO 
 0355  87 DA                    	XCHG	BX,DX 
 0357  C3                       	RET 
                                ; 
                                ; REFLECT THE POINTS AROUND CENTER 
                                ; [HL]=X OFFSET FROM CENTER, [DE]=Y OFFSET FROM CENTER 
                                ; 
 0358  89 16 0000 E             CPLOT8:	MOV	CPCNT,DX	;POINT COUNT IS ALWAYS = Y 
 035C  53                       	PUSH	BX		;SAVE X 
 035D  BB 0000                  	MOV	BX,0		;START CPCNT8 OUT AT 0 
 0360  89 1E 0000 E             	MOV	CPCNT8,BX 
 0364  E8 0348 R                	CALL	CPLSCX		;SCALE Y AS APPROPRIATE 
 0367  89 1E 0000 E             	MOV	CXOFF,BX	;SAVE CXOFF 
 036B  5B                       	POP	BX		;GET BACK X 
 036C  87 DA                    	XCHG	BX,DX 
 036E  53                       	PUSH	BX		;SAVE INITIAL [DE] 
 036F  E8 0348 R                	CALL	CPLSCX		;SCALE X AS APPROPRIATE 
 0372  89 16 0000 E             	MOV	CYOFF,DX 
 0376  5A                       	POP	DX		;GET BACK INITIAL [DE] 
                                	NEGDE			;START: [DE]=-Y,[HL]=X,CXOFF=Y,CY=X 
                                 
 0379  E8 039E R                	CALL	CPLOT4		;PLOT +X,-SY -Y,-SX -X,+SY +Y,-SX 
                                 
 037C  53                       	PUSH	BX 
 037D  52                       	PUSH	DX 
 037E  8B 1E 0000 E             	MOV	BX,CNPNTS	;GET # PNTS PER OCTANT 
 0382  89 1E 0000 E             	MOV	CPCNT8,BX	;AND SET FOR DOING ODD OCTANTS 
 0386  8B 16 0000 E             	MOV	DX,CPCNT	;GET POINT COUNT 
 038A  2B DA                    	SUB	BX,DX		;ODD OCTANTS ARE BACKWARDS SO 
 038C  89 1E 0000 E             	MOV	CPCNT,BX	;PNTCNT = PNTS/OCT - PNTCNT 
 0390  8B 1E 0000 E             	MOV	BX,CXOFF	;NEED TO NEGATE CXOFF TO START OUT RIGHT 
                                	NEGHL 
 0396  89 1E 0000 E             	MOV	CXOFF,BX 
 039A  5A                       	POP	DX 
 039B  5B                       	POP	BX 
                                	NEGDE			;ALSO NEED TO MAKE [DE]=-SX=-[DE] 
                                				;PLOT +Y,-SX -X,-SY -Y,+SX +X,+SY 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-20
CIRCLE - Draw a circle                                      

                                				;(FALL THRU TO CPLOT4) 
 039E  B0 04                    CPLOT4:	MOV	AL,LOW 4	;LOOP FOUR TIMES 
                                 
 03A0  50                       CPLOT:	PUSH	AX		;SAVE LOOP COUNT 
 03A1  53                       	PUSH	BX		;SAVE BOTH X & Y OFFSETS 
 03A2  52                       	PUSH	DX 
 03A3  53                       	PUSH	BX		;SAVE TWICE 
 03A4  52                       	PUSH	DX 
 03A5  8B 16 0000 E             	MOV	DX,CPCNT8	;GET NP*OCTANT*8 
 03A9  8B 1E 0000 E             	MOV	BX,CNPNTS	;ADD SQR(2)*RADIUS FOR NEXT OCTANT 
 03AD  03 DB                    	ADD	BX,BX 
 03AF  03 DA                    	ADD	BX,DX 
 03B1  89 1E 0000 E             	MOV	CPCNT8,BX	;UPDATE FOR NEXT TIME 
 03B5  8B 1E 0000 E             	MOV	BX,CPCNT	;CALC THIS POINT'S POINT COUNT 
 03B9  03 DA                    	ADD	BX,DX		;ADD IN PNTCNT*OCTANT*NP 
 03BB  87 DA                    	XCHG	BX,DX		;SAVE THIS POINT'S COUNT IN [DE] 
 03BD  8B 1E 0000 E             	MOV	BX,CSTCNT	;GET START COUNT 
 03C1  3B DA                    	CMP	BX,DX 
 03C3  74 1E                    	JZ	SHORT CLINSC	;SEE IF LINE TO CENTER REQUIRED 
 03C5  73 0A                    	JAE	SHORT CNBTWN	;IF SC .GT. PC, THEN NOT BETWEEN 
 03C7  8B 1E 0000 E             	MOV	BX,CENCNT	;GET END COUNT 
 03CB  3B DA                    	CMP	BX,DX 
 03CD  74 0B                    	JZ	SHORT CLINEC	;GO SEE IF LINE FROM CENTER NEEDED 
 03CF  73 23                    	JAE	SHORT CBTWEN	;IF EC .GT. PC, THEN BETWEEN 
                                 
 03D1  A0 0000 E                CNBTWN:	MOV	AL,BYTE PTR CPLOTF	;SEE WHETHER TO PLOT OR NOT 
 03D4  0A C0                    	OR	AL,AL		;IF NZ, PLOT POINTS NOT IN BETWEEN 
 03D6  75 27                    	JNZ	SHORT CPLTIT	;NEED TO PLOT NOT-BETWEEN POINTS 
 03D8  EB 21                    	JMP	SHORT GCPLFN	;DON'T PLOT - FIX UP STACK & RETURN 
                                 
 03DA  A0 0000 E                CLINEC:	MOV	AL,BYTE PTR CLINEF	;GET CENTER LINE FLAG BYTE 
 03DD  02 C0                    	ADD	AL,AL		;BIT 7=1 MEANS DRAW LINE FROM CENTER 
 03DF  73 1E                    	JAE	SHORT CPLTIT	;NO LINE REQUIRED - JUST PLOT POINT 
 03E1  EB 07                    	JMP	SHORT CLINE	;LINE REQUIRED. 
                                 
 03E3  A0 0000 E                CLINSC:	MOV	AL,BYTE PTR CLINEF	;GET CENTER LINE FLAG BYTE 
 03E6  D0 D8                    	RCR	AL,1		;BIT 0=1 MEANS LINE FROM CENTER NEEDED. 
 03E8  73 15                    	JAE	SHORT CPLTIT	;NO LINE REQUIRED - JUST PLOT POINT 
                                 
 03EA  5A                       CLINE:	POP	DX		;GET X & Y OFFSETS 
 03EB  5B                       	POP	BX 
 03EC  E8 0453 R                	CALL	GTABSC		;GO CALC TRUE COORDINATE OF POINT 
 03EF  E8 0440 R                	CALL	CLINE2		;DRAW LINE FROM [BC],[DE] TO CENTER 
 03F2  EB 1B                    	JMP	SHORT CPLFIN 
                                 
 03F4  A0 0000 E                CBTWEN:	MOV	AL,BYTE PTR CPLOTF	;SEE WHETHER PLOTTING BETWEENS OR NOT 
 03F7  0A C0                    	OR	AL,AL 
 03F9  74 04                    	JZ	SHORT CPLTIT	;IF Z, THEN DOING BETWEENS 
 03FB  5A                       GCPLFN:	POP	DX		;CLEAN UP STACK 
 03FC  5B                       	POP	BX 
 03FD  EB 10                    	JMP	SHORT CPLFIN 
                                 
 03FF  5A                       CPLTIT:	POP	DX		;GET X & Y OFFSETS 
 0400  5B                       	POP	BX 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-21
CIRCLE - Draw a circle                                      

 0401  E8 0453 R                	CALL	GTABSC		;CALC TRUE COORDINATE OF POINT 
 0404  E8 0000 E                	CALL	SCALXY		;SEE IF POINT OFF SCREEN 
 0407  73 06                    	JAE	SHORT CPLFIN	;NC IF POINT OFF SCREEN - NO PLOT 
 0409  E8 0000 E                	CALL	MAPXYC 
 040C  E8 0000 E                	CALL	SETC		;PLOT THE POINT 
                                 
 040F  5A                       CPLFIN:	POP	DX		;GET BACK OFFSETS 
 0410  5B                       	POP	BX 
 0411  58                       	POP	AX		;GET BACK LOOP COUNT 
 0412  FE C8                    	DEC	AL 
 0414  75 01                    	JNZ	SHORT $+3 
 0416  C3                       	RET			;QUIT IF DONE. 
 0417  9F                       	LAHF			; PUSH PSW 
 0418  86 C4                    	XCHG	AL,AH 
 041A  50                       	PUSH	AX 
 041B  86 C4                    	XCHG	AL,AH 
 041D  52                       	PUSH	DX		;SAVE X OFFSET 
 041E  8B 16 0000 E             	MOV	DX,CXOFF	;SWAP [HL] AND CXOFF 
                                	NEGDE			;NEGATE NEW [HL] 
 0424  89 1E 0000 E             	MOV	CXOFF,BX 
 0428  87 DA                    	XCHG	BX,DX 
 042A  5A                       	POP	DX 
 042B  53                       	PUSH	BX 
 042C  8B 1E 0000 E             	MOV	BX,CYOFF	;SWAP [DE] AND CYOFF 
 0430  87 DA                    	XCHG	BX,DX		;NEGATE NEW [DE] 
 0432  89 1E 0000 E             	MOV	CYOFF,BX 
                                	NEGDE 
 0438  5B                       	POP	BX 
 0439  58                       	POP	AX		; POP PSW 
 043A  86 C4                    	XCHG	AL,AH 
 043C  9E                       	SAHF 
 043D  E9 03A0 R                	JMP	CPLOT		;PLOT NEXT POINT 
                                 
 0440  8B 1E 0000 E             CLINE2:	MOV	BX,GRPACX	;DRAW LINE FROM [BC],[DE] 
 0444  89 1E 0000 E             	MOV	GXPOS,BX	;TO GRPACX,Y 
 0448  8B 1E 0000 E             	MOV	BX,GRPACY 
 044C  89 1E 0000 E             	MOV	GYPOS,BX 
 0450  E9 0000 E                	JMP	DOGRPH		;GO DRAW THE LINE 
                                ; 
                                ; GTABSC - GET ABSOLUTE COORDS 
                                ; ([BC],[DE])=(GRPACX+[HL],GRPACY+[DE]) 
                                ; 
 0453  52                       GTABSC:	PUSH	DX		;SAVE Y OFFSET FROM CENTER 
 0454  8B 16 0000 E             	MOV	DX,GRPACX	;GET CENTER POS 
 0458  03 DA                    	ADD	BX,DX		;ADD TO DX 
 045A  8B CB                    	MOV	CX,BX		;[BC]=X CENTER + [HL] 
 045C  5A                       	POP	DX 
 045D  8B 1E 0000 E             	MOV	BX,GRPACY	;GET CENTER Y 
 0461  03 DA                    	ADD	BX,DX 
 0463  87 DA                    	XCHG	BX,DX		;[DE]=Y CENTER + [DE] 
 0465  C3                       	RET 
                                 
 0466  8B 1E 0000 E             SCALEY:	MOV	BX,ASPECT	;SCALE [DE] BY ASPECT RATIO 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-22
CIRCLE - Draw a circle                                      

 046A  8A C3                    SCALE:	MOV	AL,BL		;CHECK FOR *0 AND *1 CASES 
 046C  0A C0                    SCALE2:	OR	AL,AL		;ENTRY TO DO [A]*[DE] ([A] NON-Z) 
 046E  75 08                    	JNZ	SHORT SCAL2	;NON-ZERO 
 0470  0A C7                    	OR	AL,BH		;TEST HI BYTE 
 0472  74 01                    	JZ	SHORT $+3 
 0474  C3                       	RET			;IF NZ, THEN WAS *1 CASE 
 0475  87 DA                    	XCHG	BX,DX		;WAS *0 CASE - PUT 0 IN [DE] 
 0477  C3                       	RET 
                                 
 0478                           SCAL2:	INS86	62,344		;XORB AH,AH 
                                	INS86	367,342		;MUL  DX 
                                	INS86	212,362		;MOVB DH,DL 
                                	INS86	5		;ADDI AX,128  - ROUND UP 
 047F  80                       	DB	128D 
 0480  00                       	DB	0 
                                	INS86	163,2		;JNB NOCARY 
                                	INS86	376,306		;INCB DH 
 0485                           NOCARY:	INS86	212,324		;MOVB DL,AH 
 0487  C3                       	RET 
                                ; 
                                ; PARSE THE BEGIN AND END ANGLES 
                                ;  SETTING APPROPRIATE BITS IN CLINEF IF NEG. 
                                ; 
 0488  4B                       CGTCNT:	DEC	BX 
 0489  E8 0000 E                	CALL	CHRGTR		;GET CURRENT CHAR 
 048C  75 01                    	JNZ	SHORT $+3 
 048E  C3                       	RET			;IF NOTHING, RETURN DFLT IN [DE] 
 048F  E8 0000 E                	CALL	SYNCHR 
 0492  2C                       	DB	OFFSET 44	;EAT THE COMMA 
 0493  3C 2C                    	CMP	AL,LOW 44	;USE DEFAULT IF NO ARGUMENT. 
 0495  75 01                    	JNZ	SHORT $+3 
 0497  C3                       	RET 
 0498  51                       	PUSH	CX		;SAVE FLAG BYTE IN [C] 
 0499  E8 0000 E                	CALL	FRMEVL		;EVALUATE THE THING 
 049C  5E                       	POP	SI		;XTHL 
 049D  87 F3                    	XCHG	SI,BX 
 049F  56                       	PUSH	SI		;POP FLAG BYTE, PUSH TXTPTR 
 04A0  53                       	PUSH	BX		;RESAVE FLAG BYTE 
 04A1  E8 0000 E                	CALL	FRCSNG		;MAKE IT A SINGLE PRECISION VALUE 
 04A4  59                       	POP	CX		;GET BACK FLAG BYTE 
 04A5  BB 0000 E                	MOV	BX,OFFSET FAC	;NOW SEE WHETHER POSITIVE OR NOT 
 04A8  8A 07                    	MOV	AL,BYTE PTR [BX]	;GET EXPONENT BYTE 
 04AA  0A C0                    	OR	AL,AL 
 04AC  74 19                    	JZ	SHORT CGTC2 
 04AE  9F                       	LAHF 
 04AF  4B                       	DEC	BX		;SET TO HIGH MANTISSA BYTE 
 04B0  9E                       	SAHF 
 04B1  8A 07                    	MOV	AL,BYTE PTR [BX] 
 04B3  0A C0                    	OR	AL,AL 
 04B5  78 03                    	JS	SHORT ??L006 
 04B7  EB 0E 90                 	JMP	CGTC2 
 04BA                           ??L006: 
 04BA  24 7F                    	AND	AL,LOW 127D	;MAKE IT POSITIVE 
 04BC  88 07                    	MOV	BYTE PTR [BX],AL 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-23
CIRCLE - Draw a circle                                      

 04BE  BB 0000 E                	MOV	BX,OFFSET CLINEF	;SET BIT IN [C] IN CLINEF 
 04C1  8A 07                    	MOV	AL,BYTE PTR [BX] 
 04C3  0A C1                    	OR	AL,CL 
 04C5  88 07                    	MOV	BYTE PTR [BX],AL 
 04C7                           CGTC2:	MOVRI	176O,42O,371O,203O	;LOAD REGS WITH 1/2*PI 
 04CD  E8 0000 E                	CALL	FMULT		;MULTIPLY BY 1/(2*PI) TO GET FRACTION 
 04D0  E8 04F7 R                	CALL	CMPONE		;SEE IF RESULT IS GREATER THAN ONE 
 04D3  75 03                    	JNZ	SHORT ??L007 
 04D5  E9 0000 E                	JMP	FCERR		;FC ERROR IF SO 
 04D8                           ??L007: 
                                EXTRN	PUSHF:NEAR 
 04D8  E8 0000 E                	CALL	PUSHF		;SAVE FAC ON STAC 
 04DB  8B 1E 0000 E             	MOV	BX,CNPNTS	;GET NO. OF POINTS PER OCTANT 
 04DF  03 DB                    	ADD	BX,BX		;TIMES 8 FOR TRUE CIRCUMFERENCE 
 04E1  03 DB                    	ADD	BX,BX 
 04E3  03 DB                    	ADD	BX,BX 
 04E5  E8 0000 E                	CALL	MKINTC		;STICK IT IN FAC 
 04E8  E8 0000 E                	CALL	FRCSNG		;AND MAKE IT SINGLE PRECISION 
                                	POPR			;GET BACK ANG/2*PI IN REGS 
 04ED  E8 0000 E                	CALL	FMULT		;DO THE MULTIPLY 
 04F0  E8 0000 E                	CALL	FRCINT		;CONVERT TO INTEGER IN [HL] 
 04F3  5A                       	POP	DX		;GET BACK TXTPTR 
 04F4  87 DA                    	XCHG	BX,DX 
 04F6  C3                       	RET 
                                 
 04F7                           CMPONE:	MOVRI	201O,0,0,0	;MAKE SURE FAC IS LESS THAN ONE 
                                EXTRN	FCOMP:NEAR 
 04FD  E8 0000 E                	CALL	FCOMP 
 0500  FE C8                    	DEC	AL 
 0502  C3                       	RET 
                                 
                                	SUBTTL GET and PUT - read and write graphics bit array 
                                 
                                 
                                ; 
                                ;       GET & PUT - READ & WRITE GRAPHICS BIT ARRAY 
                                ; 
                                ; SYNTAX: 
                                ;       GET @(X,Y),ARRAYVAR 
                                ;       PUT @(X,Y),ARRAYVAR[,FUNCTION] 
                                ; 
                                ;       FUNCTION = OR/AND/PRESET/PSET/XOR 
                                ; 
                                	EXTRN	PGINIT:NEAR,PIXSIZ:NEAR,NREAD:NEAR,NWRITE:NEAR,XDELT:NEAR 
                                	EXTRN	$AND:NEAR,$OR:NEAR,$PRESET:NEAR,$PSET:NEAR,$XOR:NEAR 
                                	EXTRN	YDELT:NEAR,XCHGX:NEAR,XCHGY:NEAR 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	PUTFLG:WORD,MINDEL:WORD,MAXDEL:WORD 
 0000                           DSEG	ENDS 
                                 
                                 
                                PUBLIC	GPUTG 
 0503  A2 0000 E                GPUTG:	MOV	BYTE PTR PUTFLG,AL	;IFE PC8A&RSTLES-1STORE WHETHER PUTTING OR NOT 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-24
GET and PUT - read and write graphics bit array             

 0506  50                       	PUSH	AX		;SAVE THIS FLAG A SEC 
 0507  53                       	PUSH	BX		;Save text pointer 
 0508  E8 0000 E                	CALL	PIXSIZ		;Test for graphics mode 
 050B  0A C0                    	OR	AL,AL 
 050D  75 03                    	JNZ	SHORT ??L008 
 050F  E9 0000 E                	JMP	FCERR		;Not a graphics mode 
 0512                           ??L008: 
 0512  5B                       	POP	BX 
 0513  E8 0000 E                	CALL	SCAN1		;GET FIRST COORD 
 0516  E8 0815 R                	CALL	CHKRNG 
 0519  58                       	POP	AX		;REGET PUT FLAG 
 051A  0A C0                    	OR	AL,AL 
 051C  74 03                    	JZ	SHORT ??L009 
 051E  E9 05AC R                	JMP	PUT1 
 0521                           ??L009: 
                                 
 0521  E8 0000 E                	CALL	SYNCHR 
 0524  00 E                     	DB	OFFSET MINUTK	;EAT "-" 
 0525  51                       	PUSH	CX		;SAVE X1 
 0526  52                       	PUSH	DX		;SAVE Y1 
 0527  E8 0000 E                	CALL	SCAND		;GET SECOND COORD FOR 'GET' ONLY 
 052A  E8 0815 R                	CALL	CHKRNG 
 052D  5A                       	POP	DX		;GET Y1 BACK 
 052E  59                       	POP	CX		;AND X1 
 052F  53                       	PUSH	BX		;SAVE TXTPTR 
 0530  E8 0000 E                	CALL	YDELT		;CALC DELTA Y 
 0533  73 03                    	JNB	SHORT ??L010 
 0535  E8 0000 E                	CALL	XCHGY		;MAKE DE=MIN(GXPOS,DE) 
 0538                           ??L010: 
 0538  43                       	INC	BX		;MAKE DELTA A COUNT 
 0539  89 1E 0000 E             	MOV	MINDEL,BX	;SAVE DELTA Y IN MIDEL 
 053D  E8 0000 E                	CALL	XDELT 
 0540  73 03                    	JNB	SHORT ??L011 
 0542  E8 0000 E                	CALL	XCHGX		;BC = MIN(GXPOS,DE) 
 0545                           ??L011: 
 0545  43                       	INC	BX		;MAKE DELTA A COUNT 
 0546  89 1E 0000 E             	MOV	MAXDEL,BX	;SAVE DX IN MAXDEL 
 054A  E8 0000 E                	CALL	MAPXYC 
 054D  5B                       	POP	BX		;GET BACK TXTPTR 
 054E  E8 0642 R                	CALL	GTARRY		;SCAN ARRAY NAME 
 0551  53                       	PUSH	BX		;SAVE TXTPTR UNTIL DONE 
 0552  52                       	PUSH	DX		;SAVE BEG. OF ARRAY DATA PTR 
 0553  51                       	PUSH	CX		;SAVE END OF ARRAY DATA PTR 
 0554  52                       	PUSH	DX		;SAVE BEG. PTR AGAIN FOR COMPAR 
 0555  E8 0000 E                	CALL	PIXSIZ		;GET # BITS PER PIXEL INTO [A] 
 0558  8B 16 0000 E             	MOV	DX,MAXDEL 
 055C  BB 0000                  	MOV	BX,0 
 055F  03 DA                    MULBLP:	ADD	BX,DX		;CALC DX * BITS/PIX 
 0561  FE C8                    	DEC	AL 
 0563  75 FA                    	JNZ	SHORT MULBLP	;KEEP LOOPING 
 0565  8B CB                    	MOV	CX,BX		;SAVE THIS IS [BC] 
 0567  BA 0007                  	MOV	DX,OFFSET (0+7)	;Round to byte boundry. 
 056A  03 DA                    	ADD	BX,DX 
 056C  87 DA                    	XCHG	BX,DX		;RESULT TO [DE] 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-25
GET and PUT - read and write graphics bit array             

                                	HLFDE			;NOW CALC NO. OF BYTES PER SCAN LINE 
                                	HLFDE 
                                	HLFDE 
 0574  8B 1E 0000 E             	MOV	BX,MINDEL	;GET DELTA Y 
 0578  51                       	PUSH	CX		;SAVE DX*BITS/PIX 
 0579  8B CB                    	MOV	CX,BX		;INTO [BC] FOR UMULT 
 057B  E8 0000 E                	CALL	UMULT		;[DE]=DX*DY*BITS/PIX 
 057E  59                       	POP	CX		;GET BACK DX*BITS/PIX 
 057F  BB 0004                  	MOV	BX,4		;ADD 4 BYTES FOR DX,DY STORAGE 
 0582  03 DA                    	ADD	BX,DX		;[HL] HAS NO. OF BYTES TO BE USED 
 0584  5A                       	POP	DX		;BEG OF ARRAY DATA TO [HL] 
 0585  03 DA                    	ADD	BX,DX		;ADD NO. OF BYTES TO BE USED 
 0587  87 DA                    	XCHG	BX,DX		;[DE] = CALCULATED END OF DATA 
 0589  5B                       	POP	BX		;END OF ARRAY DATA TO [HL] 
 058A  3B DA                    	CMP	BX,DX 
 058C  73 03                    	JAE	SHORT ??L012 
 058E  E9 0000 E                	JMP	FCERR		;ERROR IF TOO BIG 
 0591                           ??L012: 
                                				;BEG OF DATA PTR IS ON STK HERE 
 0591  5B                       	POP	BX		;GET POINTER TO ARRAY DATA 
 0592  3B DA                    	CMP	BX,DX 
 0594  72 03                    	JNAE	SHORT ??L013 
 0596  E9 0000 E                	JMP	FCERR		;ARRAY START+LENGTH .GT. 64K 
 0599                           ??L013: 
 0599  88 0F                    	MOV	BYTE PTR [BX],CL	;SAVE DX*BITS/PIX IN 1ST 2 BYTES OF ARY 
 059B  43                       	INC	BX 
 059C  88 2F                    	MOV	BYTE PTR [BX],CH	;PASS NO. OF BITS DESIRED IN [BC] 
 059E  43                       	INC	BX 
 059F  8B 16 0000 E             	MOV	DX,MINDEL	;GET LINE (Y) COUNT 
 05A3  89 17                    	MOV	[BX],DX 
 05A5  43                       	INC	BX 
 05A6  43                       	INC	BX		;SAVE DY IN 2ND 2 BYTES 
 05A7  0A C0                    	OR	AL,AL		;CLEAR CARRY FOR GET INIT. 
 05A9  EB 77 90                 	JMP	GOPGIN		;GIVE LOW LEVEL ADDR OF ARRAY & GO 
                                 
 05AC  53                       PUT1:	PUSH	BX		;SAVE TXTPTR 
 05AD  E8 0000 E                	CALL	MAPXYC		;MAP THE POINT 
 05B0  5B                       	POP	BX 
 05B1  E8 0642 R                	CALL	GTARRY		;SCAN ARRAY NAME & GET PTR TO IT 
 05B4  52                       	PUSH	DX		;SAVE PTR TO DELTAS IN ARRAY 
 05B5  4B                       	DEC	BX		;NOW SCAN POSSIBLE PUT OPTION 
 05B6  E8 0000 E                	CALL	CHRGTR 
 05B9  B5 05                    	MOV	CH,LOW 5	;DEFAULT OPTION IS XOR 
 05BB  74 1C                    	JZ	SHORT PUT2	;IF NO CHAR, USE DEFAULT 
 05BD  E8 0000 E                	CALL	SYNCHR 
 05C0  2C                       	DB	OFFSET 44	;MUST BE A COMMA 
 05C1  87 DA                    	XCHG	BX,DX		;PUT TXTPTR IN [DE] 
 05C3  BB 0674 R                	MOV	BX,OFFSET GFUNTB+4	;TABLE OF POSSIBLE OPTIONS 
 05C6                           PFUNLP: 
                                	INS86	56		;CS OVERRIDE 
 05C7  3A 07                    	CMP	AL,BYTE PTR [BX]	;IS THIS AN OPTION? 
 05C9  74 09                    	JZ	SHORT PUT20	;YES, HAND IT TO PGINIT. 
 05CB  4B                       	DEC	BX		;POINT TO NEXT 
 05CC  FE CD                    	DEC	CH 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-26
GET and PUT - read and write graphics bit array             

 05CE  75 F6                    	JNZ	SHORT PFUNLP 
 05D0  87 DA                    	XCHG	BX,DX		;GET TXTPTR BACK TO [HL] 
 05D2  5A                       	POP	DX		;CLEAN UP STACK 
 05D3  C3                       	RET			;LET NEWSTT GIVE SYNTAX ERROR 
 05D4  87 DA                    PUT20:	XCHG	BX,DX		;GET TXTPTR BACK TO [HL] 
 05D6  E8 0000 E                	CALL	CHRGTR		;EAT THE TOKEN 
 05D9                           PUT2: 
 05D9  FE CD                    	DEC	CH		;1..5 -TO 0..4 
 05DB  8A C5                    	MOV	AL,CH		;INTO [A] FOR PGINIT 
 05DD  5E                       	POP	SI		;XTHL 
 05DE  87 F3                    	XCHG	SI,BX 
 05E0  56                       	PUSH	SI		;POP ARRAY PTR, PUSH TXTPTR 
 05E1  50                       	PUSH	AX		;SAVE PUT ACTION MODE 
 05E2  8B 17                    	MOV	DX,[BX]		;[DE]=NO. OF BITS IN X 
 05E4  43                       	INC	BX 
 05E5  43                       	INC	BX 
 05E6  52                       	PUSH	DX		;SAVE BIT COUNT 
 05E7  53                       	PUSH	BX		;SAVE ARRAY POINTER 
 05E8  87 DA                    	XCHG	BX,DX		;INTO [HL] FOR IDIV 
 05EA  E8 0000 E                	CALL	PIXSIZ		;GET BITS/PIXEL INTO [DE] 
 05ED  8A D0                    	MOV	DL,AL		;INTO [E] FOR COUNTING 
                                IF	PWR2PX 
 05EF  FE CA                    DIVBLP:	DEC	DL		;DIVIDE BY [E] (POWER-OF-2 CASE) 
 05F1  75 03                    	JNZ	SHORT ??L014 
 05F3  EB 05 90                 	JMP	DIVBTX 
 05F6                           ??L014: 
                                	HLFHL			;DIVIDE BY TWO [E]-1 TIMES 
 05F8  EB F5                    	JMP	SHORT DIVBLP 
 05FA                           DIVBTX: 
                                ENDIF 
                                ENDIF 
 05FA  4B                       	DEC	BX		;DECREMENT DX SINCE IT'S A COUNTER 
 05FB  8B 16 0000 E             	MOV	DX,GXPOS	;NOW CALC TRUE X 
 05FF  03 DA                    	ADD	BX,DX 
 0601  72 10                    	JB	SHORT PRNGER	;ERROR IF CARRY 
 0603  8B CB                    	MOV	CX,BX		;TO [BC] FOR SCALXY 
 0605  5B                       	POP	BX		;GET BACK ARRAY POINTER 
 0606  8B 17                    	MOV	DX,[BX]		;[DE] = DELTA Y ([HL] POINTS TO DATA) 
 0608  43                       	INC	BX 
 0609  43                       	INC	BX 
 060A  52                       	PUSH	DX		;SAVE DELTA Y ON STACK 
 060B  53                       	PUSH	BX		;SAVE PTR ON STACK AGAIN 
 060C  8B 1E 0000 E             	MOV	BX,GYPOS 
 0610  4A                       	DEC	DX		;DECREMENT DY SINCE IT'S A COUNTER 
 0611  03 DA                    	ADD	BX,DX 
 0613  73 03                    PRNGER:	JAE	SHORT ??L015 
 0615  E9 0000 E                	JMP	FCERR		;ERROR IF CARRY 
 0618                           ??L015: 
 0618  87 DA                    	XCHG	BX,DX		;[DE]=Y + DELTA Y 
 061A  5B                       	POP	BX		;GET BACK ARRAY POINTER 
 061B  E8 0815 R                	CALL	CHKRNG		;MAKE SURE [BC],[HL] ARE ON THE SCREEN 
 061E  5A                       	POP	DX		;POP DY 
 061F  59                       	POP	CX		;POP DX*BITS/PIX 
 0620  58                       	POP	AX		;GET BACK ACTION MODE 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-27
GET and PUT - read and write graphics bit array             

 0621  F9                       	STC			;SET CARRY TO FLAG PUT INIT 
                                 
 0622  52                       GOPGIN:	PUSH	DX		;RESAVE DY 
 0623  E8 0000 E                	CALL	PGINIT		;[BC]=BIT COUNT,[HL]=ARRAY ADDR 
 0626  5A                       	POP	DX		;GET Y COUNT 
                                 
 0627  52                       PGLOOP:	PUSH	DX		;SAVE LINE COUNT 
 0628  A0 0000 E                	MOV	AL,BYTE PTR PUTFLG	;SEE IF PUTTING OR GETTING 
 062B  0A C0                    	OR	AL,AL 
 062D  75 05                    	JNZ	SHORT PGLOO2 
 062F  E8 0000 E                	CALL	NREAD 
 0632  EB 03                    	JMP	SHORT PGLOO3 
 0634  E8 0000 E                PGLOO2:	CALL	NWRITE 
 0637                           PGLOO3: 
 0637  E8 0000 E                	CALL	DOWNC		;NOW MOVE DOWN A LINE 
 063A  5A                       	POP	DX 
 063B  4A                       	DEC	DX 
 063C  0B D2                    	OR	DX,DX 
 063E  75 E7                    	JNZ	SHORT PGLOOP	;CONTINUE IF NOT ZERO 
 0640  5B                       	POP	BX		;GET BACK TXTPTR 
 0641  C3                       	RET			;AND RETURN 
                                 
 0642  E8 0000 E                GTARRY:	CALL	SYNCHR 
 0645  2C                       	DB	OFFSET 44	;EAT COMMA 
 0646  B0 01                    	MOV	AL,LOW 1	;SEARCH ARRAYS ONLY 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	SUBFLG:WORD 
 0000                           DSEG	ENDS 
 0648  A2 0000 E                	MOV	BYTE PTR SUBFLG,AL 
                                EXTRN	PTRGET:NEAR 
 064B  E8 0000 E                	CALL	PTRGET		;GET PTR TO ARRAY 
 064E  74 03                    	JZ	SHORT ??L016 
 0650  E9 0000 E                	JMP	FCERR		;NOT THERE - ERROR 
 0653                           ??L016: 
 0653  A2 0000 E                	MOV	BYTE PTR SUBFLG,AL	;CLEAR THIS 
 0656  53                       	PUSH	BX		;SAVE TXTPTR 
 0657  8B D9                    	MOV	BX,CX		;HL = PTR TO ARRAY 
 0659  87 DA                    	XCHG	BX,DX		;HL = LENGTH 
 065B  03 DA                    	ADD	BX,DX		;HL = LAST BYTE OF ARRAY 
 065D  53                       	PUSH	BX		;SAVE 
 065E  8B F1                    	MOV	SI,CX 
 0660  8A 04                    	MOV	AL,[SI]		;GET NO. OF DIMS 
 0662  02 C0                    	ADD	AL,AL		;DOUBLE SINCE 2 BYTE ENTRIES 
 0664  8A D8                    	MOV	BL,AL 
 0666  B7 00                    	MOV	BH,LOW 0 
 0668  41                       	INC	CX		;SKIP NO. OF DIMS 
 0669  03 D9                    	ADD	BX,CX 
 066B  87 DA                    	XCHG	BX,DX		;DE = PTR TO FIRST BYTE OF DATA 
 066D  59                       	POP	CX		;BC = PTR TO LAST BYTE OF DATA 
 066E  5B                       	POP	BX		;GET TXTPTR 
 066F  C3                       	RET 
                                 
 0670                           GFUNTB: 
 0670  00 E                     	DB	OFFSET $OR	;LIST OF VALID PUT OPTIONS 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-28
GET and PUT - read and write graphics bit array             

 0671  00 E                     	DB	OFFSET $AND 
 0672  00 E                     	DB	OFFSET $PRESET 
 0673  00 E                     	DB	OFFSET $PSET 
 0674  00 E                     	DB	OFFSET $XOR 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-29
GET and PUT - read and write graphics bit array             

                                	PAGE 
                                	SUBTTL GRAPHICS MACRO LANGUAGE SUPPORT 
                                ; 
                                ; GRAPHICS MACRO LANGUAGE SUPPORT 
                                ; 
                                	EXTRN	VALSCN:NEAR,DECFET:NEAR,MACLNG:NEAR,MCLXEQ:NEAR,FETCHZ:NEAR 
                                	EXTRN	NEGD:NEAR 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	DRWFLG:WORD,DRWSCL:WORD,DRWANG:WORD 
 0000                           DSEG	ENDS 
                                PUBLIC	DRAW 
 0675  53                       DRAW:	PUSH	BX		;Save text pointer 
 0676  E8 0000 E                	CALL	PIXSIZ		;Get bits/pixel 
 0679  0A C0                    	OR	AL,AL		;Test for 0 (text only mode) 
 067B  75 03                    	JNZ	SHORT ??L017 
 067D  E9 0000 E                	JMP	FCERR		;DRAW not allowed in text mode 
 0680                           ??L017: 
 0680  5B                       	POP	BX		;Restore text pointer 
 0681  BA 068C R                	MOV	DX,OFFSET DRWTAB	;DISPATCH TABLE FOR GML 
 0684  32 C0                    	XOR	AL,AL		;CLEAR OUT DRAW FLAGS 
 0686  A2 0000 E                	MOV	BYTE PTR DRWFLG,AL 
 0689  E9 0000 E                	JMP	MACLNG		;GO DO IT. 
                                 
 068C  D5                       DRWTAB:	DB	"U"+128D	;UP 
                                	ADR	DRUP		; ASM86 doesn't like DUP, 9-Jul-82/NGT 
 068F  C4                       	DB	"D"+128D	;DOWN 
                                	ADR	DRDOWN 
 0692  CC                       	DB	"L"+128D	;LEFT 
                                	ADR	DRLEFT 
 0695  D2                       	DB	"R"+128D	;RIGHT 
                                	ADR	DRIGHT 
 0698  4D                       	DB	"M"		;MOVE 
                                	ADR	DMOVE 
 069B  C5                       	DB	"E"+128D	;-,- 
                                	ADR	DRWEEE 
 069E  C6                       	DB	"F"+128D	;+,- 
                                	ADR	DRWFFF 
 06A1  C7                       	DB	"G"+128D	;+,+ 
                                	ADR	DRWGGG 
 06A4  C8                       	DB	"H"+128D	;-,+ 
                                	ADR	DRWHHH 
 06A7  C1                       	DB	"A"+128D	;ANGLE COMMAND 
                                	ADR	DANGLE 
 06AA  42                       	DB	"B"		;MOVE WITHOUT PLOTTING 
                                	ADR	DNOPLT 
 06AD  4E                       	DB	"N"		;DON'T CHANGE CURRENT COORDS 
                                	ADR	DNOMOV 
 06B0  58                       	DB	"X"		;EXECUTE STRING 
                                	ADR	MCLXEQ 
 06B3  C3                       	DB	"C"+128D	;COLOR 
                                	ADR	DCOLR 
 06B6  D3                       	DB	"S"+128D	;SCALE 
                                	ADR	DSCALE 
 06B9  00                       	DB	00		;END OF TABLE 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-30
GRAPHICS MACRO LANGUAGE SUPPORT                             

                                 
 06BA                           DRUP:	NEGDE			;MOVE +0,-Y 
 06BC                           DRDOWN:				;MOVE +0,+Y 
 06BC  B9 0000                  	MOV	CX,0		;DX=0 
 06BF  EB 47                    	JMP	SHORT DOMOVR	;TREAT AS RELATIVE MOVE 
                                 
 06C1                           DRLEFT:	NEGDE			;MOVE -X,+0 
 06C3                           DRIGHT:				;MOVE +X,+0 
 06C3  8B CA                    	MOV	CX,DX		;[BC]=VALUE 
 06C5  BA 0000                  	MOV	DX,0		;DY=0 
 06C8  EB 3E                    	JMP	SHORT DOMOVR	;TREAT AS RELATIVE MOVE 
                                 
 06CA                           DRWHHH:	NEGDE			;MOVE -X,-Y 
 06CC  8B CA                    DRWFFF:	MOV	CX,DX		;MOVE +X,+Y 
 06CE  EB 38                    	JMP	SHORT DOMOVR 
                                 
 06D0  8B CA                    DRWEEE:	MOV	CX,DX		;MOVE +X,-Y 
 06D2                           DRWHHC:	NEGDE 
 06D4  EB 32                    	JMP	SHORT DOMOVR 
                                 
 06D6                           DRWGGG:	NEGDE			;MOVE -X,+Y 
 06D8  8B CA                    	MOV	CX,DX 
 06DA  EB F6                    	JMP	SHORT DRWHHC	;MAKE DY POSITIVE & GO 
                                 
 06DC  E8 0000 E                DMOVE:	CALL	FETCHZ		;GET NEXT CHAR AFTER COMMA 
 06DF  B5 00                    	MOV	CH,LOW 0	;ASSUME RELATIVE 
 06E1  3C 2B                    	CMP	AL,LOW "+"	;IF "+" OR "-" THEN RELATIVE 
 06E3  74 06                    	JZ	SHORT MOVREL 
 06E5  3C 2D                    	CMP	AL,LOW "-" 
 06E7  74 02                    	JZ	SHORT MOVREL 
 06E9  FE C5                    	INC	CH		;NON-Z TO FLAG ABSOLUTE 
 06EB  8A C5                    MOVREL:	MOV	AL,CH 
 06ED  50                       	PUSH	AX		;SAVE ABS/REL FLAG ON STACK 
 06EE  E8 0000 E                	CALL	DECFET		;BACK UP SO VALSCN WILL SEE "-" 
 06F1  E8 0000 E                	CALL	VALSCN		;GET X VALUE 
 06F4  52                       	PUSH	DX		;SAVE IT 
 06F5  E8 0000 E                	CALL	FETCHZ		;NOW CHECK FOR COMMA 
 06F8  3C 2C                    	CMP	AL,LOW 44	;COMMA? 
 06FA  74 03                    	JZ	SHORT ??L018 
 06FC  E9 0000 E                	JMP	FCERR 
 06FF                           ??L018: 
 06FF  E8 0000 E                	CALL	VALSCN		;GET Y VALUE IN D 
 0702  59                       	POP	CX		;GET BACK X VALUE 
                                 
 0703  58                       	POP	AX		;GET ABS/REL FLAG 
 0704  0A C0                    	OR	AL,AL 
 0706  75 6C                    	JNZ	SHORT DRWABS	;NZ - ABSOLUTE 
                                 
 0708  E8 07C9 R                DOMOVR:	CALL	DSCLDE		;ADJUST Y OFFSET BY SCALE 
 070B  52                       	PUSH	DX		;SAVE Y OFFSET 
 070C  8B D1                    	MOV	DX,CX		;GET X INTO [DE] 
 070E  E8 07C9 R                	CALL	DSCLDE		;GO SCALE IT. 
 0711  87 DA                    	XCHG	BX,DX		;GET ADJUSTED X INTO [HL] 
 0713  5A                       	POP	DX		;GET ADJUSTED Y INTO [DE] 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-31
GRAPHICS MACRO LANGUAGE SUPPORT                             

 0714  32 C0                    	XOR	AL,AL 
 0716  A2 0000 E                	MOV	BYTE PTR CSCLXY,AL 
 0719  A0 0000 E                	MOV	AL,BYTE PTR DRWANG	;GET ANGLE BYTE 
 071C  D0 D8                    	RCR	AL,1		;LOW BIT TO CARRY 
 071E  73 49                    	JAE	SHORT ANGEVN	;ANGLE IS EVEN - DON'T SWAP X AND Y 
 0720  50                       	PUSH	AX		;SAVE THIS BYTE 
 0721  52                       	PUSH	DX		;SAVE DY 
 0722  53                       	PUSH	BX		;SAVE DX 
 0723  E8 0000 E                	CALL	GTASPC		;GO GET SCREEN ASPECT RATIO 
                                ;NOTE: TOSHIBA GTASPC routine does this logic(i.e. it sets CSCLXY if aspect 
                                ;                   ratio is greater than one). 
 0726  8A C7                    	MOV	AL,BH 
 0728  0A C0                    	OR	AL,AL		;IS ASPECT RATIO GREATER THAN ONE? 
 072A  74 07                    	JZ	SHORT ASPLS0	;BRIF GOOD ASPECT RATIO 
 072C  B0 01                    	MOV	AL,LOW 1 
 072E  A2 0000 E                	MOV	BYTE PTR CSCLXY,AL 
 0731  87 DA                    	XCHG	BX,DX 
 0733                           ASPLS0: 
 0733  8A CB                    	MOV	CL,BL		;GET ASPECT RATIO INTO [C] FOR GOSCAL 
 0735  5B                       	POP	BX		;GET BACK DX 
 0736  A0 0000 E                	MOV	AL,BYTE PTR CSCLXY 
 0739  0A C0                    	OR	AL,AL 
 073B  74 04                    	JZ	SHORT ASPLS1	;branch if aspect ratio less 1.0 
 073D  5E                       	POP	SI		;XTHL 
 073E  87 F3                    	XCHG	SI,BX 
 0740  56                       	PUSH	SI		;[HL]=DY, save DX 
 0741                           ASPLS1: 
 0741  87 DA                    	XCHG	BX,DX		;1/ASPECT TO [HL] 
 0743  53                       	PUSH	BX		;SAVE 1/ASPECT 
 0744  E8 07F4 R                	CALL	GOSCAL		;SCALE DELTA X BY ASPECT RATIO 
 0747  59                       	POP	CX		;GET BACK 1/ASPECT RATIO 
 0748  5B                       	POP	BX		;GET DY 
 0749  52                       	PUSH	DX		;SAVE SCALED DX 
 074A  87 DA                    	XCHG	BX,DX		;DY TO [DE] FOR GOSCAL 
 074C  BB 0000                  	MOV	BX,0 
 074F  03 DA                    DMULP:	ADD	BX,DX		;MULTIPLY [DE] BY HI BYTE OF 1/ASPECT 
 0751  FE CD                    	DEC	CH 
 0753  75 FA                    	JNZ	SHORT DMULP 
 0755  53                       	PUSH	BX		;SAVE PARTIAL RESULT 
 0756  E8 07F4 R                	CALL	GOSCAL		;MULTIPLY [DE] BY LOW BYTE 
 0759  5B                       	POP	BX		;GET BACK PARTIAL RESULT 
 075A  03 DA                    	ADD	BX,DX		;[HL]=Y * 1/ASPECT 
 075C  5A                       	POP	DX		;GET BACK SCALED Y 
 075D  A0 0000 E                	MOV	AL,BYTE PTR CSCLXY 
 0760  0A C0                    	OR	AL,AL 
 0762  74 02                    	JZ	SHORT ASLSS1	;branch if aspect ratio less than 1 
 0764  87 DA                    	XCHG	BX,DX 
 0766                           ASLSS1: 
                                	NEGDE			;ALWAYS NEGATE NEW DY 
 0768  58                       	POP	AX		;GET BACK SHIFTED ANGLE 
 0769  D0 D8                    ANGEVN:	RCR	AL,1		;TEST SECOND BIT 
 076B  73 04                    	JAE	SHORT ANGPOS	;DON'T NEGATE COORDS IF NOT SET 
                                	NEGHL 
                                	NEGDE			;NEGATE BOTH DELTAS 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-32
GRAPHICS MACRO LANGUAGE SUPPORT                             

 0771  E8 0453 R                ANGPOS:	CALL	GTABSC		;GO CALC TRUE COORDINATES 
                                 
 0774  A0 0000 E                DRWABS:	MOV	AL,BYTE PTR DRWFLG	;SEE WHETHER WE PLOT OR NOT 
 0777  02 C0                    	ADD	AL,AL		;CHECK HI BIT 
 0779  72 0C                    	JB	SHORT DSTPOS	;JUST SET POSITION. 
 077B  50                       	PUSH	AX		;SAVE THIS FLAG 
 077C  51                       	PUSH	CX		;SAVE X,Y COORDS 
 077D  52                       	PUSH	DX		;BEFORE SCALE SO REFLECT DISTANCE OFF 
 077E  E8 0000 E                	CALL	SCALXY		;SCALE IN CASE COORDS OFF SCREEN 
 0781  E8 0440 R                	CALL	CLINE2 
 0784  5A                       	POP	DX 
 0785  59                       	POP	CX		;GET THEM BACK 
 0786  58                       	POP	AX		;GET BACK FLAG 
 0787  02 C0                    DSTPOS:	ADD	AL,AL		;SEE WHETHER TO STORE COORDS 
 0789  72 0A                    	JB	SHORT DNSTOR	;DON'T UPDATE IF B6=1 
 078B  89 16 0000 E             	MOV	GRPACY,DX	;UPDATE GRAPHICS AC 
 078F  8B D9                    	MOV	BX,CX 
 0791  89 1E 0000 E             	MOV	GRPACX,BX 
 0795  32 C0                    DNSTOR:	XOR	AL,AL		;CLEAR SPECIAL FUNCTION FLAGS 
 0797  A2 0000 E                	MOV	BYTE PTR DRWFLG,AL 
 079A  C3                       	RET 
                                 
 079B  B0 40                    DNOMOV:	MOV	AL,LOW 64D	;SET BIT SIX IN FLAG BYTE 
 079D  EB 02                    	JMP	SHORT DSTFLG 
                                 
 079F  B0 80                    DNOPLT:	MOV	AL,LOW 128D	;SET BIT 7 
 07A1  BB 0000 E                DSTFLG:	MOV	BX,OFFSET DRWFLG 
 07A4  0A 07                    	OR	AL,BYTE PTR [BX] 
 07A6  88 07                    	MOV	BYTE PTR [BX],AL	;STORE UPDATED BYTE 
 07A8  C3                       	RET 
                                 
 07A9  73 0A                    DANGLE:	JAE	SHORT NCFCER	;ERROR IF NO ARG 
 07AB  8A C2                    	MOV	AL,DL		;MAKE SURE LESS THAN 4 
 07AD  3C 04                    	CMP	AL,LOW 4 
 07AF  73 04                    	JAE	SHORT NCFCER	;ERROR IF NOT 
 07B1  A2 0000 E                	MOV	BYTE PTR DRWANG,AL 
 07B4  C3                       	RET 
                                 
 07B5                           NCFCER: 
 07B5  72 03                    DSCALE:	JNAE	SHORT ??L019 
 07B7  E9 0000 E                	JMP	FCERR		;FC ERROR IF NO ARG 
 07BA                           ??L019: 
 07BA  8A C6                    	MOV	AL,DH		;MAKE SURE LESS THAN 256 
 07BC  0A C0                    	OR	AL,AL 
 07BE  74 03                    	JZ	SHORT ??L020 
 07C0  E9 0000 E                	JMP	FCERR 
 07C3                           ??L020: 
 07C3  8A C2                    	MOV	AL,DL 
 07C5  A2 0000 E                	MOV	BYTE PTR DRWSCL,AL	;STORE SCALE FACTOR 
 07C8  C3                       	RET 
                                 
 07C9  A0 0000 E                DSCLDE:	MOV	AL,BYTE PTR DRWSCL	;GET SCALE FACTOR 
 07CC  0A C0                    	OR	AL,AL		;ZERO MEANS NO SCALING 
 07CE  75 01                    	JNZ	SHORT $+3 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Page     1-33
GRAPHICS MACRO LANGUAGE SUPPORT                             

 07D0  C3                       	RET 
 07D1  BB 0000                  	MOV	BX,0 
 07D4  03 DA                    DSCLP:	ADD	BX,DX		;ADD IN [DE] SCALE TIMES 
 07D6  FE C8                    	DEC	AL 
 07D8  75 FA                    	JNZ	SHORT DSCLP 
 07DA  87 DA                    	XCHG	BX,DX		;PUT IT BACK IN [DE] 
 07DC  8A C6                    	MOV	AL,DH		;SEE IF VALUE IS NEGATIVE 
 07DE  02 C0                    	ADD	AL,AL 
 07E0  9C                       	PUSHF			;SAVE RESULTS OF TEST 
 07E1  73 01                    	JAE	SHORT DSCPOS 
 07E3  4A                       	DEC	DX		;MAKE IT TRUNCATE DOWN 
 07E4                           DSCPOS:	HLFDE			;DIVIDE BY FOUR 
                                	HLFDE 
 07E8  9D                       	POPF			;SEE IF WAS NEGATIVE 
 07E9  72 01                    	JNAE	SHORT $+3 
 07EB  C3                       	RET			;ALL DONE IF WAS POSITIVE 
 07EC  8A C6                    	MOV	AL,DH		;OR IN HIGH 2 BITS TO MAKE NEGATIVE 
 07EE  0C C0                    	OR	AL,LOW 192D 
 07F0  8A F0                    	MOV	DH,AL 
 07F2  42                       	INC	DX		;ADJUST SO TRUNCATING TO LOWER VALUE 
 07F3  C3                       	RET 
                                 
 07F4  8A C6                    GOSCAL:	MOV	AL,DH		;SEE IF NEGATIVE 
 07F6  02 C0                    	ADD	AL,AL 
 07F8  73 06                    	JAE	SHORT GOSC2	;NO, MULTIPLY AS-IS 
 07FA  BB 0000 E                	MOV	BX,OFFSET NEGD	;NEGATE BEFORE RETURNING 
 07FD  53                       	PUSH	BX 
                                	NEGDE			;MAKE POSITIVE FOR MULTIPLY 
 0800  8A C1                    GOSC2:	MOV	AL,CL		;GET SCALE FACTOR 
 0802  E9 046C R                	JMP	SCALE2		;DO THE SCALE 
                                 
 0805  73 AE                    DCOLR:	JAE	SHORT NCFCER	;FC ERROR IF NO ARG 
 0807  8A C2                    	MOV	AL,DL		;GO SET ATTRIBUTE 
 0809  E8 0000 E                	CALL	SETATR 
 080C  73 03                    	JAE	SHORT ??L021 
 080E  E9 0000 E                	JMP	FCERR		;ERROR IF ILLEGAL ATTRIBUTE 
 0811                           ??L021: 
 0811  A2 0000 E                	MOV	BYTE PTR ATRBYT,AL	;Save as default 
 0814  C3                       	RET 
                                 
 0815  53                       CHKRNG:	PUSH	BX		;SAVE TXTPTR 
 0816  E8 0000 E                	CALL	SCALXY 
 0819  72 03                    	JNAE	SHORT ??L022 
 081B  E9 0000 E                	JMP	FCERR		;OUT OF BOUNDS - ERROR 
 081E                           ??L022: 
 081E  5B                       CHKPHR:	POP	BX		;REGET TXTPTR 
 081F  C3                       	RET 
                                 
                                 
                                 
 0820                           CSEG	ENDS 
                                	END 

Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Symbols-1
                                                             

Macros:

		N a m e			Lines

ACRLF  . . . . . . . . . . . . .  	   2
ADR  . . . . . . . . . . . . . .  	   1
CALLOS . . . . . . . . . . . . .  	   1
CHRGET . . . . . . . . . . . . .  	   1
COMPAR . . . . . . . . . . . . .  	   2
DBGBRK . . . . . . . . . . . . .  	   1
DC . . . . . . . . . . . . . . .  	   6
DJNZ . . . . . . . . . . . . . .  	   2
FSIGN  . . . . . . . . . . . . .  	   1
GETYPE . . . . . . . . . . . . .  	   1
HLFDE  . . . . . . . . . . . . .  	   1
HLFHL  . . . . . . . . . . . . .  	   1
INS86  . . . . . . . . . . . . .  	  13
INST . . . . . . . . . . . . . .  	   1
LDDR . . . . . . . . . . . . . .  	   8
LDIR . . . . . . . . . . . . . .  	   8
MOVRI  . . . . . . . . . . . . .  	   6
NEGDE  . . . . . . . . . . . . .  	   1
NEGHL  . . . . . . . . . . . . .  	   1
OUTCHR . . . . . . . . . . . . .  	   1
POPR . . . . . . . . . . . . . .  	   2
PUSHM  . . . . . . . . . . . . .  	   5
PUSHR  . . . . . . . . . . . . .  	   2
SYNCHK . . . . . . . . . . . . .  	   2

Segments and Groups:

                N a m e         	Size	Align	Combine Class

CSEG . . . . . . . . . . . . . .  	0820	PARA	PUBLIC	'CODESG'
DSEG . . . . . . . . . . . . . .  	0000	PARA	PUBLIC	'DATASG'

Symbols:            

                N a m e         	Type	Value	Attr         

ALPCPM . . . . . . . . . . . . .  	Number	0000	
ALTAIR . . . . . . . . . . . . .  	Number	0000	
ANGEVN . . . . . . . . . . . . .  	L NEAR	0769	CSEG
ANGPOS . . . . . . . . . . . . .  	L NEAR	0771	CSEG
ANSI . . . . . . . . . . . . . .  	Number	0001	
ASLSS1 . . . . . . . . . . . . .  	L NEAR	0766	CSEG
ASPECT . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
ASPLS0 . . . . . . . . . . . . .  	L NEAR	0733	CSEG
ASPLS1 . . . . . . . . . . . . .  	L NEAR	0741	CSEG
ATRBYT . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
ATRSCN . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

BASDEB . . . . . . . . . . . . .  	Number	0000	
BEEPSW . . . . . . . . . . . . .  	Number	0001	
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Symbols-2
                                                             

BINCSW . . . . . . . . . . . . .  	Number	0000	
BLODSW . . . . . . . . . . . . .  	Number	0001	
BUFLEN . . . . . . . . . . . . .  	Number	00FF	

CASSW  . . . . . . . . . . . . .  	Number	0000	
CBTWEN . . . . . . . . . . . . .  	L NEAR	03F4	CSEG
CENCNT . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
CGTC2  . . . . . . . . . . . . .  	L NEAR	04C7	CSEG
CGTCNT . . . . . . . . . . . . .  	L NEAR	0488	CSEG
CHKPHR . . . . . . . . . . . . .  	L NEAR	081E	CSEG
CHKRNG . . . . . . . . . . . . .  	L NEAR	0815	CSEG
CHRGTR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
CHSEAT . . . . . . . . . . . . .  	Number	0001	
CIRC1  . . . . . . . . . . . . .  	L NEAR	02CF	CSEG
CIRC11 . . . . . . . . . . . . .  	L NEAR	02E7	CSEG
CIRC2  . . . . . . . . . . . . .  	L NEAR	02F3	CSEG
CIRCLE . . . . . . . . . . . . .  	L NEAR	0242	CSEG	Global
CIRCLP . . . . . . . . . . . . .  	L NEAR	0304	CSEG
CKCNTC . . . . . . . . . . . . .  	Alias	 POLKEY		
CLINE  . . . . . . . . . . . . .  	L NEAR	03EA	CSEG
CLINE2 . . . . . . . . . . . . .  	L NEAR	0440	CSEG
CLINEC . . . . . . . . . . . . .  	L NEAR	03DA	CSEG
CLINEF . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
CLINSC . . . . . . . . . . . . .  	L NEAR	03E3	CSEG
CLMWID . . . . . . . . . . . . .  	Number	000E	
CMPONE . . . . . . . . . . . . .  	L NEAR	04F7	CSEG
CMPUTN . . . . . . . . . . . . .  	Number	0000	
CNBTWN . . . . . . . . . . . . .  	L NEAR	03D1	CSEG
CNODEX . . . . . . . . . . . . .  	L NEAR	033F	CSEG
CNPNTS . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
COMMNT . . . . . . . . . . . . .  	Number	0000	
CONSSW . . . . . . . . . . . . .  	Number	0001	
CONTO  . . . . . . . . . . . . .  	Number	000F	
CONTRO . . . . . . . . . . . . .  	Number	0001	
CPCNT  . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
CPCNT8 . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
CPLFIN . . . . . . . . . . . . .  	L NEAR	040F	CSEG
CPLOT  . . . . . . . . . . . . .  	L NEAR	03A0	CSEG
CPLOT4 . . . . . . . . . . . . .  	L NEAR	039E	CSEG
CPLOT8 . . . . . . . . . . . . .  	L NEAR	0358	CSEG
CPLOTF . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
CPLSCX . . . . . . . . . . . . .  	L NEAR	0348	CSEG
CPLTIT . . . . . . . . . . . . .  	L NEAR	03FF	CSEG
CPM  . . . . . . . . . . . . . .  	Number	0001	
CPM110 . . . . . . . . . . . . .  	Number	0000	
CPM2 . . . . . . . . . . . . . .  	Number	0001	
CPM86  . . . . . . . . . . . . .  	Number	0000	
CPMA75 . . . . . . . . . . . . .  	Number	0000	
CPMADD . . . . . . . . . . . . .  	Number	0000	
CPMCON . . . . . . . . . . . . .  	Number	0000	
CPMLIF . . . . . . . . . . . . .  	Number	0000	
CPMMDS . . . . . . . . . . . . .  	Number	0000	
CPMPER . . . . . . . . . . . . .  	Number	0000	
CPMRSH . . . . . . . . . . . . .  	Number	0000	
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Symbols-3
                                                             

CPMSBC . . . . . . . . . . . . .  	Number	0000	
CPMSER . . . . . . . . . . . . .  	Number	0000	
CRCLP2 . . . . . . . . . . . . .  	L NEAR	0320	CSEG
CRCSUM . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
CRONLY . . . . . . . . . . . . .  	Number	0000	
CSAVEA . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
CSAVEM . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
CSCLXY . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
CSTCNT . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
CSTPLT . . . . . . . . . . . . .  	L NEAR	02AA	CSEG
CXOFF  . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
CYOFF  . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External

DANGLE . . . . . . . . . . . . .  	L NEAR	07A9	CSEG
DATPSC . . . . . . . . . . . . .  	Number	0080	
DBLCHR . . . . . . . . . . . . .  	Number	0000	
DBLTRN . . . . . . . . . . . . .  	Number	0000	
DCOLR  . . . . . . . . . . . . .  	L NEAR	0805	CSEG
DCOMPR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
DEBUG  . . . . . . . . . . . . .  	Text  		
DECFET . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
DISK . . . . . . . . . . . . . .  	Number	0001	
DIVBLP . . . . . . . . . . . . .  	L NEAR	05EF	CSEG
DIVBTX . . . . . . . . . . . . .  	L NEAR	05FA	CSEG
DMC  . . . . . . . . . . . . . .  	Number	0000	
DMOVE  . . . . . . . . . . . . .  	L NEAR	06DC	CSEG
DMULP  . . . . . . . . . . . . .  	L NEAR	074F	CSEG
DNOMOV . . . . . . . . . . . . .  	L NEAR	079B	CSEG
DNOPLT . . . . . . . . . . . . .  	L NEAR	079F	CSEG
DNSTOR . . . . . . . . . . . . .  	L NEAR	0795	CSEG
DOGRPH . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
DOMOVR . . . . . . . . . . . . .  	L NEAR	0708	CSEG
DOS  . . . . . . . . . . . . . .  	Number	0000	
DOWNC  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
DRAW . . . . . . . . . . . . . .  	L NEAR	0675	CSEG	Global
DRDOWN . . . . . . . . . . . . .  	L NEAR	06BC	CSEG
DRIGHT . . . . . . . . . . . . .  	L NEAR	06C3	CSEG
DRLEFT . . . . . . . . . . . . .  	L NEAR	06C1	CSEG
DRUP . . . . . . . . . . . . . .  	L NEAR	06BA	CSEG
DRVPOS . . . . . . . . . . . . .  	Number	0000	
DRWABS . . . . . . . . . . . . .  	L NEAR	0774	CSEG
DRWANG . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
DRWEEE . . . . . . . . . . . . .  	L NEAR	06D0	CSEG
DRWFFF . . . . . . . . . . . . .  	L NEAR	06CC	CSEG
DRWFLG . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
DRWGGG . . . . . . . . . . . . .  	L NEAR	06D6	CSEG
DRWHHC . . . . . . . . . . . . .  	L NEAR	06D2	CSEG
DRWHHH . . . . . . . . . . . . .  	L NEAR	06CA	CSEG
DRWSCL . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
DRWTAB . . . . . . . . . . . . .  	L NEAR	068C	CSEG
DSCALE . . . . . . . . . . . . .  	L NEAR	07B5	CSEG
DSCLDE . . . . . . . . . . . . .  	L NEAR	07C9	CSEG
DSCLP  . . . . . . . . . . . . .  	L NEAR	07D4	CSEG
DSCPOS . . . . . . . . . . . . .  	L NEAR	07E4	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Symbols-4
                                                             

DSTFLG . . . . . . . . . . . . .  	L NEAR	07A1	CSEG
DSTPOS . . . . . . . . . . . . .  	L NEAR	0787	CSEG
DUPONT . . . . . . . . . . . . .  	Number	0000	
DYNCOM . . . . . . . . . . . . .  	Number	0001	

EDIT80 . . . . . . . . . . . . .  	Number	0000	
ENTSLR . . . . . . . . . . . . .  	L NEAR	0106	CSEG
ENTST0 . . . . . . . . . . . . .  	L NEAR	0113	CSEG
ENTST1 . . . . . . . . . . . . .  	L NEAR	0116	CSEG
ENTST9 . . . . . . . . . . . . .  	L NEAR	011D	CSEG
ENTSTK . . . . . . . . . . . . .  	L NEAR	011D	CSEG
ESCCTL . . . . . . . . . . . . .  	Number	0000	
EXIDY  . . . . . . . . . . . . .  	Number	0000	

FAC  . . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
FAST . . . . . . . . . . . . . .  	Number	0001	
FCERR  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FCOMP  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FDIV . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FETCHC . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FETCHZ . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FIVDSK . . . . . . . . . . . . .  	Number	0001	
FIVEO  . . . . . . . . . . . . .  	Number	0001	
FIVLPT . . . . . . . . . . . . .  	Number	0001	
FIVMEM . . . . . . . . . . . . .  	Number	0001	
FKEYON . . . . . . . . . . . . .  	Number	0001	
FMULT  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FRCINT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FRCSNG . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FRETOP . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
FRMEVL . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

GARBA2 . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
GCPLFN . . . . . . . . . . . . .  	L NEAR	03FB	CSEG
GENBIN . . . . . . . . . . . . .  	Number	0001	
GENDSK . . . . . . . . . . . . .  	Number	0000	
GENIO  . . . . . . . . . . . . .  	Number	0001	
GESBC  . . . . . . . . . . . . .  	Number	0000	
GETBYT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
GETIN2 . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
GETQ . . . . . . . . . . . . . .  	L NEAR	01E5	CSEG
GETYPR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
GFUNTB . . . . . . . . . . . . .  	L NEAR	0670	CSEG
GIO86  . . . . . . . . . . . . .  	Number	0001	
GOPGIN . . . . . . . . . . . . .  	L NEAR	0622	CSEG
GOPLOP . . . . . . . . . . . . .  	L NEAR	0103	CSEG
GOSC2  . . . . . . . . . . . . .  	L NEAR	0800	CSEG
GOSCAL . . . . . . . . . . . . .  	L NEAR	07F4	CSEG
GOTBRD . . . . . . . . . . . . .  	L NEAR	001D	CSEG
GPUTG  . . . . . . . . . . . . .  	L NEAR	0503	CSEG	Global
GRPACX . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
GRPACY . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
GTABSC . . . . . . . . . . . . .  	L NEAR	0453	CSEG
GTARRY . . . . . . . . . . . . .  	L NEAR	0642	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Symbols-5
                                                             

GTASPC . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
GW . . . . . . . . . . . . . . .  	Number	0001	
GWCASS . . . . . . . . . . . . .  	Number	0000	
GWDBUG . . . . . . . . . . . . .  	Number	0000	
GXPOS  . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
GYPOS  . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External

HAL  . . . . . . . . . . . . . .  	Number	0000	
HALL3  . . . . . . . . . . . . .  	Number	0000	
HALL4  . . . . . . . . . . . . .  	Number	0000	
HEATH  . . . . . . . . . . . . .  	Number	0000	
HEXOCT . . . . . . . . . . . . .  	Number	0001	
HGHBIT . . . . . . . . . . . . .  	Number	0001	

I8086  . . . . . . . . . . . . .  	Number	0001	
I8251  . . . . . . . . . . . . .  	Number	0000	
IBMLIK . . . . . . . . . . . . .  	Number	0001	
IBMTOK . . . . . . . . . . . . .  	Number	0001	
INKEYF . . . . . . . . . . . . .  	Number	0001	
INLADD . . . . . . . . . . . . .  	Number	0000	
INSTSW . . . . . . . . . . . . .  	Number	0000	
INTEL  . . . . . . . . . . . . .  	Number	0000	
INTFHW . . . . . . . . . . . . .  	Number	0000	
INTFSW . . . . . . . . . . . . .  	Number	0000	
INTLEC . . . . . . . . . . . . .  	Number	0000	
INTQU2 . . . . . . . . . . . . .  	L NEAR	016F	CSEG
INTQUE . . . . . . . . . . . . .  	L NEAR	0154	CSEG
INTROM . . . . . . . . . . . . .  	Number	0000	
ISC  . . . . . . . . . . . . . .  	Number	0000	
ISIS . . . . . . . . . . . . . .  	Number	0000	

JISKTN . . . . . . . . . . . . .  	Number	0000	

KANABS . . . . . . . . . . . . .  	Number	0000	
KANJFN . . . . . . . . . . . . .  	Number	0000	
KANJSW . . . . . . . . . . . . .  	Number	0000	
KEYSTA . . . . . . . . . . . . .  	Number	0000	
KILLER . . . . . . . . . . . . .  	Number	0000	

LABKEY . . . . . . . . . . . . .  	Number	0001	
LEFTC  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
LEN2 . . . . . . . . . . . . . .  	Number	0001	
LEN3 . . . . . . . . . . . . . .  	Number	0001	
LENGTH . . . . . . . . . . . . .  	Number	0002	
LFPROG . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
LINEST . . . . . . . . . . . . .  	Number	0000	
LINLN  . . . . . . . . . . . . .  	Number	0050	
LISTEN . . . . . . . . . . . . .  	Number	0001	
LNGVAR . . . . . . . . . . . . .  	Number	0001	
LOKHED . . . . . . . . . . . . .  	Number	0000	
LONGI  . . . . . . . . . . . . .  	Number	0000	
LPT3 . . . . . . . . . . . . . .  	Number	0000	
LPTLEN . . . . . . . . . . . . .  	Number	0084	
LPTSW  . . . . . . . . . . . . .  	Number	0001	
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Symbols-6
                                                             


MACLNG . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
MAKINT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
MAPXYC . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
MAXDEL . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
MCI  . . . . . . . . . . . . . .  	Number	0000	
MCLXEQ . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
MDS  . . . . . . . . . . . . . .  	Number	0000	
MDSISS . . . . . . . . . . . . .  	Number	0000	
MELCO  . . . . . . . . . . . . .  	Number	0000	
MEMIMG . . . . . . . . . . . . .  	Number	0001	
MINDEL . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
MINUTK . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
MKINTC . . . . . . . . . . . . .  	Alias	 MAKINT		
MODEL3 . . . . . . . . . . . . .  	Number	0000	
MOSTEK . . . . . . . . . . . . .  	Number	0000	
MOVCNT . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
MOVREL . . . . . . . . . . . . .  	L NEAR	06EB	CSEG
MULBLP . . . . . . . . . . . . .  	L NEAR	055F	CSEG
MULSEG . . . . . . . . . . . . .  	Number	0001	

NAMLEN . . . . . . . . . . . . .  	Number	0028	
NASCOM . . . . . . . . . . . . .  	Number	0000	
NATROM . . . . . . . . . . . . .  	Number	0000	
NBANKS . . . . . . . . . . . . .  	Number	0001	
NCFCER . . . . . . . . . . . . .  	L NEAR	07B5	CSEG
NCRBAS . . . . . . . . . . . . .  	Number	0000	
NCRCAS . . . . . . . . . . . . .  	Number	0000	
NCRDEB . . . . . . . . . . . . .  	Number	0000	
NCRELS . . . . . . . . . . . . .  	Number	0000	
NCRLPT . . . . . . . . . . . . .  	Number	0001	
NECBAS . . . . . . . . . . . . .  	Number	0000	
NEGD . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
NMCOMT . . . . . . . . . . . . .  	Number	0002	
NMKEYF . . . . . . . . . . . . .  	Number	000A	
NMKEYT . . . . . . . . . . . . .  	Number	000E	
NMLINE . . . . . . . . . . . . .  	Number	0019	
NMLPT  . . . . . . . . . . . . .  	Number	0003	
NMPENT . . . . . . . . . . . . .  	Number	0001	
NMSTRT . . . . . . . . . . . . .  	Number	0004	
NOATDL . . . . . . . . . . . . .  	Number	0000	
NOCARY . . . . . . . . . . . . .  	L NEAR	0485	CSEG
NOCTLA . . . . . . . . . . . . .  	Number	0000	
NODOT  . . . . . . . . . . . . .  	Number	0000	
NOEDIT . . . . . . . . . . . . .  	Number	0000	
NOIOS  . . . . . . . . . . . . .  	Number	0000	
NONULL . . . . . . . . . . . . .  	Number	0000	
NOPEKS . . . . . . . . . . . . .  	Number	0000	
NOROMP . . . . . . . . . . . . .  	Number	0000	
NORUBT . . . . . . . . . . . . .  	Number	0000	
NOUSR  . . . . . . . . . . . . .  	Number	0000	
NOVARP . . . . . . . . . . . . .  	Number	0000	
NREAD  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
NUMLEV . . . . . . . . . . . . .  	Number	006E	
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Symbols-7
                                                             

NUMTMP . . . . . . . . . . . . .  	Number	000A	
NUMTRP . . . . . . . . . . . . .  	Number	0015	
NWRITE . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

OEMRAM . . . . . . . . . . . . .  	Number	0000	
OMERR  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ONTEL  . . . . . . . . . . . . .  	Number	0000	

PAINT  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	Global
PALSIZ . . . . . . . . . . . . .  	Number	0000	
PANBAS . . . . . . . . . . . . .  	Number	0000	
PC8A . . . . . . . . . . . . . .  	Number	0000	
PCS  . . . . . . . . . . . . . .  	Number	0000	
PDIREC . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
PDOWN  . . . . . . . . . . . . .  	L NEAR	0068	CSEG
PDOWN2 . . . . . . . . . . . . .  	L NEAR	006B	CSEG
PFUNLP . . . . . . . . . . . . .  	L NEAR	05C6	CSEG
PGINIT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
PGLOO2 . . . . . . . . . . . . .  	L NEAR	0634	CSEG
PGLOO3 . . . . . . . . . . . . .  	L NEAR	0637	CSEG
PGLOOP . . . . . . . . . . . . .  	L NEAR	0627	CSEG
PIXSIZ . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
PLAYSW . . . . . . . . . . . . .  	Number	0001	
PNTINI . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
PNTLOP . . . . . . . . . . . . .  	L NEAR	004C	CSEG
PNTLP1 . . . . . . . . . . . . .  	L NEAR	004F	CSEG
PNTLP2 . . . . . . . . . . . . .  	L NEAR	006E	CSEG
PNTLP3 . . . . . . . . . . . . .  	L NEAR	00A1	CSEG
PNTLP4 . . . . . . . . . . . . .  	L NEAR	00B6	CSEG
PNTLP6 . . . . . . . . . . . . .  	L NEAR	00E4	CSEG
POLKEY . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
POPTRT . . . . . . . . . . . . .  	L NEAR	004A	CSEG
PRNGER . . . . . . . . . . . . .  	L NEAR	0613	CSEG
PSNLEN . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
PTRGET . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
PURE . . . . . . . . . . . . . .  	Number	0001	
PUSHF  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
PUT1 . . . . . . . . . . . . . .  	L NEAR	05AC	CSEG
PUT2 . . . . . . . . . . . . . .  	L NEAR	05D9	CSEG
PUT20  . . . . . . . . . . . . .  	L NEAR	05D4	CSEG
PUTFLG . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
PUTQ . . . . . . . . . . . . . .  	L NEAR	0199	CSEG
PWR2PX . . . . . . . . . . . . .  	Number	-0001	

QUEINP . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
QUELEN . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
QUEOUT . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
QUEUE  . . . . . . . . . . . . .  	Number	0001	

REALIO . . . . . . . . . . . . .  	Number	0001	
RMX  . . . . . . . . . . . . . .  	Number	0000	
RSHACK . . . . . . . . . . . . .  	Number	0000	
RSTLES . . . . . . . . . . . . .  	Number	0001	
RTOVH0 . . . . . . . . . . . . .  	L NEAR	00EE	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Symbols-8
                                                             

RTOVH1 . . . . . . . . . . . . .  	L NEAR	00F2	CSEG
RTOVH2 . . . . . . . . . . . . .  	L NEAR	00FA	CSEG
RTPROG . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External

SBC  . . . . . . . . . . . . . .  	Number	0000	
SBC86  . . . . . . . . . . . . .  	Number	0000	
SCAL2  . . . . . . . . . . . . .  	L NEAR	0478	CSEG
SCALE  . . . . . . . . . . . . .  	L NEAR	046A	CSEG
SCALE2 . . . . . . . . . . . . .  	L NEAR	046C	CSEG
SCALEY . . . . . . . . . . . . .  	L NEAR	0466	CSEG
SCALXY . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SCAN1  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SCAND  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SCANL  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SCANL1 . . . . . . . . . . . . .  	L NEAR	0133	CSEG
SCANR  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SCANR1 . . . . . . . . . . . . .  	L NEAR	0120	CSEG
SCP  . . . . . . . . . . . . . .  	Number	0001	
SCRN86 . . . . . . . . . . . . .  	Number	0001	
SCRNIO . . . . . . . . . . . . .  	Number	0001	
SCROLT . . . . . . . . . . . . .  	Number	0001	
SETATR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SETC . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SGSATS . . . . . . . . . . . . .  	Number	0000	
SHORTJ . . . . . . . . . . . . .  	Number	0001	
SHTCHN . . . . . . . . . . . . .  	Number	0000	
SHTERR . . . . . . . . . . . . .  	Number	0000	
SHTINS . . . . . . . . . . . . .  	Number	0000	
SHTLHM . . . . . . . . . . . . .  	Number	0000	
SHTLIN . . . . . . . . . . . . .  	Number	0000	
SHTPRO . . . . . . . . . . . . .  	Number	0000	
SHTREN . . . . . . . . . . . . .  	Number	0000	
SIRIUS . . . . . . . . . . . . .  	Number	0000	
SIXDIG . . . . . . . . . . . . .  	Number	0000	
SKPCNT . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
SMALL  . . . . . . . . . . . . .  	Number	0000	
SPCDSK . . . . . . . . . . . . .  	Number	0000	
SPCNDS . . . . . . . . . . . . .  	Number	0000	
STOREC . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
STPAIN . . . . . . . . . . . . .  	L NEAR	0057	CSEG
STREND . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
STRING . . . . . . . . . . . . .  	Number	0001	
STRSIZ . . . . . . . . . . . . .  	Number	0003	
SUBFLG . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
SUPRSH . . . . . . . . . . . . .  	Number	0001	
SWAPSW . . . . . . . . . . . . .  	Number	0001	
SYNCHR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

TDOWNC . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
TEK  . . . . . . . . . . . . . .  	Number	0000	
TETRA  . . . . . . . . . . . . .  	Number	0000	
TILE . . . . . . . . . . . . . .  	Number	0000	
TIMSHR . . . . . . . . . . . . .  	Number	0000	
TRNCHR . . . . . . . . . . . . .  	Number	0000	
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Symbols-9
                                                             

TRSER2 . . . . . . . . . . . . .  	Number	0000	
TRUANS . . . . . . . . . . . . .  	Number	0000	
TRUROM . . . . . . . . . . . . .  	Number	0001	
TSDISK . . . . . . . . . . . . .  	Number	0000	
TSHIBA . . . . . . . . . . . . .  	Number	0000	
TSLPT  . . . . . . . . . . . . .  	Number	0000	
TUPC . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

UMULT  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
UPC  . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

VALSCN . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
VALTYP . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
VIEW . . . . . . . . . . . . . .  	Number	0000	

WINDOW . . . . . . . . . . . . .  	Number	0000	
WRAP . . . . . . . . . . . . . .  	L NEAR	0227	CSEG

XCHGX  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
XCHGY  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
XDELT  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
XTNSYS . . . . . . . . . . . . .  	Number	0000	

YDELT  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

Z80  . . . . . . . . . . . . . .  	Number	0001	
Z80MAC . . . . . . . . . . . . .  	Number	0001	
ZENITH . . . . . . . . . . . . .  	Number	0000	

$AND . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
$OR  . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
$PRESET  . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
$PSET  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
$XOR . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
??L000 . . . . . . . . . . . . .  	L NEAR	0027	CSEG
??L001 . . . . . . . . . . . . .  	L NEAR	0075	CSEG
??L002 . . . . . . . . . . . . .  	L NEAR	016C	CSEG
??L003 . . . . . . . . . . . . .  	L NEAR	0180	CSEG
??L004 . . . . . . . . . . . . .  	L NEAR	01B9	CSEG
??L005 . . . . . . . . . . . . .  	L NEAR	031E	CSEG
??L006 . . . . . . . . . . . . .  	L NEAR	04BA	CSEG
??L007 . . . . . . . . . . . . .  	L NEAR	04D8	CSEG
??L008 . . . . . . . . . . . . .  	L NEAR	0512	CSEG
??L009 . . . . . . . . . . . . .  	L NEAR	0521	CSEG
??L010 . . . . . . . . . . . . .  	L NEAR	0538	CSEG
??L011 . . . . . . . . . . . . .  	L NEAR	0545	CSEG
??L012 . . . . . . . . . . . . .  	L NEAR	0591	CSEG
??L013 . . . . . . . . . . . . .  	L NEAR	0599	CSEG
??L014 . . . . . . . . . . . . .  	L NEAR	05F6	CSEG
??L015 . . . . . . . . . . . . .  	L NEAR	0618	CSEG
??L016 . . . . . . . . . . . . .  	L NEAR	0653	CSEG
??L017 . . . . . . . . . . . . .  	L NEAR	0680	CSEG
??L018 . . . . . . . . . . . . .  	L NEAR	06FF	CSEG
??L019 . . . . . . . . . . . . .  	L NEAR	07BA	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:35:15
 
ADVGRP - ADVANCED GENERALIZED GRAPHICS STUFF                Symbols-10
                                                             

??L020 . . . . . . . . . . . . .  	L NEAR	07C3	CSEG
??L021 . . . . . . . . . . . . .  	L NEAR	0811	CSEG
??L022 . . . . . . . . . . . . .  	L NEAR	081E	CSEG


   1721 Source  Lines
   2261 Total   Lines
    472 Symbols

  35190 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
