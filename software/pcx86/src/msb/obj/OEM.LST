Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-1
                                                            

                                ; 
                                ; Reversed-engineered OEM.ASM, courtesy of Mich
				al Necasek 2020-07-13 
                                ; 
 0000                           DSEG    SEGMENT PUBLIC 'DATASG' 
                                 
                                ; Defined elsewhere 
                                EXTRN   CSAVEA:WORD,CSAVEM:WORD 
                                 
                                ; Data defined by the OEM module 
                                 
 0000  00                       OVMODE  db      0       ; Old video mode 
 0001  071B R                   CBKINT  dw      offset  CTLBRK 
 0003  0000                     CBRKSG  dw      0 
 0005  06F9 R                           dw      offset  TIMISR 
 0007  0000                     TIMRSG  dw      0 
 0009  00                       CVPAGE  db      0       ; Currently selected vi
				deo page 
 000A  00                       var_63a db      0 
 000B  50                       var_63b db      80      ; Screen width in colum
				ns (40/80) 
 000C  00                       var_63c db      0 
 000D  00                       VISVPG  db      0       ; Currently visible vid
				eo page 
 000E  00                       var_63e db      0       ; Initial/saved number 
				of columns 
 000F  00                       CVMODE  db      0       ; Currently set video m
				ode 
 0010  00                       var_640 db      0 
 0011  00                       var_641 db      0 
 0012  00                       var_642 db      0 
 0013  0707                     var_643 dw      0707h   ; Cursor shape 
 0015  07                       var_645 db      7       ; Saved text attributes
				 
 0016  07                       var_646 db      7       ; Current text attribut
				es 
 0017  0000                     var_647 dw      0       ; Current video memory 
				offset 
 0019  0000                     var_649 dw      0       ; Screen width in pixel
				s? 
 001B  00                       var_64b db      0       ; Current character col
				umn? 
 001C  00                       var_64c db      0 
 001D  00                       var_64d db      0 
 001E  0000                     var_64e dw      0 
 0020  00                       var_650 db      0 
 0021  00                               db      0 
 0022  06                       var_652 db      6 
 0023  05                               db      5 
 0024  01                               db      1 
 0025  06                       var_655 db      6 
 0026  0A                               db      10 
 0027  01                               db      1 
 0028  00                               db      0       ; Likely unused 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-2
                                                            

 0029  00                               db      0 
 002A  00                               db      0 
 002B  00                               db      0 
 002C  00                               db      0 
 002D  00                               db      0 
 002E  00                               db      0 
 002F  00                               db      0 
 0030  03                       var_660 db      3 
 0031  0000                     var_661 dw      0       ; Current offset into s
				creen? 
 0033  0000                     var_663 dw      0       ; Some other offset? 
 0035  00                       var_665 db      0 
 0036  00                       var_666 db      0 
 0037  0000                     var_667 dw      0       ; Function pointer 
 0039  00                       var_669 db      0 
                                 
 003A                           DSEG    ENDS 
                                 
 0000                           CSEG	SEGMENT PUBLIC 'CODESG' 
                                	ASSUME  CS:CSEG 
                                 
                                ; GW-BASIC routines that OEM code calls into. 
                                 
                                EXTRN   KYBCLR:NEAR 
                                EXTRN   SCNCLR:NEAR 
                                EXTRN   SCNSWI:NEAR 
                                EXTRN   GRPINI:NEAR 
                                 
                                EXTRN   SPCTAB:NEAR 
                                EXTRN   SNERR:NEAR 
                                 
                                PUBLIC  SEGINI, GETHED, PRTMAP, GETFBC, SETFBC,
				 GRPSIZ, POKFLT, PEKFLT 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0000                           SEGINI		proc near 
 0000  1E                       		push	ds 
 0001  33 C0                    		xor	ax, ax 
 0003  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 0005  8C C8                    		mov	ax, cs 
 0007  A3 006E                  		mov	ds:6Eh,	ax	; Adjust segment for vector 1B
				h 
 000A  A3 0072                  		mov	ds:72h,	ax	; Adjust segment for vector 1C
				h 
 000D  A3 0092                  		mov	ds:92h,	ax	; Adjust segment for vector 24
				h 
 0010  8C C0                    		mov	ax, es 
 0012  A3 0510                  		mov	ds:510h, ax	; Stash	away BASIC data	segme
				nt 
 0015  1F                       		pop	ds 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-3
                                                            

                                		assume ds:nothing 
 0016  C3                       		ret 
                                SEGINI		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 0017  0D 0A                    OEMHED		db 0Dh,0Ah 
 0019  4D 69 63 72 6F 73 6F     		db 'Microsoft BASIC',0Dh,0Ah 
       66 74 20 42 41 53 49     
       43 0D 0A                 
                                ;		db 'OEM.ASM by OS/2 Museum, July 2020',0Dh,0
				Ah 
 002A  68 74 74 70 73 3A 2F     		db 'https://github.com/microsoft/GW-BASIC' 
       2F 67 69 74 68 75 62     
       2E 63 6F 6D 2F 6D 69     
       63 72 6F 73 6F 66 74     
       2F 47 57 2D 42 41 53     
       49 43                    
 004F  00                                       db 0 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0050                           GETHED		proc near 
 0050  3A C0                    		cmp	al, al 
 0052  BB 0017 R                		mov	bx, offset OEMHED 
 0055  C3                       		ret 
                                GETHED		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Map print function/output character codes 
                                 
 0056                           PRTMAP		proc near 
 0056  3C FF                    		cmp	al, 0FFh 
 0058  75 09                    		jnz	short loc_5044 
 005A  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 005F  74 18                    		jz	short BADMAP 
 0061  B0 20                    		mov	al, ' ' 
 0063                           loc_5044: 
 0063  3C 07                    		cmp	al, 7		; BEL 
 0065  74 12                    		jz	short BADMAP 
 0067  3C 20                    		cmp	al, ' ' 
 0069  73 22                    		jnb	short loc_506E 
 006B  3C 09                    		cmp	al, 9 
 006D  72 1E                    		jb	short loc_506E 
 006F  74 21                    		jz	short loc_5073 
 0071  3C 0E                    		cmp	al, 0Eh 
 0073  72 04                    		jb	short BADMAP 
 0075  3C 1C                    		cmp	al, 1Ch 
 0077  72 14                    		jb	short loc_506E 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-4
                                                            

 0079                           BADMAP: 
 0079  B4 FF                    		mov	ah, 0FFh 
 007B  0A C0                    		or	al, al 
 007D  F9                       		stc 
 007E  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 007F                           loc_5060: 
 007F  B0 20                    		mov	al, ' ' 
 0081  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 0086  75 05                    		jnz	short loc_506E 
 0088  0A C0                    		or	al, al 
 008A  B0 00                    		mov	al, 0 
 008C  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 008D                           loc_506E: 
 008D  0A C0                    		or	al, al 
 008F  74 EE                    		jz	short loc_5060 
 0091  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0092                           loc_5073: 
 0092  B0 0F                    		mov	al, 0Fh 
 0094  EB E3                    		jmp	short BADMAP 
                                PRTMAP		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Get foreground/background colors 
                                ; On entry: 
                                ;   CF set  : Graphics 
                                ;   CF clear: Text mode 
                                 
 0096                           GETFBC		proc near 
 0096  72 15                    		jb	short TXTATR 
 0098  A0 0016 R                		mov	al, ds:var_646 
 009B  8A D8                    		mov	bl, al 
 009D  D0 EB                    		shr	bl, 1 
 009F  D0 EB                    		shr	bl, 1 
 00A1  D0 EB                    		shr	bl, 1 
 00A3  D0 EB                    		shr	bl, 1 
 00A5  25 008F                  		and	ax, 8Fh 
 00A8  81 E3 0007               		and	bx, 7 
 00AC  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 00AD                           TXTATR: 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-5
                                                            

 00AD  33 C0                    		xor	ax, ax 
 00AF  8B D8                    		mov	bx, ax 
 00B1  B0 03                    		mov	al, 3 
 00B3  C3                       		ret 
                                GETFBC		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 00B4  00                       byte_5095	db 0 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Set foreground/background colors 
                                 
 00B5                           SETFBC		proc near 
 00B5  50                       		push	ax 
 00B6  53                       		push	bx 
 00B7  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 00BC  75 2F                    		jnz	short loc_50CE 
 00BE  D0 E3                    		shl	bl, 1 
 00C0  D0 E3                    		shl	bl, 1 
 00C2  D0 E3                    		shl	bl, 1 
 00C4  D0 E3                    		shl	bl, 1 
 00C6  0A C3                    		or	al, bl 
 00C8  2E: 80 3E 00B4 R 00      		cmp	cs:byte_5095, 0 
 00CE  2E: C6 06 00B4 R 00      		mov	cs:byte_5095, 0 
 00D4  A0 0015 R                		mov	al, ds:var_645 
 00D7  75 11                    		jnz	short loc_50CB 
 00D9  2E: C6 06 00B4 R 01      		mov	cs:byte_5095, 1 
 00DF  B0 70                    		mov	al, 70h	; 'p' 
 00E1  80 3E 0015 R 07          		cmp	byte ptr ds:var_645, 7 
 00E6  74 02                    		jz	short loc_50CB 
 00E8  B0 07                    		mov	al, 7 
 00EA                           loc_50CB: 
 00EA  A2 0016 R                		mov	ds:var_646, al 
 00ED                           loc_50CE: 
 00ED  5B                       		pop	bx 
 00EE  58                       		pop	ax 
 00EF  C3                       		ret 
                                SETFBC		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 00F0  8A 0E 000B R             		mov	cl, ds:var_63b 
 00F4  B5 00                    		mov	ch, 0 
 00F6  BA 0019                  		mov	dx, 25 
 00F9  C3                       		ret 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Get screen pixel dimensions 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-6
                                                            

 00FA                           GRPSIZ		proc near 
 00FA  8B 0E 0019 R             		mov	cx, ds:var_649 
 00FE  0B C9                    		or	cx, cx 
 0100  74 01                    		jz	short HEIGHT 
 0102  49                       		dec	cx		; Decrement unless zero 
 0103                           HEIGHT: 
 0103  BA 00C7                  		mov	dx, 199 
 0106  C3                       		ret 
                                GRPSIZ		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 0107  00                       PEKPOK		db 0                    ; Is it	a PEEK 
				(0) or POKE (255)? 
 0108  002E                     word_50E9	dw 2Eh 
 010A  002F                     		dw 2Fh 
 010C  0347                     		dw 347h 
 010E  0348                     		dw 348h 
 0110  0030                     		dw 30h 
 0112  0031                     		dw 31h 
 0114  0358                     		dw 358h 
 0116  0359                     		dw 359h 
 0118  004E                     		dw 4Eh 
 011A  002C                     		dw 2Ch 
 011C  002D                     		dw 2Dh 
 011E  006A                     		dw 6Ah 
 0120  01B1 R                   off_5101	dw offset loc_5192 
 0122  0153                     		dw 153h 
 0124  0152                     		dw 152h 
 0126  0646                     		dw 646h         ; var_646 ??? 
 0128  048F                     		dw 48Fh 
 012A  048E                     		dw 48Eh 
 012C  0157                     		dw 157h 
 012E  0156                     		dw 156h 
 0130  047E                     		dw 47Eh 
 0132  047D                     		dw 47Dh 
 0134  0155                     		dw 155h 
 0136  0154                     		dw 154h 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Filter PEEKs for "special" addresses 
                                 
 0138                           PEKFLT		proc near 
 0138  50                       		push	ax 
 0139  51                       		push	cx 
 013A  53                       		push	bx 
 013B  52                       		push	dx 
 013C  8B D3                    		mov	dx, bx 
 013E  2E: C6 06 0107 R 00      		mov	cs:PEKPOK, 0	; It's a peek 
 0144  EB 0A                    		jmp	short DOPFLT 
                                PEKFLT		endp 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-7
                                                            

                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Filter POKEs for "special" addresses 
                                ; On entry: Address in ES:DX 
                                ; On exit : ZF clear if	poke should be done 
                                 
 0146                           POKFLT		proc near 
 0146  50                       		push	ax 
 0147  51                       		push	cx 
 0148  53                       		push	bx 
 0149  52                       		push	dx 
 014A  2E: C6 06 0107 R FF      		mov	cs:PEKPOK, -1	; It's a poke 
 0150                           DOPFLT: 
 0150  57                       		push	di 
 0151  06                       		push	es 
 0152  FC                       		cld 
 0153  8C D8                    		mov	ax, ds 
 0155  8C C1                    		mov	cx, es 
 0157  3B C8                    		cmp	cx, ax		; Is it	the BASIC data segment? 
 0159  74 18                    		jz	short BASDAT 
 015B  83 F9 00                 		cmp	cx, 0		; Zero segment? 
 015E  75 55                    		jnz	short PFLTX 
 0160  81 FA 041A               		cmp	dx, 41Ah	; Is it	the pointer into the key
				board buffer? 
 0164  75 4F                    		jnz	short PFLTX 
 0166  2E: 80 3E 0107 R FF      		cmp	cs:PEKPOK, -1	; Is it	a POKE? 
 016C  75 47                    		jnz	short PFLTX 
 016E  E8 0000 E                		call	KYBCLR 
 0171  EB 42                    		jmp	short PFLTX 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0173                           BASDAT: 
 0173  BF 0108 R                		mov	di, offset word_50E9 
 0176  8B C2                    		mov	ax, dx 
 0178  B9 0018                  		mov	cx, 18h 
 017B  D1 E9                    		shr	cx, 1 
 017D  0E                       		push	cs 
 017E  07                       		pop	es 
                                		assume es:CSEG 
 017F  F2/ AF                   		repne scasw 
 0181  75 32                    		jnz	short PFLTX 
 0183  D1 E1                    		shl	cx, 1 
 0185  BB 0120 R                		mov	bx, offset off_5101 
 0188  03 D9                    		add	bx, cx 
 018A  2E: 8B 07                		mov	ax, cs:[bx] 
 018D  07                       		pop	es 
                                		assume es:nothing 
 018E  5F                       		pop	di 
 018F  5A                       		pop	dx 
 0190  5B                       		pop	bx 
 0191  83 F9 02                 		cmp	cx, 2 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-8
                                                            

 0194  72 18                    		jb	short loc_518F 
 0196  2E: 80 3E 0107 R 00      		cmp	cs:PEKPOK, 0	; Is it	a PEEK? 
 019C  74 08                    		jz	short loc_5187 
 019E  8B D0                    		mov	dx, ax 
 01A0  0D FFFF                  		or	ax, 0FFFFh 
 01A3  59                       		pop	cx 
 01A4  58                       		pop	ax 
 01A5  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 01A6                           loc_5187: 
 01A6  8B D8                    		mov	bx, ax 
 01A8  0D FFFF                  		or	ax, 0FFFFh 
 01AB  59                       		pop	cx 
 01AC  58                       		pop	ax 
 01AD  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 01AE                           loc_518F: 
 01AE  59                       		pop	cx 
 01AF  FF E0                    		jmp	ax 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 01B1                           loc_5192: 
 01B1  33 C0                    		xor	ax, ax 
 01B3  58                       		pop	ax 
 01B4  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 01B5                           PFLTX: 
 01B5  07                       		pop	es 
 01B6  5F                       		pop	di 
 01B7  5A                       		pop	dx 
 01B8  5B                       		pop	bx 
 01B9  59                       		pop	cx 
 01BA  58                       		pop	ax 
 01BB  C3                       		ret 
                                POKFLT		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                ; Start of another module? 
                                ;		align 4 
                                 
                                PUBLIC  SETCBF, INICOM, RECCOM, SNDCOM, STACOM,
				 TRMCOM, SNDLPT 
                                 
 01BC  2580                     BAUDTB  	dw 9600 
 01BE  12C0                     		dw 4800 
 01C0  0960                     		dw 2400 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-9
                                                            

 01C2  0708                     		dw 1800 
 01C4  04B0                     		dw 1200 
 01C6  0258                     		dw 600 
 01C8  012C                     		dw 300 
 01CA  0096                     		dw 150 
 01CC  006E                     		dw 110 
 01CE  004B                     		dw 75 
 01D0  000C                     		dw 12 
 01D2  0018                     		dw 24 
 01D4  0030                     		dw 48 
 01D6  0040                     		dw 64 
 01D8  0060                     		dw 96 
 01DA  00C0                     		dw 192 
 01DC  0180                     		dw 384 
 01DE  0300                     		dw 768 
 01E0  0417                     		dw 1047 
 01E2  0600                     		dw 1536 
 01E4  08                       masks?		db 8 
 01E5  18                       		db 18h 
 01E6  28                       		db 28h 
 01E7  38                       		db 38h 
 01E8  01EC R                   COMTBL		dw offset CM1CTL 
 01EA  020E R                   		dw offset CM2CTL 
 01EC  00                       CM1CTL		db    0		; Control structure for	first 
				COM port 
 01ED  00                       		db    0 
 01EE  00                       		db    0 
 01EF  00                       		db    0 
 01F0  00                       		db    0 
 01F1  00                       		db    0 
 01F2  00                       		db    0 
 01F3  00                       		db    0 
 01F4  00                       		db    0 
 01F5  00                       		db    0 
 01F6  00                       		db    0 
 01F7  00                       		db    0 
 01F8  00                       		db    0 
 01F9  00                       		db    0 
 01FA  00                       		db    0 
 01FB  00                       		db    0 
 01FC  00                       		db    0 
 01FD  00                       		db    0 
 01FE  00                       		db    0 
 01FF  00                       		db    0 
 0200  00                       		db    0 
 0201  00                       		db    0 
 0202  00                       		db    0 
 0203  00                       		db    0 
 0204  00                       		db    0 
 0205  00                       		db    0 
 0206  00                       		db    0 
 0207  00                       		db    0 
 0208  00                       		db    0 
 0209  00                       		db    0 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-10
                                                            

 020A  00                       		db    0 
 020B  00                       		db    0 
 020C  023C R                   		dw offset CM1ISR 
 020E  00                       CM2CTL		db    0         ; Control structure for
					second COM port 
 020F  00                       		db    0 
 0210  00                       		db    0 
 0211  00                       		db    0 
 0212  00                       		db    0 
 0213  00                       		db    0 
 0214  00                       		db    0 
 0215  00                       		db    0 
 0216  00                       		db    0 
 0217  00                       		db    0 
 0218  00                       		db    0 
 0219  00                       		db    0 
 021A  00                       		db    0 
 021B  00                       		db    0 
 021C  00                       		db    0 
 021D  00                       		db    0 
 021E  00                       		db    0 
 021F  00                       		db    0 
 0220  00                       		db    0 
 0221  00                       		db    0 
 0222  00                       		db    0 
 0223  00                       		db    0 
 0224  00                       		db    0 
 0225  00                       		db    0 
 0226  00                       		db    0 
 0227  00                       		db    0 
 0228  00                       		db    0 
 0229  00                       		db    0 
 022A  00                       		db    0 
 022B  00                       		db    0 
 022C  00                       		db    0 
 022D  00                       		db    0 
 022E  0242 R                   		dw offset CM2ISR 
 0230  0000                     CBFSEG		dw 0 
 0232  0000                     CBFSIZ		dw 0 
 0234  031F R                   ISRDSP		dw offset ISRFN0 
 0236  02E6 R                   		dw offset ISRFN1 
 0238  0264 R                   		dw offset ISRFN2 
 023A  0313 R                   		dw offset ISRFN3 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 023C                           CM1ISR: 
 023C  53                       		push	bx 
 023D  BB 01EC R                		mov	bx, offset CM1CTL 
 0240  EB 04                    		jmp	short COMISR 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-11
                                                            

                                 
 0242                           CM2ISR		proc far 
 0242  53                       		push	bx 
 0243  BB 020E R                		mov	bx, offset CM2CTL 
                                 
 0246                           COMISR: 
 0246  51                       		push	cx 
 0247  52                       		push	dx 
 0248  56                       		push	si 
 0249  57                       		push	di 
 024A  1E                       		push	ds 
 024B  0E                       		push	cs 
 024C  1F                       		pop	ds 
                                		assume ds:CSEG 
 024D  50                       		push	ax 
 024E  C6 47 1D 00              		mov	byte ptr [bx+1Dh], 0 
 0252  8B 17                    		mov	dx, [bx] 
 0254  42                       		inc	dx 
 0255  42                       		inc	dx 
 0256  EC                       		in	al, dx 
 0257                           loc_523B: 
 0257  24 06                    		and	al, 6 
 0259  FE 47 1D                 		inc	byte ptr [bx+1Dh] 
 025C  B4 00                    		mov	ah, 0 
 025E  8B F0                    		mov	si, ax 
 0260  FF A4 0234 R             		jmp	ISRDSP[si] 
 0264                           ISRFN2: 
 0264  4A                       		dec	dx 
 0265  4A                       		dec	dx 
 0266  EC                       		in	al, dx 
 0267  8B 77 0A                 		mov	si, [bx+0Ah] 
 026A  46                       		inc	si 
 026B  3B 36 0232 R             		cmp	si, CBFSIZ 
 026F  76 02                    		jbe	short loc_5257 
 0271  33 F6                    		xor	si, si 
 0273                           loc_5257: 
 0273  3B 77 08                 		cmp	si, [bx+8] 
 0276  75 06                    		jnz	short loc_5262 
 0278  80 4F 18 01              		or	byte ptr [bx+18h], 1 
 027C  EB 17                    		jmp	short COMEOI 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 027E                           loc_5262: 
 027E  C6 06 12FB R 01          		mov	BYTE PTR ISREVT, 1 
 0283  89 77 0A                 		mov	[bx+0Ah], si 
 0286  1E                       		push	ds 
 0287  53                       		push	bx 
 0288  8B 5F 14                 		mov	bx, [bx+14h] 
 028B  8B 3E 0230 R             		mov	di, CBFSEG 
 028F  8E DF                    		mov	ds, di 
                                		assume ds:nothing 
 0291  88 00                    		mov	[bx+si], al 
 0293  5B                       		pop	bx 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-12
                                                            

 0294  1F                       		pop	ds 
 0295                           COMEOI: 
 0295  B0 20                    		mov	al, 20h		; Send EOI 
 0297  E6 20                    		out	20h, al		; Interrupt controller,	8259A. 
 0299  8B 17                    		mov	dx, [bx] 
 029B  42                       		inc	dx 
 029C  42                       		inc	dx 
 029D  EC                       		in	al, dx 
 029E  A8 01                    		test	al, 1 
 02A0  75 3B                    		jnz	short ISRX 
 02A2  80 7F 1D 08              		cmp	byte ptr [bx+1Dh], 8 
 02A6  72 AF                    		jb	short loc_523B 
 02A8  80 4F 19 01              		or	byte ptr [bx+19h], 1 
 02AC  1E                       		push	ds 
 02AD  33 C0                    		xor	ax, ax 
 02AF  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 02B1  2E: 8B 77 1E             		mov	si, cs:[bx+1Eh]	; Messing with the IVT! 
 02B5  2E: 8B 47 10             		mov	ax, cs:[bx+10h] 
 02B9  89 04                    		mov	[si], ax 
 02BB  2E: 8B 47 12             		mov	ax, cs:[bx+12h] 
 02BF  89 44 02                 		mov	[si+2],	ax 
 02C2  33 C0                    		xor	ax, ax 
 02C4  2E: 89 47 10             		mov	cs:[bx+10h], ax 
 02C8  2E: 89 47 12             		mov	cs:[bx+12h], ax 
 02CC  1F                       		pop	ds 
                                		assume ds:nothing 
 02CD  42                       		inc	dx 
 02CE  42                       		inc	dx 
 02CF  B0 00                    		mov	al, 0		; Read interrupt mask 
 02D1  EE                       		out	dx, al 
 02D2  E4 21                    		in	al, 21h		; Interrupt controller,	8259A. 
 02D4  0A 47 1C                 		or	al, [bx+1Ch]	; Mask this port's IRQ again 
 02D7  E6 21                    		out	21h, al		; Interrupt controller,	8259A. 
 02D9  B0 20                    		mov	al, 20h		; One more EOI for good	measure?
				 
 02DB  E6 20                    		out	20h, al		; Interrupt controller,	8259A. 
 02DD                           ISRX: 
 02DD  58                       		pop	ax 
 02DE  1F                       		pop	ds 
 02DF  5F                       		pop	di 
 02E0  5E                       		pop	si 
 02E1  5A                       		pop	dx 
 02E2  59                       		pop	cx 
 02E3  5B                       		pop	bx 
 02E4  FB                       		sti 
 02E5  CF                       		iret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 02E6                           ISRFN1: 
 02E6  4A                       		dec	dx 
 02E7  8B 77 0C                 		mov	si, [bx+0Ch] 
 02EA  3B 77 0E                 		cmp	si, [bx+0Eh] 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-13
                                                            

 02ED  74 1F                    		jz	short loc_52F2 
 02EF  46                       		inc	si 
 02F0  81 FE 0080               		cmp	si, 80h	; '�' 
 02F4  76 02                    		jbe	short loc_52DC 
 02F6  33 F6                    		xor	si, si 
 02F8                           loc_52DC: 
 02F8  89 77 0C                 		mov	[bx+0Ch], si 
 02FB  53                       		push	bx 
 02FC  1E                       		push	ds 
 02FD  8B 5F 16                 		mov	bx, [bx+16h] 
 0300  8B 3E 0230 R             		mov	di, ds:CBFSEG 
 0304  8E DF                    		mov	ds, di 
 0306  8A 00                    		mov	al, [bx+si] 
 0308  1F                       		pop	ds 
 0309  5B                       		pop	bx 
 030A  4A                       		dec	dx 
 030B  EE                       		out	dx, al 
 030C  EB 87                    		jmp	short COMEOI 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 030E                           loc_52F2: 
 030E  B0 0D                    		mov	al, 0Dh 
 0310  EE                       		out	dx, al 
 0311  EB 82                    		jmp	short COMEOI 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0313                           ISRFN3: 
 0313  83 C2 03                 		add	dx, 3 
 0316  EC                       		in	al, dx 
 0317  24 0A                    		and	al, 0Ah 
 0319  08 47 18                 		or	[bx+18h], al 
 031C  E9 0295 R                		jmp	COMEOI 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 031F                           ISRFN0: 
 031F  83 C2 04                 		add	dx, 4 
 0322  EC                       		in	al, dx 
 0323  83 EA 05                 		sub	dx, 5 
 0326  8A 4F 1A                 		mov	cl, [bx+1Ah] 
 0329  F6 D0                    		not	al 
 032B  22 C1                    		and	al, cl 
 032D  8A 67 19                 		mov	ah, [bx+19h] 
 0330  8A EC                    		mov	ch, ah 
 0332  80 E4 F0                 		and	ah, 0F0h 
 0335  3A E0                    		cmp	ah, al 
 0337  74 13                    		jz	short loc_5330 
 0339  80 E5 0F                 		and	ch, 0Fh 
 033C  0A C5                    		or	al, ch 
 033E  88 47 19                 		mov	[bx+19h], al 
 0341  22 C1                    		and	al, cl 
 0343  74 0A                    		jz	short loc_5333 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-14
                                                            

 0345  80 4F 19 02              		or	byte ptr [bx+19h], 2 
 0349  B0 0D                    		mov	al, 0Dh 
 034B  EE                       		out	dx, al 
 034C                           loc_5330: 
 034C  E9 0295 R                		jmp	COMEOI 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 034F                           loc_5333: 
 034F  80 67 19 FD              		and	byte ptr [bx+19h], 0FDh 
 0353  B0 0F                    		mov	al, 0Fh 
 0355  EE                       		out	dx, al 
 0356  E9 0295 R                		jmp	COMEOI 
                                CM2ISR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Set OEM COM Buffer (size & location) 
                                ; On entry: CX = COM buffer segment 
                                ;	    DX = COM buffer size if ZF set 
                                ;	    ZF set   = use buffer size in DX 
                                ;	    ZF clear = use default buffer size 
                                ; 
                                ; On return: DX	= COM buffer size 
                                ;	     CF	set on error 
                                 
 0359                           SETCBF		proc near 
 0359  53                       		push	bx 
 035A  50                       		push	ax 
 035B  1E                       		push	ds 
 035C  56                       		push	si 
 035D  2E: 89 0E 0230 R         		mov	cs:CBFSEG, cx 
 0362  75 03                    		jnz	short HAVBSZ	; ZF set if COM	buffer size 
				was 
                                					; given	on the command line (/C:xxx) 
 0364  BA 0100                  		mov	dx, 256		; Default COM buffer size 
 0367                           HAVBSZ: 
 0367  33 F6                    		xor	si, si 
 0369  0B D2                    		or	dx, dx 
 036B  74 69                    		jz	short SCBFX	; Bail if zero buffer size 
 036D  81 FA 7F70               		cmp	dx, 7F70h	; Buffer size too big? 
 0371  76 03                    		jbe	short CKCOM1 
 0373  BA 7F70                  		mov	dx, 7F70h	; Maximum COM buffer size 
 0376                           CKCOM1: 
 0376  2E: 89 16 0232 R         		mov	cs:CBFSIZ, dx 
 037B  42                       		inc	dx 
 037C  8E DE                    		mov	ds, si 
                                		assume ds:nothing 
 037E  BB 01EC R                		mov	bx, offset CM1CTL 
 0381  A1 0400                  		mov	ax, ds:400h	; Read COM1 base from BDA 
 0384  3D 03F8                  		cmp	ax, 3F8h	; Does it match	the first UART? 
 0387  75 27                    		jnz	short CKCOM2 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-15
                                                            

 0389  2E: C7 47 1E 0030        		mov	word ptr cs:[bx+1Eh], 30h ; Address of IR
				Q4 vector 
 038F  2E: C6 47 1B EF          		mov	byte ptr cs:[bx+1Bh], 0EFh ; IRQ4 mask 
 0394  2E: C6 47 1C 10          		mov	byte ptr cs:[bx+1Ch], 10h ; IRQ4 bit 
 0399  2E: 89 07                		mov	cs:[bx], ax 
 039C  2E: 89 77 16             		mov	cs:[bx+16h], si 
 03A0  81 C6 0081               		add	si, 81h	; '�' 
 03A4  2E: 89 77 14             		mov	cs:[bx+14h], si 
 03A8  03 F2                    		add	si, dx 
 03AA  BB 020E R                		mov	bx, offset CM2CTL 
 03AD  A1 0402                  		mov	ax, ds:402h	; Read COM2 base from BDA 
 03B0                           CKCOM2: 
 03B0  3D 02F8                  		cmp	ax, 2F8h	; Is it	the second UART? 
 03B3  75 21                    		jnz	short SCBFX 
 03B5  2E: C7 47 1E 002C        		mov	word ptr cs:[bx+1Eh], 2Ch ; Address of IR
				Q3 vector 
 03BB  2E: C6 47 1B F7          		mov	byte ptr cs:[bx+1Bh], 0F7h ; IRQ3 mask 
 03C0  2E: C6 47 1C 08          		mov	byte ptr cs:[bx+1Ch], 8	; IRQ3 bit 
 03C5  2E: 89 07                		mov	cs:[bx], ax 
 03C8  2E: 89 77 16             		mov	cs:[bx+16h], si 
 03CC  81 C6 0081               		add	si, 81h	; '�' 
 03D0  2E: 89 77 14             		mov	cs:[bx+14h], si 
 03D4  03 F2                    		add	si, dx 
 03D6                           SCBFX: 
 03D6  8B D6                    		mov	dx, si 
 03D8  83 C2 0F                 		add	dx, 0Fh		; Round	up to next para 
 03DB  81 E2 FFF0               		and	dx, 0FFF0h 
 03DF  5E                       		pop	si 
 03E0  1F                       		pop	ds 
                                		assume ds:nothing 
 03E1  58                       		pop	ax 
 03E2  5B                       		pop	bx 
 03E3  F8                       		clc 
 03E4  C3                       		ret 
                                SETCBF		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                ; START	OF FUNCTION CHUNK FOR INICOM 
                                 
 03E5                           BADFNM: 
 03E5  B4 FF                    		mov	ah, -1		; Bad file name 
 03E7  E9 050B R                		jmp	INICMX 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 03EA                           COMERR: 
 03EA  B4 FE                    		mov	ah, -2 
 03EC  E9 050B R                		jmp	INICMX 
                                ; END OF FUNCTION CHUNK	FOR INICOM 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-16
                                                            

                                ; Machine dependent COM	OPEN routine 
                                 
 03EF                           INICOM		proc near 
                                 
 03EF  56                       		push	si 
 03F0  57                       		push	di 
 03F1  1E                       		push	ds 
 03F2  0E                       		push	cs 
 03F3  1F                       		pop	ds 
                                		assume ds:CSEG 
 03F4  8B F3                    		mov	si, bx 
 03F6  FC                       		cld 
 03F7  26: AC                   		lods	byte ptr es:[si] 
 03F9  8A E0                    		mov	ah, al 
 03FB  E8 06DB R                		call	CMPREP 
 03FE  0B D2                    		or	dx, dx 
 0400  74 E8                    		jz	short COMERR 
 0402  26: AD                   		lods	word ptr es:[si] 
 0404  BF 01BC R                		mov	di, offset BAUDTB 
 0407  B9 000A                  		mov	cx, 0Ah 
 040A  06                       		push	es 
 040B  0E                       		push	cs 
 040C  07                       		pop	es 
                                		assume es:CSEG 
 040D  F2/ AF                   		repne scasw 
 040F  07                       		pop	es 
                                		assume es:nothing 
 0410  75 D3                    		jnz	short BADFNM 
 0412  83 C7 12                 		add	di, 12h 
 0415  83 C2 03                 		add	dx, 3 
 0418  B0 80                    		mov	al, 80h	; '�' 
 041A  EE                       		out	dx, al 
 041B  83 EA 03                 		sub	dx, 3 
 041E  8B 05                    		mov	ax, [di] 
 0420  EE                       		out	dx, al 
 0421  42                       		inc	dx 
 0422  8A C4                    		mov	al, ah 
 0424  EE                       		out	dx, al 
 0425  83 C2 02                 		add	dx, 2 
 0428  26: AC                   		lods	byte ptr es:[si] 
 042A  2C 04                    		sub	al, 4 
 042C  8A E0                    		mov	ah, al 
 042E  72 B5                    		jb	short BADFNM 
 0430  74 02                    		jz	short loc_5418 
 0432  FE C8                    		dec	al 
                                 
 0434                           loc_5418: 
 0434  3C 03                    		cmp	al, 3 
 0436  77 AD                    		ja	short BADFNM 
 0438  8A C8                    		mov	cl, al 
 043A  26: AC                   		lods	byte ptr es:[si] 
 043C  75 08                    		jnz	short loc_542A 
 043E  3C 02                    		cmp	al, 2 
 0440  74 04                    		jz	short loc_542A 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-17
                                                            

 0442  0A C0                    		or	al, al 
 0444  75 9F                    		jnz	short BADFNM 
                                 
 0446                           loc_542A: 
 0446  0A E0                    		or	ah, al 
 0448  74 9B                    		jz	short BADFNM 
 044A  FE C8                    		dec	al 
 044C  78 0B                    		js	short loc_543D 
 044E  B4 00                    		mov	ah, 0 
 0450  53                       		push	bx 
 0451  BB 01E4 R                		mov	bx, offset masks? 
 0454  03 D8                    		add	bx, ax 
 0456  0A 0F                    		or	cl, [bx] 
 0458  5B                       		pop	bx 
                                 
 0459                           loc_543D: 
 0459  26: AC                   		lods	byte ptr es:[si] 
 045B  0A C0                    		or	al, al 
 045D  74 03                    		jz	short loc_5446 
 045F  80 C9 04                 		or	cl, 4 
                                 
 0462                           loc_5446: 
 0462  8A C1                    		mov	al, cl 
 0464  EE                       		out	dx, al 
 0465  26: AD                   		lods	word ptr es:[si] 
 0467  B1 00                    		mov	cl, 0 
 0469  89 47 02                 		mov	[bx+2],	ax 
 046C  0B C0                    		or	ax, ax 
 046E  74 03                    		jz	short loc_5457 
 0470  80 C9 80                 		or	cl, 80h 
                                 
 0473                           loc_5457: 
 0473  26: AD                   		lods	word ptr es:[si] 
 0475  89 47 04                 		mov	[bx+4],	ax 
 0478  0B C0                    		or	ax, ax 
 047A  74 03                    		jz	short loc_5463 
 047C  80 C9 10                 		or	cl, 10h 
                                 
 047F                           loc_5463: 
 047F  26: AD                   		lods	word ptr es:[si] 
 0481  89 47 06                 		mov	[bx+6],	ax 
 0484  0B C0                    		or	ax, ax 
 0486  74 03                    		jz	short loc_546F 
 0488  80 C9 20                 		or	cl, 20h 
                                 
 048B                           loc_546F: 
 048B  26: AC                   		lods	byte ptr es:[si] 
 048D  A8 02                    		test	al, 2 
 048F  B0 03                    		mov	al, 3 
 0491  74 02                    		jz	short loc_5479 
 0493  B0 01                    		mov	al, 1 
                                 
 0495                           loc_5479: 
 0495  42                       		inc	dx 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-18
                                                            

 0496  EE                       		out	dx, al 
 0497  32 C0                    		xor	al, al 
 0499  88 4F 1A                 		mov	[bx+1Ah], cl 
 049C  88 47 18                 		mov	[bx+18h], al 
 049F  C7 47 08 0000            		mov	word ptr [bx+8], 0 
 04A4  C7 47 0A 0000            		mov	word ptr [bx+0Ah], 0 
 04A9  C7 47 0C 0000            		mov	word ptr [bx+0Ch], 0 
 04AE  C7 47 0E 0000            		mov	word ptr [bx+0Eh], 0 
 04B3  83 7F 10 00              		cmp	word ptr [bx+10h], 0 
 04B7  75 3F                    		jnz	short loc_54DC 
 04B9  83 EA 04                 		sub	dx, 4 
 04BC  1E                       		push	ds 
 04BD  33 C0                    		xor	ax, ax 
 04BF  8E D8                    		mov	ds, ax 
 04C1  2E: 8B 77 1E             		mov	si, cs:[bx+1Eh]	; IVT manipulation! 
 04C5  8B 04                    		mov	ax, [si] 
 04C7  2E: 89 47 10             		mov	cs:[bx+10h], ax 
 04CB  8B 44 02                 		mov	ax, [si+2] 
 04CE  2E: 89 47 12             		mov	cs:[bx+12h], ax 
 04D2  2E: 8B 47 20             		mov	ax, cs:[bx+20h] 
 04D6  89 04                    		mov	[si], ax 
 04D8  8C C8                    		mov	ax, cs 
 04DA  89 44 02                 		mov	[si+2],	ax 
 04DD  1F                       		pop	ds 
                                		assume ds:nothing 
 04DE  42                       		inc	dx 
 04DF  42                       		inc	dx 
 04E0  EC                       		in	al, dx 
 04E1  4A                       		dec	dx 
 04E2  4A                       		dec	dx 
 04E3  EC                       		in	al, dx 
 04E4  83 C2 05                 		add	dx, 5 
 04E7  EC                       		in	al, dx 
 04E8  83 EA 04                 		sub	dx, 4 
 04EB  B0 0D                    		mov	al, 0Dh 
 04ED  EE                       		out	dx, al 
 04EE  E4 21                    		in	al, 21h		; Interrupt controller,	8259A. 
 04F0  22 47 1B                 		and	al, [bx+1Bh]	; Unmask IRQ 
 04F3  E6 21                    		out	21h, al		; Interrupt controller,	8259A. 
 04F5  83 C2 03                 		add	dx, 3 
                                 
 04F8                           loc_54DC: 
 04F8  EC                       		in	al, dx 
 04F9  0C 08                    		or	al, 8 
 04FB  EE                       		out	dx, al 
 04FC  42                       		inc	dx 
 04FD  42                       		inc	dx 
 04FE  FA                       		cli 
 04FF  EC                       		in	al, dx 
 0500  F6 D0                    		not	al 
 0502  22 C1                    		and	al, cl 
 0504  88 47 19                 		mov	[bx+19h], al 
 0507  FB                       		sti 
 0508  E8 0680 R                		call	sub_5665 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-19
                                                            

                                 
 050B                           INICMX: 
 050B  1F                       		pop	ds 
 050C  5F                       		pop	di 
 050D  5E                       		pop	si 
 050E  C3                       		ret 
                                INICOM		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Read Char from COM to	[AL] if	ready 
                                 
 050F                           RECCOM		proc near 
 050F  53                       		push	bx 
 0510  51                       		push	cx 
 0511  52                       		push	dx 
 0512  56                       		push	si 
 0513  57                       		push	di 
 0514  1E                       		push	ds 
 0515  0E                       		push	cs 
 0516  1F                       		pop	ds 
                                		assume ds:CSEG 
 0517  50                       		push	ax 
 0518  E8 06DB R                		call	CMPREP 
 051B  B1 00                    		mov	cl, 0 
 051D  E8 065E R                		call	sub_5643 
 0520  59                       		pop	cx 
 0521  8A C1                    		mov	al, cl 
 0523  75 23                    		jnz	short loc_552C 
 0525  FA                       		cli 
 0526  8B 77 08                 		mov	si, [bx+8] 
 0529  3B 77 0A                 		cmp	si, [bx+0Ah] 
 052C  74 1A                    		jz	short loc_552C 
 052E  46                       		inc	si 
 052F  3B 36 0232 R             		cmp	si, CBFSIZ 
 0533  76 02                    		jbe	short loc_551B 
 0535  33 F6                    		xor	si, si 
                                 
 0537                           loc_551B: 
 0537  89 77 08                 		mov	[bx+8],	si 
 053A  8B 5F 14                 		mov	bx, [bx+14h] 
 053D  8B 3E 0230 R             		mov	di, CBFSEG 
 0541  8E DF                    		mov	ds, di 
                                		assume ds:nothing 
 0543  8A 00                    		mov	al, [bx+si] 
 0545  FB                       		sti 
 0546  0B D2                    		or	dx, dx 
                                 
 0548                           loc_552C: 
 0548  1F                       		pop	ds 
 0549  5F                       		pop	di 
 054A  5E                       		pop	si 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-20
                                                            

 054B  5A                       		pop	dx 
 054C  59                       		pop	cx 
 054D  5B                       		pop	bx 
 054E  C3                       		ret 
                                RECCOM		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Send [AL] to COM 
                                 
 054F                           SNDCOM		proc near 
 054F  53                       		push	bx 
 0550  51                       		push	cx 
 0551  52                       		push	dx 
 0552  56                       		push	si 
 0553  57                       		push	di 
 0554  1E                       		push	ds 
 0555  0E                       		push	cs 
 0556  1F                       		pop	ds 
                                		assume ds:CSEG 
 0557  50                       		push	ax 
 0558  E8 06DB R                		call	CMPREP 
 055B  8A 4F 1A                 		mov	cl, [bx+1Ah] 
 055E  E8 065E R                		call	sub_5643 
 0561  59                       		pop	cx 
 0562  75 3B                    		jnz	short SNDCMX 
                                 
 0564                           SNDLOP: 
 0564  FA                       		cli 
 0565  8B 77 0E                 		mov	si, [bx+0Eh] 
 0568  46                       		inc	si 
 0569  81 FE 0080               		cmp	si, 80h	; '�' 
 056D  76 02                    		jbe	short loc_5555 
 056F  33 F6                    		xor	si, si 
                                 
 0571                           loc_5555: 
 0571  3B 77 0C                 		cmp	si, [bx+0Ch] 
 0574  74 23                    		jz	short loc_557D 
 0576  1E                       		push	ds 
 0577  53                       		push	bx 
 0578  89 77 0E                 		mov	[bx+0Eh], si 
 057B  8B 5F 16                 		mov	bx, [bx+16h] 
 057E  8B 3E 0230 R             		mov	di, CBFSEG 
 0582  8E DF                    		mov	ds, di 
                                		assume ds:nothing 
 0584  88 08                    		mov	[bx+si], cl 
 0586  5B                       		pop	bx 
 0587  1F                       		pop	ds 
 0588  42                       		inc	dx 
 0589  EC                       		in	al, dx 
 058A  A8 02                    		test	al, 2 
 058C  75 11                    		jnz	short SNDCMX 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-21
                                                            

 058E  F6 47 19 02              		test	byte ptr [bx+19h], 2 
 0592  75 0B                    		jnz	short SNDCMX 
 0594  B0 0F                    		mov	al, 0Fh 
 0596  EE                       		out	dx, al 
 0597  EB 06                    		jmp	short SNDCMX 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0599                           loc_557D: 
 0599  FB                       		sti 
 059A  E8 06C5 R                		call	COMDLY 
 059D  74 C5                    		jz	short SNDLOP	; Next char unless Ctrl+Break
				 pressed 
 059F                           SNDCMX: 
 059F  FB                       		sti 
 05A0  1F                       		pop	ds 
 05A1  5F                       		pop	di 
 05A2  5E                       		pop	si 
 05A3  5A                       		pop	dx 
 05A4  59                       		pop	cx 
 05A5  5B                       		pop	bx 
 05A6  C3                       		ret 
                                SNDCOM		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Get COM bytes	in queue 
                                ;	 On entry: AH =	unit number 
                                ;	 On return: DX=bytes in	queue 
                                ;		    CX=free bytes in queue 
                                ;		    AH = non-zero if error 
                                 
 05A7                           STACOM		proc near 
 05A7  53                       		push	bx 
 05A8  56                       		push	si 
 05A9  57                       		push	di 
 05AA  1E                       		push	ds 
 05AB  0E                       		push	cs 
 05AC  1F                       		pop	ds 
                                		assume ds:CSEG 
 05AD  E8 06DB R                		call	CMPREP 
 05B0  32 E4                    		xor	ah, ah 
 05B2  8B 57 0A                 		mov	dx, [bx+0Ah] 
 05B5  3B 57 08                 		cmp	dx, [bx+8] 
 05B8  73 05                    		jnb	short loc_55A3 
 05BA  03 16 0232 R             		add	dx, CBFSIZ 
 05BE  42                       		inc	dx 
                                 
 05BF                           loc_55A3: 
 05BF  2B 57 08                 		sub	dx, [bx+8] 
 05C2  8B 0E 0232 R             		mov	cx, CBFSIZ 
 05C6  2B CA                    		sub	cx, dx 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-22
                                                            

 05C8  81 FA 00FF               		cmp	dx, 0FFh 
 05CC  76 03                    		jbe	short loc_55B5 
 05CE  BA 00FF                  		mov	dx, 0FFh 
                                 
 05D1                           loc_55B5: 
 05D1  1F                       		pop	ds 
                                		assume ds:nothing 
 05D2  5F                       		pop	di 
 05D3  5E                       		pop	si 
 05D4  5B                       		pop	bx 
 05D5  C3                       		ret 
                                STACOM		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 05D6                           SNDLPT		proc near 
 05D6  51                       		push	cx 
 05D7  52                       		push	dx 
 05D8  33 D2                    		xor	dx, dx 
 05DA  86 D4                    		xchg	dl, ah 
 05DC  CD 17                    		int	17h 
 05DE  80 E4 01                 		and	ah, 1 
 05E1  74 18                    		jz	short loc_55DF 
 05E3  B4 02                    		mov	ah, 2 
 05E5  CD 17                    		int	17h		; PRINTER - GET	STATUS 
                                					; DX = printer port (0-3) 
                                					; Return: AH = status 
 05E7  80 FC 28                 		cmp	ah, 28h	; '(' 
 05EA  75 04                    		jnz	short loc_55D4 
 05EC  B4 03                    		mov	ah, 3 
 05EE  EB 0B                    		jmp	short loc_55DF 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 05F0                           loc_55D4: 
 05F0  80 FC 08                 		cmp	ah, 8 
 05F3  75 04                    		jnz	short loc_55DD 
 05F5  B4 04                    		mov	ah, 4 
 05F7  EB 02                    		jmp	short loc_55DF 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 05F9                           loc_55DD: 
 05F9  B4 02                    		mov	ah, 2 
                                 
 05FB                           loc_55DF: 
 05FB  5A                       		pop	dx 
 05FC  59                       		pop	cx 
 05FD  C3                       		ret 
                                SNDLPT		endp 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-23
                                                            

                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Terminate COM	channel 
                                 
 05FE                           TRMCOM		proc near 
 05FE  53                       		push	bx 
 05FF  51                       		push	cx 
 0600  52                       		push	dx 
 0601  56                       		push	si 
 0602  57                       		push	di 
 0603  1E                       		push	ds 
 0604  0E                       		push	cs 
 0605  1F                       		pop	ds 
                                		assume ds:CSEG 
 0606  E8 06DB R                		call	CMPREP 
 0609  0B D2                    		or	dx, dx 
 060B  75 04                    		jnz	short loc_55F5 
 060D  B4 FF                    		mov	ah, 0FFh 
 060F  EB 46                    		jmp	short loc_563C 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0611                           loc_55F5: 
 0611  42                       		inc	dx 
 0612  B9 0096                  		mov	cx, 150 
 0615                           loc_55F9: 
 0615  EC                       		in	al, dx 
 0616  A8 02                    		test	al, 2 
 0618  74 07                    		jz	short loc_5606 
 061A  E8 06C5 R                		call	COMDLY 
 061D  74 F6                    		jz	short loc_55F9 
 061F  EB 07                    		jmp	short loc_560D 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0621                           loc_5606: 
 0621  E8 06C5 R                		call	COMDLY 
 0624  75 02                    		jnz	short loc_560D 
 0626  E2 F9                    		loop	loc_5606 
 0628                           loc_560D: 
 0628  B0 00                    		mov	al, 0 
 062A  EE                       		out	dx, al 
 062B  83 C2 03                 		add	dx, 3 
 062E  EE                       		out	dx, al 
 062F  E4 21                    		in	al, 21h		; Interrupt controller,	8259A. 
 0631  0A 47 1C                 		or	al, [bx+1Ch] 
 0634  E6 21                    		out	21h, al		; Interrupt controller,	8259A. 
 0636  33 C0                    		xor	ax, ax 
 0638  8E D8                    		mov	ds, ax		; IVT manipulation! 
 063A  2E: 8B 77 1E             		mov	si, cs:[bx+1Eh] 
 063E  2E: 8B 47 10             		mov	ax, cs:[bx+10h] 
 0642  89 04                    		mov	[si], ax 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-24
                                                            

 0644  2E: 8B 47 12             		mov	ax, cs:[bx+12h] 
 0648  89 44 02                 		mov	[si+2],	ax 
 064B  33 C0                    		xor	ax, ax 
 064D  2E: 89 47 10             		mov	cs:[bx+10h], ax 
 0651  2E: 89 47 12             		mov	cs:[bx+12h], ax 
 0655  B4 00                    		mov	ah, 0 
 0657                           loc_563C: 
 0657  1F                       		pop	ds 
                                		assume ds:nothing 
 0658  5F                       		pop	di 
 0659  5E                       		pop	si 
 065A  5A                       		pop	dx 
 065B  59                       		pop	cx 
 065C  5B                       		pop	bx 
 065D  C3                       		ret 
                                TRMCOM		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 065E                           sub_5643	proc near 
 065E  FA                       		cli 
 065F  8A 47 18                 		mov	al, [bx+18h] 
 0662  C6 47 18 00              		mov	byte ptr [bx+18h], 0 
 0666  FB                       		sti 
 0667  0A C0                    		or	al, al 
 0669  75 04                    		jnz	short loc_5654 
 066B  E8 0680 R                		call	sub_5665 
 066E  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 066F                           loc_5654: 
 066F  B4 01                    		mov	ah, 1 
 0671  A8 01                    		test	al, 1 
 0673  75 08                    		jnz	short loc_5662 
 0675  B4 06                    		mov	ah, 6 
 0677  A8 02                    		test	al, 2 
 0679  75 02                    		jnz	short loc_5662 
 067B  B4 07                    		mov	ah, 7 
 067D                           loc_5662: 
 067D  0A E4                    		or	ah, ah 
 067F  C3                       		ret 
                                sub_5643	endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0680                           sub_5665	proc near 
 0680  FE C1                    		inc	cl 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-25
                                                            

 0682  55                       		push	bp 
 0683  8B 77 04                 		mov	si, [bx+4] 
 0686  8B EE                    		mov	bp, si 
 0688  8B 7F 02                 		mov	di, [bx+2] 
 068B  8B 77 06                 		mov	si, [bx+6] 
 068E                           loc_5673: 
 068E  8A 47 19                 		mov	al, [bx+19h] 
 0691  32 E4                    		xor	ah, ah 
 0693  22 C1                    		and	al, cl 
 0695  74 2A                    		jz	short loc_56A6 
 0697  A8 01                    		test	al, 1 
 0699  74 04                    		jz	short loc_5684 
 069B  B4 FF                    		mov	ah, 0FFh 
 069D  EB 22                    		jmp	short loc_56A6 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 069F                           loc_5684: 
 069F  A8 80                    		test	al, 80h 
 06A1  74 05                    		jz	short loc_568D 
 06A3  4F                       		dec	di 
 06A4  B4 05                    		mov	ah, 5 
 06A6  74 19                    		jz	short loc_56A6 
 06A8                           loc_568D: 
 06A8  A8 20                    		test	al, 20h 
 06AA  74 05                    		jz	short loc_5696 
 06AC  4E                       		dec	si 
 06AD  B4 04                    		mov	ah, 4 
 06AF  74 10                    		jz	short loc_56A6 
 06B1                           loc_5696: 
 06B1  A8 10                    		test	al, 10h 
 06B3  74 05                    		jz	short loc_569F 
 06B5  4D                       		dec	bp 
 06B6  B4 03                    		mov	ah, 3 
 06B8  74 07                    		jz	short loc_56A6 
 06BA                           loc_569F: 
 06BA  E8 06C5 R                		call	COMDLY 
 06BD  74 CF                    		jz	short loc_5673 
 06BF  B4 FF                    		mov	ah, 0FFh 
 06C1                           loc_56A6: 
 06C1  5D                       		pop	bp 
 06C2  0A E4                    		or	ah, ah 
 06C4  C3                       		ret 
                                sub_5665	endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 06C5                           COMDLY		proc near 
 06C5  50                       		push	ax 
 06C6  53                       		push	bx 
 06C7  51                       		push	cx 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-26
                                                            

 06C8  B9 00F2                  		mov	cx, 242 
 06CB                           DELAY: 
 06CB  E2 FE                    		loop	DELAY 
 06CD  59                       		pop	cx 
 06CE  33 C0                    		xor	ax, ax 
 06D0  1E                       		push	ds 
 06D1  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 06D3  3A 06 0471               		cmp	al, ds:471h	; Check	Ctrl+Break flag 
 06D7  1F                       		pop	ds 
                                		assume ds:nothing 
 06D8  5B                       		pop	bx 
 06D9  58                       		pop	ax 
 06DA  C3                       		ret 
                                COMDLY		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 06DB                           CMPREP		proc near 
 06DB  8A C4                    		mov	al, ah 
 06DD  D0 E0                    		shl	al, 1 
 06DF  B4 00                    		mov	ah, 0 
 06E1  56                       		push	si 
 06E2  BE 01E8 R                		mov	si, offset COMTBL 
 06E5  03 F0                    		add	si, ax 
 06E7  8B 1C                    		mov	bx, [si] 
 06E9  8B 17                    		mov	dx, [bx] 
 06EB  33 C0                    		xor	ax, ax 
 06ED  1E                       		push	ds 
 06EE  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 06F0  A2 0471                  		mov	ds:471h, al	; Zero out Ctrl+Break flag 
 06F3  1F                       		pop	ds 
                                		assume ds:nothing 
 06F4  5E                       		pop	si 
 06F5  C3                       		ret 
                                CMPREP		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                ; Start of another module? 
                                ;		align 8 
                                PUBLIC  SCNRST, GWINI, GWTERM, KEYINP, INKMAP, 
				INFMAP, EDTMAP, MAPSUP 
                                PUBLIC  SCROUT, SCRINP, SCROLL, CLRSCN, CLREOL 
                                PUBLIC  CSRDSP, CSRATR, LCPY, SCRATR, SCRSTT, S
				ETCLR, SWIDTH 
                                 
 06F6  00                       EVTSET		db 0 
 06F7  00                       LSTRIG		db 0 
 06F8  FF                       BRKFLG		db -1 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-27
                                                            

                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 06F9                           TIMISR		proc far 
 06F9  2E: F6 06 06F6 R 01      		test	cs:EVTSET, 1	; Light	pen enabled? 
 06FF  74 03                    		jz	short loc_56EE 
 0701  E8 1310 R                		call	LPENQR 
                                 
 0704                           loc_56EE: 
 0704  50                       		push	ax 
 0705  52                       		push	dx 
 0706  BA 0201                  		mov	dx, 201h 
 0709  EC                       		in	al, dx		; Game I/O port 
                                					; bits 0-3: Coordinates	(resistive, time-d
				ependent inputs) 
                                					; bits 4-7: Buttons/Triggers (digital inpu
				ts) 
 070A  F6 D0                    		not	al 
 070C  2E: 08 06 06F7 R         		or	cs:LSTRIG, al 
 0711  24 F0                    		and	al, 0F0h 
 0713  2E: 08 06 12FB R         		or	cs:ISREVT, al 
 0718  5A                       		pop	dx 
 0719  58                       		pop	ax 
 071A  CF                       		iret 
                                TIMISR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 071B                           CTLBRK		proc far 
 071B  2E: C6 06 06F8 R 00      		mov	cs:BRKFLG, 0	; 0 = Ctrl+Break, -1 = no br
				eak 
 0721  CF                       		iret 
                                CTLBRK		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Reset	screen related state 
                                 
 0722                           SCNRST		proc near 
 0722  B4 00                    		mov	ah, 0 
 0724  A0 000B R                		mov	al, ds:var_63b 
 0727  B1 19                    		mov	cl, 25 
 0729  E8 0000 E                		call	SCNSWI 
 072C  E8 0000 E                		call	SCNCLR 
 072F  E8 0000 E                		call	GRPINI 
 0732  C3                       		ret 
                                SCNRST		endp 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-28
                                                            

                                 
                                ; ---------------------------------------------
				------------------------------ 
 0733  00                       EQUIP		db 0 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0734                           GWINI		proc near 
 0734  E8 0B26 R                		call	SCRSAV 
 0737  1E                       		push	ds 
 0738  33 C0                    		xor	ax, ax 
 073A  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 073C  A0 0410                  		mov	al, ds:410h	; Read equipment word (low by
				te) 
 073F  2E: A2 0733 R            		mov	cs:EQUIP, al 
 0743  1F                       		pop	ds 
                                		assume ds:nothing 
 0744  A0 000F R                		mov	al, ds:CVMODE 
 0747  A2 0000 R                		mov	ds:OVMODE, al 
 074A  A0 000E R                		mov	al, ds:var_63e 
 074D  A2 000B R                		mov	ds:var_63b, al 
 0750  80 3E 000F R 07          		cmp	byte ptr ds:CVMODE, 7 
 0755  75 06                    		jnz	short VIDPGE 
 0757  C7 06 0013 R 0C0D        		mov	word ptr ds:var_643, 0C0Dh 
 075D                           VIDPGE: 
 075D  B8 0500                  		mov	ax, 500h 
 0760  CD 10                    		int	10h		; - VIDEO - SELECT DISPLAY PAGE 
                                					; AL = display page, 0-7  for modes 0 &	1,
				 0-3	for modes 2 & 3 
 0762  33 D2                    		xor	dx, dx 
 0764                           INILPT: 
 0764  B4 01                    		mov	ah, 1 
 0766  52                       		push	dx 
 0767  CD 17                    		int	17h		; PRINTER - INITIALIZE 
                                					; DX = printer port (0-3) 
                                					; Return: AH = status 
 0769  5A                       		pop	dx 
 076A  42                       		inc	dx 
 076B  83 FA 03                 		cmp	dx, 3 
 076E  75 F4                    		jnz	short INILPT 
 0770  8C C8                    		mov	ax, cs		; Set segments for interrupt vect
				ors 
 0772  A3 0003 R                		mov	ds:CBRKSG, ax 
 0775  A3 0007 R                		mov	ds:TIMRSG, ax 
 0778  E8 079C R                		call	SWPVEC		; Install INT 1Bh/1Ch vectors 
 077B  1E                       		push	ds 
 077C  33 C0                    		xor	ax, ax 
 077E  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 0780  58                       		pop	ax 
 0781  50                       		push	ax 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-29
                                                            

 0782  A3 0510                  		mov	ds:510h, ax     ; Set initial BASIC data 
				segment 
 0785  A0 0300                  		mov	al, ds:300h 
 0788  1F                       		pop	ds 
                                		assume ds:nothing 
 0789  3C 00                    		cmp	al, 0 
 078B  74 0C                    		jz	short GWINIX 
 078D  BB 0000 E                		mov	bx, offset SPCTAB 
 0790  83 C3 39                 		add	bx, 39h		; Offset of PLAYS entry	in STMDS
				X 
 0793  B8 0000 E                		mov	ax, offset SNERR ; Disable PLAY	statement
				? 
 0796  2E: 89 07                		mov	cs:[bx], ax 
 0799                           GWINIX: 
 0799  E9 0B67 R                		jmp	DOCLRS 
                                GWINI		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 079C                           SWPVEC		proc near 
 079C  B9 0004                  		mov	cx, 4		; 4 words (two vectors) 
 079F  1E                       		push	ds 
 07A0  33 C0                    		xor	ax, ax 
 07A2  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 07A4  BE 006C                  		mov	si, 6Ch		; Offset of vector 1Bh (Ctrl+Bre
				ak) 
 07A7  BF 0001 R                		mov	di, OFFSET CBKINT 
 07AA  FA                       		cli 
 07AB  FC                       		cld 
 07AC                           DOVEC: 
 07AC  26: 8B 05                		mov	ax, es:[di]	; Read in new offset 
 07AF  87 04                    		xchg	ax, [si]	; Swap in new offset 
 07B1  AB                       		stosw			; Save old offset 
 07B2  46                       		inc	si		; Skip over segment 
 07B3  46                       		inc	si 
 07B4  E2 F6                    		loop	DOVEC 
 07B6  FB                       		sti 
 07B7  1F                       		pop	ds 
                                		assume ds:nothing 
 07B8  C3                       		ret 
                                SWPVEC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 07B9                           GWTERM		proc near 
 07B9  E8 0B26 R                		call	SCRSAV 
 07BC  1E                       		push	ds 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-30
                                                            

 07BD  33 C0                    		xor	ax, ax 
 07BF  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 07C1  2E: A0 0733 R            		mov	al, cs:EQUIP	; Restore equipment word 
 07C5  A2 0410                  		mov	ds:410h, al 
 07C8  1F                       		pop	ds 
                                		assume ds:nothing 
 07C9  B0 FF                    		mov	al, -1 
 07CB  E8 15B5 R                		call	DONOTE 
 07CE  B9 0607                  		mov	cx, 607h	; 8x8 cursor 
 07D1  80 3E 000F R 07          		cmp	byte ptr ds:CVMODE, 7 
 07D6  75 03                    		jnz	short SETCSR 
 07D8  B9 0C0D                  		mov	cx, 0C0Dh	; 8x14 cursor 
 07DB                           SETCSR: 
 07DB  B4 01                    		mov	ah, 1 
 07DD  CD 10                    		int	10h		; - VIDEO - SET	CURSOR CHARACTERISTI
				CS 
                                					; CH bits 0-4 =	start line for cursor in c
				haracter cell 
                                					; bits 5-6 = blink attribute 
                                					; CL bits 0-4 =	end line for cursor in cha
				racter cell 
 07DF  80 3E 000F R 07          		cmp	byte ptr ds:CVMODE, 7 
 07E4  74 19                    		jz	short loc_57E9 
 07E6  33 C0                    		xor	ax, ax 
 07E8  A0 0000 R                		mov	al, ds:OVMODE 
 07EB  3A 26 000D R             		cmp	ah, ds:VISVPG 
 07EF  75 0C                    		jnz	short SETVMD 
 07F1  3A 26 0009 R             		cmp	ah, ds:CVPAGE 
 07F5  75 06                    		jnz	short SETVMD 
 07F7  3A 06 000F R             		cmp	al, ds:CVMODE 
 07FB  74 02                    		jz	short loc_57E9 
 07FD                           SETVMD: 
 07FD  CD 10                    		int	10h		; - VIDEO - SET	VIDEO MODE 
                                					; AL = mode 
 07FF                           loc_57E9: 
 07FF  C6 06 0016 R 07          		mov	byte ptr ds:var_646, 7 
 0804  C6 06 000A R 00          		mov	byte ptr ds:var_63a, 0 
 0809  BA 1700                  		mov	dx, 1700h 
 080C  89 16 001E R             		mov	ds:var_64e, dx 
 0810  B7 00                    		mov	bh, 0 
 0812  B4 02                    		mov	ah, 2 
 0814  CD 10                    		int	10h		; - VIDEO - SET	CURSOR POSITION 
                                					; DH,DL	= row, column (0,0 = upper left) 
                                					; BH = page number 
 0816  E8 079C R                		call	SWPVEC 
 0819  E9 0A4D R                		jmp	SCRRST 
                                GWTERM		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Keyboard input routine 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-31
                                                            

                                ; On exit: 
                                ;   ZF set if key available 
                                ;   ZF clear if	no keyboard input 
                                ;   CF set if two bytes	available (AX) 
                                ;   CF clear if	one byte available (AL) 
                                 
 081C                           KEYINP		proc near 
 081C  06                       		push	es 
 081D  0E                       		push	cs 
 081E  07                       		pop	es 
                                		assume es:CSEG 
 081F  53                       		push	bx 
 0820  51                       		push	cx 
 0821  57                       		push	di 
 0822  FC                       		cld 
 0823  2E: 80 3E 06F8 R 00      		cmp	cs:BRKFLG, 0	; Zero if Ctrl+Break was sig
				naled 
 0829  75 14                    		jnz	short NOBRK 
 082B  2E: FE 0E 06F8 R         		dec	cs:BRKFLG	; Clear	Ctrl+Break flag 
 0830  B4 01                    		mov	ah, 1 
 0832  CD 16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CL
				EAR 
                                					; Return: ZF clear if character	in buffer 
                                					; AH = scan code, AL = character 
                                					; ZF set if no character in buffer 
 0834  74 04                    		jz	short CBREAK 
 0836  32 E4                    		xor	ah, ah 
 0838  CD 16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, 
				WAIT IF EMPTY 
                                					; Return: AH = scan code, AL = character 
 083A                           CBREAK: 
 083A  B8 FF03                  		mov	ax, 0FF03h	; CTLBRK aka Ctrl+Break 
 083D  EB 4A                    		jmp	short TWOKEY 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 083F                           NOBRK: 
 083F  B4 01                    		mov	ah, 1 
 0841  CD 16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CL
				EAR 
                                					; Return: ZF clear if character	in buffer 
                                					; AH = scan code, AL = character 
                                					; ZF set if no character in buffer 
 0843  74 21                    		jz	short KEYINX 
 0845  32 E4                    		xor	ah, ah 
 0847  CD 16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, 
				WAIT IF EMPTY 
                                					; Return: AH = scan code, AL = character 
 0849  0A C0                    		or	al, al 
 084B  74 1E                    		jz	short NONASC 
 084D  B4 00                    		mov	ah, 0 
 084F  3C FE                    		cmp	al, 0FEh ; '�' 
 0851  72 08                    		jb	short CHKESC 
 0853  B4 FF                    		mov	ah, 0FFh 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-32
                                                            

 0855  75 32                    		jnz	short TWOKEY 
 0857  B0 18                    		mov	al, 18h 
 0859  EB 2E                    		jmp	short TWOKEY 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 085B                           CHKESC: 
 085B  3C 1B                    		cmp	al, 1Bh		; ESC key? 
 085D  75 05                    		jnz	short ONEKEY 
 085F  B8 FF15                  		mov	ax, 0FF15h 
 0862  EB 25                    		jmp	short TWOKEY 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0864                           ONEKEY: 
 0864  0B E4                    		or	sp, sp 
 0866                           KEYINX: 
 0866  5F                       		pop	di 
 0867  59                       		pop	cx 
 0868  5B                       		pop	bx 
 0869  07                       		pop	es 
                                		assume es:nothing 
 086A  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 086B                           NONASC: 
 086B  86 C4                    		xchg	al, ah 
 086D  BF 08A7 R                		mov	di, offset SCNXLT 
 0870  B9 0039                  		mov	cx, 57 
 0873  FC                       		cld 
 0874  F2/ AE                   		repne scasb 
 0876  75 16                    		jnz	short NOTTAB 
 0878  81 EF 08A7 R             		sub	di, offset SCNXLT 
 087C  8B C7                    		mov	ax, di 
 087E  3D 0020                  		cmp	ax, 20h 
 0881  B4 FF                    		mov	ah, 0FFh 
 0883  72 04                    		jb	short TWOKEY 
 0885  04 21                    		add	al, 21h	; '!' 
 0887                           loc_5871: 
 0887  B4 80                    		mov	ah, 80h 
 0889                           TWOKEY: 
 0889  0B E4                    		or	sp, sp 
 088B  F9                       		stc 
 088C  EB D8                    		jmp	short KEYINX 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 088E                           NOTTAB: 
 088E  3C 3B                    		cmp	al, 3Bh	; ';' 
 0890  72 08                    		jb	short loc_5884 
 0892  3C 45                    		cmp	al, 45h	; 'E' 
 0894  73 04                    		jnb	short loc_5884 
 0896  2C 1B                    		sub	al, 1Bh 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-33
                                                            

 0898  EB ED                    		jmp	short loc_5871 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 089A                           loc_5884: 
 089A  3C 53                    		cmp	al, 53h	; 'S' 
 089C  8B D0                    		mov	dx, ax 
 089E  B0 FE                    		mov	al, 0FEh 
 08A0  75 C2                    		jnz	short ONEKEY 
 08A2  B8 FF7F                  		mov	ax, 0FF7Fh 
 08A5  EB E2                    		jmp	short TWOKEY 
                                KEYINP		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 08A7  FA 73                    SCNXLT		db 0FAh, 73h, 2	dup(0FAh), 75h,	74h, 4 
				dup(0F9h), 47h 
       0002[                    SCNXLT		db 0FAh, 73h, 2	dup(0FAh), 75h,	74h, 4 
				dup(0F9h), 47h 
            FA                  
                         ]      
       0004[   75 74            
            F9                  
                         ]      
               47               
 08B2  77 F9 4F F9              		db 77h,	0F9h, 4Fh, 0F9h, 2 dup(0FAh), 52h, 2 
				dup(0FAh) 
       0002[                    		db 77h,	0F9h, 4Fh, 0F9h, 2 dup(0FAh), 52h, 2 
				dup(0FAh) 
            FA                  
                         ]      
       0002[   52               
            FA                  
                         ]      
                                
 08BB  F9                       		db 0F9h, 2 dup(0FAh), 0FEh, 3 dup(0FAh), 4Dh,
				 4Bh, 48h 
       0002[                    		db 0F9h, 2 dup(0FAh), 0FEh, 3 dup(0FAh), 4Dh,
				 4Bh, 48h 
            FA                  
                         ]      
       0003[   FE               
            FA                  
                         ]      
               4D 4B 48         
 08C5  50 1E 30 2E 20 12 21     		db 50h,	1Eh, 30h, 2Eh, 20h, 12h, 21h, 22h, 23
				h,	17h, 24h 
       22 23 17 24              
 08D0  25 26 32 31 18 19 10     		db 25h,	26h, 32h, 31h, 18h, 19h, 10h, 13h, 1F
				h,	14h, 16h 
       13 1F 14 16              
 08DB  2F 11 2D 15 2C           		db 2Fh,	11h, 2Dh, 15h, 2Ch 
                                 
                                ; =============== S U B	R O U T	I N E =========
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-34
                                                            

				============================== 
                                 
                                ; OEM map routine for INKEY$ 
                                 
 08E0                           INKMAP		proc near 
 08E0  53                       		push	bx 
 08E1  72 11                    		jb	short loc_58DE 
 08E3  3C FE                    		cmp	al, 0FEh ; '�' 
 08E5  75 09                    		jnz	short loc_58DA 
 08E7  8B C2                    		mov	ax, dx 
 08E9                           loc_58D3: 
 08E9  B4 00                    		mov	ah, 0 
 08EB  0B E4                    		or	sp, sp 
 08ED  F9                       		stc 
 08EE  5B                       		pop	bx 
 08EF  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 08F0                           loc_58DA: 
 08F0  0B E4                    		or	sp, sp 
 08F2                           loc_58DC: 
 08F2  5B                       		pop	bx 
 08F3  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 08F4                           loc_58DE: 
 08F4  3C FF                    		cmp	al, 0FFh 
 08F6  74 F8                    		jz	short loc_58DA 
 08F8  3C 15                    		cmp	al, 15h 
 08FA  75 04                    		jnz	short loc_58EA 
 08FC  B0 1B                    		mov	al, 1Bh 
 08FE  EB F0                    		jmp	short loc_58DA 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0900                           loc_58EA: 
 0900  3C 7F                    		cmp	al, 7Fh	; '' 
 0902  75 04                    		jnz	short loc_58F2 
 0904  B0 53                    		mov	al, 53h	; 'S' 
 0906  EB E1                    		jmp	short loc_58D3 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0908                           loc_58F2: 
 0908  3C 20                    		cmp	al, 20h	; ' ' 
 090A  73 14                    		jnb	short loc_590A 
 090C  BB 08A6 R                		mov	bx, offset SCNXLT-1 
 090F  B4 00                    		mov	ah, 0 
 0911  03 D8                    		add	bx, ax 
 0913  2E: 8A 07                		mov	al, cs:[bx] 
 0916  3C FA                    		cmp	al, 0FAh ; '�' 
 0918  74 D8                    		jz	short loc_58DC 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-35
                                                            

 091A  3C FE                    		cmp	al, 0FEh ; '�' 
 091C  72 CB                    		jb	short loc_58D3 
 091E  EB D0                    		jmp	short loc_58DA 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0920                           loc_590A: 
 0920  3C 2A                    		cmp	al, 2Ah	; '*' 
 0922  73 04                    		jnb	short loc_5912 
 0924  04 1B                    		add	al, 1Bh 
 0926  EB C1                    		jmp	short loc_58D3 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0928                           loc_5912: 
 0928  3C 41                    		cmp	al, 'A' 
 092A  72 12                    		jb	short loc_5928 
 092C  3C 5B                    		cmp	al, 5Bh	; '[' 
 092E  73 0E                    		jnb	short loc_5928 
 0930  2C 41                    		sub	al, 'A' 
 0932  B4 00                    		mov	ah, 0 
 0934  BB 08C6 R                		mov	bx, (offset SCNXLT+1Fh) 
 0937  03 D8                    		add	bx, ax 
 0939  2E: 8A 07                		mov	al, cs:[bx] 
 093C  EB AB                    		jmp	short loc_58D3 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 093E                           loc_5928: 
 093E  3A C0                    		cmp	al, al 
 0940  EB B0                    		jmp	short loc_58DC 
                                INKMAP		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; OEM fixed length input map routine 
                                 
 0942                           INFMAP		proc near 
 0942  E8 08E0 R                		call	INKMAP 
 0945  73 02                    		jnb	short INMAPX 
 0947  B0 00                    		mov	al, 0 
 0949                           INMAPX: 
 0949  F8                       		clc 
 094A  C3                       		ret 
                                INFMAP		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Map edit function/output character code 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-36
                                                            

 094B                           EDTMAP		proc near 
 094B  C6 06 0011 R 00          		mov	byte ptr ds:var_641, 0 
 0950  3D 0003                  		cmp	ax, 3 
 0953  74 44                    		jz	short loc_5983 
 0955  80 FC FF                 		cmp	ah, 0FFh 
 0958  75 19                    		jnz	short loc_595D 
 095A  3C 18                    		cmp	al, 18h 
 095C  75 05                    		jnz	short loc_594D 
 095E  B8 00FE                  		mov	ax, 0FEh 
 0961  EB 3C                    		jmp	short loc_5989 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0963                           loc_594D: 
 0963  3C FF                    		cmp	al, 0FFh 
 0965  75 32                    		jnz	short loc_5983 
 0967  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 096C  74 2B                    		jz	short loc_5983 
 096E  B8 0020                  		mov	ax, ' ' 
 0971  EB 2C                    		jmp	short loc_5989 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0973                           loc_595D: 
 0973  3C 1B                    		cmp	al, 1Bh 
 0975  75 04                    		jnz	short loc_5965 
 0977  B0 15                    		mov	al, 15h 
 0979  EB 1E                    		jmp	short loc_5983 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 097B                           loc_5965: 
 097B  3C FF                    		cmp	al, 0FFh 
 097D  74 1A                    		jz	short loc_5983 
 097F  3C 7F                    		cmp	al, 7Fh 
 0981  74 16                    		jz	short loc_5983 
 0983  3C 20                    		cmp	al, ' ' 
 0985  73 18                    		jnb	short loc_5989 
 0987  50                       		push	ax 
 0988  53                       		push	bx 
 0989  B4 00                    		mov	ah, 0 
 098B  BB 08A6 R                		mov	bx, offset SCNXLT-1 
 098E  03 D8                    		add	bx, ax 
 0990  2E: 8A 07                		mov	al, cs:[bx] 
 0993  3C FA                    		cmp	al, 0FAh 
 0995  5B                       		pop	bx 
 0996  58                       		pop	ax 
 0997  74 08                    		jz	short loc_598B 
 0999                           loc_5983: 
 0999  B4 FF                    		mov	ah, 0FFh 
 099B  0B E4                    		or	sp, sp 
 099D  F9                       		stc 
 099E  C3                       		ret 
                                ; ---------------------------------------------
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-37
                                                            

				------------------------------ 
                                 
 099F                           loc_5989: 
 099F  0B E4                    		or	sp, sp 
 09A1                           loc_598B: 
 09A1  F8                       		clc 
 09A2  C3                       		ret 
                                EDTMAP		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 09A3  C3                       		ret 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Map super shift key to letter	in [AL]	and cou
				nt in [CH] 
                                 
 09A4                           MAPSUP		proc near 
 09A4  B5 01                    		mov	ch, 1 
 09A6  C3                       		ret 
                                MAPSUP		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Write	the character in [AL] at (DH,DL) 
                                 
 09A7                           SCROUT		proc near 
 09A7  50                       		push	ax 
 09A8  53                       		push	bx 
 09A9  51                       		push	cx 
 09AA  52                       		push	dx 
 09AB  81 EA 0101               		sub	dx, 101h 
 09AF  86 D6                    		xchg	dl, dh 
 09B1  50                       		push	ax 
 09B2  89 16 001E R             		mov	ds:var_64e, dx 
 09B6  8A 3E 0009 R             		mov	bh, ds:CVPAGE 
 09BA  B4 02                    		mov	ah, 2 
 09BC  CD 10                    		int	10h		; - VIDEO - SET	CURSOR POSITION 
                                					; DH,DL	= row, column (0,0 = upper left) 
                                					; BH = page number 
 09BE  58                       		pop	ax 
 09BF  B9 0001                  		mov	cx, 1 
 09C2  8A 1E 0016 R             		mov	bl, ds:var_646 
 09C6  B4 09                    		mov	ah, 9 
 09C8  CD 10                    		int	10h		; - VIDEO - WRITE ATTRIBUTES/CHARACT
				ERS	AT CURSOR POSITION 
                                					; AL = character, BH = display page 
                                					; BL = attributes of character (alpha mode
				s) or	color (graphics	modes) 
                                					; CX = number of times to write	character 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-38
                                                            

 09CA  F8                       		clc 
 09CB  5A                       		pop	dx 
 09CC  59                       		pop	cx 
 09CD  5B                       		pop	bx 
 09CE  58                       		pop	ax 
 09CF  C3                       		ret 
                                SCROUT		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 09D0                           SCRSV2		proc near 
 09D0  8F 06 0020 R             		pop	word ptr ds:var_650 
 09D4  52                       		push	dx 
 09D5  51                       		push	cx 
 09D6  53                       		push	bx 
 09D7  50                       		push	ax 
 09D8  9C                       		pushf 
 09D9  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 09DE  74 11                    		jz	short loc_59DB 
 09E0  80 3E 0010 R 01          		cmp	byte ptr ds:var_640, 1 
 09E5  74 07                    		jz	short loc_59D8 
 09E7  80 3E 0010 R 02          		cmp	byte ptr ds:var_640, 2 
 09EC  75 03                    		jnz	short loc_59DB 
 09EE                           loc_59D8: 
 09EE  E8 0C0D R                		call	sub_5BF8 
 09F1                           loc_59DB: 
 09F1  50                       		push	ax 
 09F2  81 EA 0101               		sub	dx, 101h 
 09F6  86 D6                    		xchg	dl, dh 
 09F8  89 16 001E R             		mov	ds:var_64e, dx 
 09FC  8A 3E 0009 R             		mov	bh, ds:CVPAGE 
 0A00  B4 02                    		mov	ah, 2 
 0A02  CD 10                    		int	10h		; - VIDEO - SET	CURSOR POSITION 
                                					; DH,DL	= row, column (0,0 = upper left) 
                                					; BH = page number 
 0A04  58                       		pop	ax 
 0A05  9D                       		popf 
 0A06  FF 36 0020 R             		push	word ptr ds:var_650 
 0A0A  C3                       		ret 
                                SCRSV2		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0A0B                           SCRINP		proc near 
                                					; SCNMRK:loc_987Dp ... 
 0A0B  E8 09D0 R                		call	SCRSV2 
 0A0E  9C                       		pushf 
 0A0F  B4 08                    		mov	ah, 8 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-39
                                                            

 0A11  CD 10                    		int	10h		; - VIDEO - READ ATTRIBUTES/CHARACTE
				R AT CURSOR	POSITION 
                                					; BH = display page 
                                					; Return: AL = character 
                                					; AH = attribute of character (alpha modes
				) 
 0A13  9D                       		popf 
 0A14  72 06                    		jb	short loc_5A06 
 0A16  0A C0                    		or	al, al 
 0A18  75 02                    		jnz	short loc_5A06 
 0A1A  B0 20                    		mov	al, ' ' 
 0A1C                           loc_5A06: 
 0A1C  32 E4                    		xor	ah, ah 
 0A1E  5A                       		pop	dx 
 0A1F  50                       		push	ax 
 0A20  EB 2B                    		jmp	short SCRRST 
                                SCRINP		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0A22                           SCROLL		proc near 
 0A22  E8 0B26 R                		call	SCRSAV 
 0A25  86 C4                    		xchg	al, ah 
 0A27  86 DF                    		xchg	bl, bh 
 0A29  86 CD                    		xchg	cl, ch 
 0A2B  BA 0101                  		mov	dx, 101h 
 0A2E  2B C2                    		sub	ax, dx 
 0A30  2B DA                    		sub	bx, dx 
 0A32  2B CA                    		sub	cx, dx 
 0A34  3A E7                    		cmp	ah, bh 
 0A36  75 34                    		jnz	short loc_5A57 
 0A38  3A D8                    		cmp	bl, al 
 0A3A  C6 06 000C R 01          		mov	byte ptr ds:var_63c, 1 
 0A3F  72 09                    		jb	short loc_5A35 
 0A41  C6 06 000C R FF          		mov	byte ptr ds:var_63c, 0FFh 
 0A46  02 C1                    		add	al, cl 
 0A48  02 D9                    		add	bl, cl 
 0A4A                           loc_5A35: 
 0A4A  E8 0ADA R                		call	DOSCRL 
 0A4D                           SCRRST: 
 0A4D  9C                       		pushf 
 0A4E  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 0A53  74 11                    		jz	short loc_5A51 
 0A55  80 3E 0010 R 01          		cmp	byte ptr ds:var_640, 1 
 0A5A  74 07                    		jz	short loc_5A4E 
 0A5C  80 3E 0010 R 02          		cmp	byte ptr ds:var_640, 2 
 0A61  75 03                    		jnz	short loc_5A51 
 0A63                           loc_5A4E: 
 0A63  E8 0C0D R                		call	sub_5BF8 
 0A66                           loc_5A51: 
 0A66  9D                       		popf 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-40
                                                            

 0A67  58                       		pop	ax		; Restores registers that SCRSAV save
				d 
 0A68  5B                       		pop	bx 
 0A69  59                       		pop	cx 
 0A6A  5A                       		pop	dx 
 0A6B  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0A6C                           loc_5A57: 
 0A6C  3A C3                    		cmp	al, bl 
 0A6E  75 2E                    		jnz	short loc_5A89 
 0A70  E8 0AC3 R                		call	SETVPG 
 0A73  3A FC                    		cmp	bh, ah 
 0A75  73 08                    		jnb	short loc_5A6A 
 0A77  03 C1                    		add	ax, cx 
 0A79  8B CB                    		mov	cx, bx 
 0A7B  B3 06                    		mov	bl, 6 
 0A7D  EB 05                    		jmp	short loc_5A6F 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0A7F                           loc_5A6A: 
 0A7F  91                       		xchg	ax, cx 
 0A80  03 C3                    		add	ax, bx 
 0A82  B3 07                    		mov	bl, 7 
 0A84                           loc_5A6F: 
 0A84  8B D0                    		mov	dx, ax 
 0A86  8A E3                    		mov	ah, bl 
 0A88  B0 01                    		mov	al, 1 
 0A8A  8A 3E 0016 R             		mov	bh, ds:var_646 
 0A8E  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 0A93  74 02                    		jz	short loc_5A82 
 0A95  B7 00                    		mov	bh, 0 
 0A97                           loc_5A82: 
 0A97  CD 10                    		int	10h		; - VIDEO - SCROLL PAGE	DOWN 
                                					; AL = number of lines to scroll window	(0
				 = blank whole window) 
                                					; BH = attributes to be	used on	blanked	li
				nes 
                                					; CH,CL	= row,column of	upper left corner 
				of window to scroll 
                                					; DH,DL	= row,column of	lower right corner
				 of window 
 0A99  E8 0AC3 R                		call	SETVPG 
 0A9C  EB AF                    		jmp	short SCRRST 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0A9E                           loc_5A89: 
 0A9E  C6 06 000A R 01          		mov	byte ptr ds:var_63a, 1 
 0AA3  3A D8                    		cmp	bl, al 
 0AA5  72 0B                    		jb	short loc_5A9D 
 0AA7  03 C1                    		add	ax, cx 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-41
                                                            

 0AA9  03 D9                    		add	bx, cx 
 0AAB  C6 06 000C R FF          		mov	byte ptr ds:var_63c, 0FFh 
 0AB0  FE C5                    		inc	ch 
 0AB2                           loc_5A9D: 
 0AB2  E8 0ADA R                		call	DOSCRL 
 0AB5  FE CD                    		dec	ch 
 0AB7  74 94                    		jz	short SCRRST 
 0AB9  02 26 000C R             		add	ah, ds:var_63c 
 0ABD  02 3E 000C R             		add	bh, ds:var_63c 
 0AC1  EB EF                    		jmp	short loc_5A9D 
                                SCROLL		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Set display page 
                                 
 0AC3                           SETVPG		proc near 
 0AC3  50                       		push	ax 
 0AC4  A0 000D R                		mov	al, ds:VISVPG 
 0AC7  3A 06 0009 R             		cmp	al, ds:CVPAGE   ; Selected page equals vi
				sible? 
 0ACB  74 0B                    		jz	short SETVPX    ; If so, we're done 
 0ACD  86 06 0009 R             		xchg	al, ds:CVPAGE 
 0AD1  A2 000D R                		mov	ds:VISVPG, al 
 0AD4  B4 05                    		mov	ah, 5 
 0AD6  CD 10                    		int	10h		; - VIDEO - SELECT DISPLAY PAGE 
                                					; AL = display page, 0-7  for modes 0 &	1,
				 0-3	for modes 2 & 3 
 0AD8                           SETVPX: 
 0AD8  58                       		pop	ax 
 0AD9  C3                       		ret 
                                SETVPG		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0ADA                           DOSCRL		proc near 
 0ADA  50                       		push	ax 
 0ADB  53                       		push	bx 
 0ADC  51                       		push	cx 
 0ADD  8B D0                    		mov	dx, ax 
 0ADF  B5 00                    		mov	ch, 0 
 0AE1  FE C1                    		inc	cl 
 0AE3  74 14                    		jz	short DOSCRX 
 0AE5                           NXTCHR: 
 0AE5  E8 0AFD R                		call	SCRRDC 
 0AE8  02 16 000C R             		add	dl, ds:var_63c 
 0AEC  87 D3                    		xchg	dx, bx 
 0AEE  E8 0B0C R                		call	SCRWRC 
 0AF1  02 16 000C R             		add	dl, ds:var_63c 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-42
                                                            

 0AF5  87 D3                    		xchg	dx, bx 
 0AF7  E2 EC                    		loop	NXTCHR 
 0AF9                           DOSCRX: 
 0AF9  59                       		pop	cx 
 0AFA  5B                       		pop	bx 
 0AFB  58                       		pop	ax 
 0AFC  C3                       		ret 
                                DOSCRL		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0AFD                           SCRRDC		proc near 
 0AFD  53                       		push	bx 
 0AFE  8A 3E 0009 R             		mov	bh, ds:CVPAGE 
 0B02  B4 02                    		mov	ah, 2 
 0B04  CD 10                    		int	10h		; - VIDEO - SET	CURSOR POSITION 
                                					; DH,DL	= row, column (0,0 = upper left) 
                                					; BH = page number 
 0B06  B4 08                    		mov	ah, 8 
 0B08  CD 10                    		int	10h		; - VIDEO - READ ATTRIBUTES/CHARACTE
				R AT CURSOR	POSITION 
                                					; BH = display page 
                                					; Return: AL = character 
                                					; AH = attribute of character (alpha modes
				) 
 0B0A  5B                       		pop	bx 
 0B0B  C3                       		ret 
                                SCRRDC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0B0C                           SCRWRC		proc near 
 0B0C  53                       		push	bx 
 0B0D  51                       		push	cx 
 0B0E  50                       		push	ax 
 0B0F  8A 3E 0009 R             		mov	bh, ds:CVPAGE 
 0B13  B4 02                    		mov	ah, 2 
 0B15  CD 10                    		int	10h		; - VIDEO - SET	CURSOR POSITION 
                                					; DH,DL	= row, column (0,0 = upper left) 
                                					; BH = page number 
 0B17  58                       		pop	ax 
 0B18  B9 0001                  		mov	cx, 1 
 0B1B  8A 1E 0016 R             		mov	bl, ds:var_646 
 0B1F  B4 09                    		mov	ah, 9 
 0B21  CD 10                    		int	10h		; - VIDEO - WRITE ATTRIBUTES/CHARACT
				ERS	AT CURSOR POSITION 
                                					; AL = character, BH = display page 
                                					; BL = attributes of character (alpha mode
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-43
                                                            

				s) or	color (graphics	modes) 
                                					; CX = number of times to write	character 
 0B23  59                       		pop	cx 
 0B24  5B                       		pop	bx 
 0B25  C3                       		ret 
                                SCRWRC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0B26                           SCRSAV		proc near 
 0B26  8F 06 0020 R             		pop	word ptr ds:var_650 
 0B2A  52                       		push	dx 
 0B2B  51                       		push	cx 
 0B2C  53                       		push	bx 
 0B2D  50                       		push	ax 
 0B2E  50                       		push	ax 
 0B2F  53                       		push	bx 
 0B30  51                       		push	cx 
 0B31  52                       		push	dx 
 0B32  9C                       		pushf 
 0B33  B4 0F                    		mov	ah, 0Fh 
 0B35  CD 10                    		int	10h		; - VIDEO - GET	CURRENT	VIDEO MODE 
                                					; Return: AH = number of columns on screen
				 
                                					; AL = current video mode 
                                					; BH = current active display page 
 0B37  88 3E 000D R             		mov	ds:VISVPG, bh 
 0B3B  88 26 000E R             		mov	ds:var_63e, ah 
 0B3F  A2 000F R                		mov	ds:CVMODE, al 
 0B42  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 0B47  74 11                    		jz	short loc_5B45 
 0B49  80 3E 0010 R 01          		cmp	byte ptr ds:var_640, 1 
 0B4E  74 07                    		jz	short loc_5B42 
 0B50  80 3E 0010 R 02          		cmp	byte ptr ds:var_640, 2 
 0B55  75 03                    		jnz	short loc_5B45 
 0B57                           loc_5B42: 
 0B57  E8 0C0D R                		call	sub_5BF8 
 0B5A                           loc_5B45: 
 0B5A  9D                       		popf 
 0B5B  5A                       		pop	dx 
 0B5C  59                       		pop	cx 
 0B5D  5B                       		pop	bx 
 0B5E  58                       		pop	ax 
 0B5F  FF 36 0020 R             		push	word ptr ds:var_650 
 0B63  C3                       		ret 
                                SCRSAV		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-44
                                                            

                                 
 0B64                           CLRSCN		proc near 
 0B64  E8 0B26 R                		call	SCRSAV 
                                 
 0B67                           DOCLRS: 
 0B67  50                       		push	ax 
 0B68  E8 0AC3 R                		call	SETVPG 
 0B6B  33 C9                    		xor	cx, cx		; Start	at 0,0 
 0B6D  8A 16 000B R             		mov	dl, ds:var_63b 
 0B71  FE CA                    		dec	dl 
 0B73  B6 18                    		mov	dh, 24		; End at 24, width 
 0B75  B8 0600                  		mov	ax, 600h 
 0B78  8A 3E 0016 R             		mov	bh, ds:var_646 
 0B7C  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 0B81  74 02                    		jz	short SCROL 
 0B83  B7 00                    		mov	bh, 0 
 0B85                           SCROL: 
 0B85  CD 10                    		int	10h		; - VIDEO - SCROLL PAGE	UP 
                                					; AL = number of lines to scroll window	(0
				 = blank whole window) 
                                					; BH = attributes to be	used on	blanked	li
				nes 
                                					; CH,CL	= row,column of	upper left corner 
				of window to scroll 
                                					; DH,DL	= row,column of	lower right corner
				 of window 
 0B87  E8 0AC3 R                		call	SETVPG 
 0B8A  58                       		pop	ax 
 0B8B  E8 0722 R                		call	SCNRST 
 0B8E  E9 0EED R                		jmp	SCNOK 
                                CLRSCN		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0B91                           CLREOL		proc near 
 0B91  50                       		push	ax 
 0B92  53                       		push	bx 
 0B93  51                       		push	cx 
 0B94  52                       		push	dx 
 0B95  81 EA 0101               		sub	dx, 101h 
 0B99  A0 000B R                		mov	al, ds:var_63b 
 0B9C  2A C6                    		sub	al, dh 
 0B9E  76 18                    		jbe	short CLREOX 
 0BA0  8A C8                    		mov	cl, al 
 0BA2  B5 00                    		mov	ch, 0 
 0BA4  86 D6                    		xchg	dl, dh 
 0BA6  8A 3E 0009 R             		mov	bh, ds:CVPAGE 
 0BAA  B4 02                    		mov	ah, 2 
 0BAC  CD 10                    		int	10h		; - VIDEO - SET	CURSOR POSITION 
                                					; DH,DL	= row, column (0,0 = upper left) 
                                					; BH = page number 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-45
                                                            

 0BAE  B0 20                    		mov	al, ' ' 
 0BB0  8A 1E 0016 R             		mov	bl, ds:var_646 
 0BB4  B4 09                    		mov	ah, 9 
 0BB6  CD 10                    		int	10h		; - VIDEO - WRITE ATTRIBUTES/CHARACT
				ERS	AT CURSOR POSITION 
                                					; AL = character, BH = display page 
                                					; BL = attributes of character (alpha mode
				s) or	color (graphics	modes) 
                                					; CX = number of times to write	character 
 0BB8                           CLREOX: 
 0BB8  5A                       		pop	dx 
 0BB9  59                       		pop	cx 
 0BBA  5B                       		pop	bx 
 0BBB  58                       		pop	ax 
 0BBC  C3                       		ret 
                                CLREOL		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0BBD                           CSRDSP		proc near 
 0BBD  E8 09D0 R                		call	SCRSV2 
 0BC0  38 06 0010 R             		cmp	ds:var_640, al 
 0BC4  74 15                    		jz	short loc_5BC6 
 0BC6  A2 0010 R                		mov	ds:var_640, al 
 0BC9  3C 00                    		cmp	al, 0 
 0BCB  75 11                    		jnz	short loc_5BC9 
 0BCD  8B 0E 0013 R             		mov	cx, ds:var_643 
 0BD1  80 CD 20                 		or	ch, 20h 
 0BD4                           SETCUR: 
 0BD4  A2 0012 R                		mov	ds:var_642, al 
 0BD7  B4 01                    		mov	ah, 1 
 0BD9  CD 10                    		int	10h		; - VIDEO - SET	CURSOR CHARACTERISTI
				CS 
                                					; CH bits 0-4 =	start line for cursor in c
				haracter cell 
                                					; bits 5-6 = blink attribute 
                                					; CL bits 0-4 =	end line for cursor in cha
				racter cell 
 0BDB                           loc_5BC6: 
 0BDB  E9 0EED R                		jmp	SCNOK 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0BDE                           loc_5BC9: 
 0BDE  3C 01                    		cmp	al, 1 
 0BE0  75 0E                    		jnz	short loc_5BDB 
 0BE2  B9 0407                  		mov	cx, 407h 
 0BE5  80 3E 000F R 07          		cmp	byte ptr ds:CVMODE, 7 
 0BEA  75 E8                    		jnz	short SETCUR 
 0BEC  B1 0D                    		mov	cl, 0Dh 
 0BEE  EB E4                    		jmp	short SETCUR 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-46
                                                            

                                ; ---------------------------------------------
				------------------------------ 
                                 
 0BF0                           loc_5BDB: 
 0BF0  3C 02                    		cmp	al, 2 
 0BF2  75 09                    		jnz	short GOSCUR 
 0BF4  8B 0E 0013 R             		mov	cx, ds:var_643 
 0BF8  80 E5 DF                 		and	ch, 0DFh 
 0BFB  EB D7                    		jmp	short SETCUR 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0BFD                           GOSCUR: 
 0BFD  8B 0E 0013 R             		mov	cx, ds:var_643 
 0C01  A0 0011 R                		mov	al, ds:var_641 
 0C04  0A C0                    		or	al, al 
 0C06  75 CC                    		jnz	short SETCUR 
 0C08  80 CD 20                 		or	ch, 20h 
 0C0B  EB C7                    		jmp	short SETCUR 
                                CSRDSP		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0C0D                           sub_5BF8	proc near 
 0C0D  50                       		push	ax 
 0C0E  53                       		push	bx 
 0C0F  51                       		push	cx 
 0C10  52                       		push	dx 
 0C11  8B 1E 001E R             		mov	bx, ds:var_64e 
 0C15  B8 0140                  		mov	ax, 320 
 0C18  33 C9                    		xor	cx, cx 
 0C1A  86 F9                    		xchg	bh, cl 
 0C1C  F7 E1                    		mul	cx 
 0C1E  8A 16 000A R             		mov	dl, ds:var_63a 
 0C22  80 FA 01                 		cmp	dl, 1 
 0C25  75 02                    		jnz	short loc_5C14 
 0C27  D1 E3                    		shl	bx, 1 
 0C29                           loc_5C14: 
 0C29  03 D8                    		add	bx, ax 
 0C2B  81 C3 00F0               		add	bx, 0F0h ; '�' 
 0C2F  B9 0004                  		mov	cx, 4 
 0C32  80 3E 0010 R 01          		cmp	byte ptr ds:var_640, 1 
 0C37  75 02                    		jnz	short loc_5C26 
 0C39  49                       		dec	cx 
 0C3A  49                       		dec	cx 
 0C3B                           loc_5C26: 
 0C3B  B8 B800                  		mov	ax, 0B800h 
 0C3E  1E                       		push	ds 
 0C3F  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 0C41  B8 FFFF                  		mov	ax, 0FFFFh 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-47
                                                            

 0C44  80 FA 01                 		cmp	dl, 1 
 0C47  BA 2000                  		mov	dx, 2000h 
 0C4A  75 0F                    		jnz	short loc_5C46 
 0C4C                           loc_5C37: 
 0C4C  03 DA                    		add	bx, dx 
 0C4E  31 07                    		xor	[bx], ax 
 0C50  2B DA                    		sub	bx, dx 
 0C52  31 07                    		xor	[bx], ax 
 0C54  83 EB 50                 		sub	bx, 80 
 0C57  E2 F3                    		loop	loc_5C37 
 0C59  EB 0D                    		jmp	short loc_5C53 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0C5B                           loc_5C46: 
 0C5B  03 DA                    		add	bx, dx 
 0C5D  30 07                    		xor	[bx], al 
 0C5F  2B DA                    		sub	bx, dx 
 0C61  30 07                    		xor	[bx], al 
 0C63  83 EB 50                 		sub	bx, 80 
 0C66  E2 F3                    		loop	loc_5C46 
 0C68                           loc_5C53: 
 0C68  1F                       		pop	ds 
                                		assume ds:nothing 
 0C69  5A                       		pop	dx 
 0C6A  59                       		pop	cx 
 0C6B  5B                       		pop	bx 
 0C6C  58                       		pop	ax 
 0C6D  C3                       		ret 
                                sub_5BF8	endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0C6E                           CSRATR		proc near 
 0C6E  E8 0B26 R                		call	SCRSAV 
 0C71  0A E4                    		or	ah, ah 
 0C73  75 03                    		jnz	short loc_5C63 
 0C75  A0 0011 R                		mov	al, ds:var_641 
 0C78                           loc_5C63: 
 0C78  A2 0011 R                		mov	ds:var_641, al 
 0C7B  0A FF                    		or	bh, bh 
 0C7D  75 05                    		jnz	short loc_5C6F 
 0C7F  A1 0013 R                		mov	ax, ds:var_643 
 0C82  8A DC                    		mov	bl, ah 
 0C84                           loc_5C6F: 
 0C84  0A ED                    		or	ch, ch 
 0C86  75 06                    		jnz	short loc_5C79 
 0C88  0A FF                    		or	bh, bh 
 0C8A  74 10                    		jz	short GSTCUR 
 0C8C  8A CB                    		mov	cl, bl 
 0C8E                           loc_5C79: 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-48
                                                            

 0C8E  8A FB                    		mov	bh, bl 
 0C90  8A D9                    		mov	bl, cl 
 0C92  F7 C3 E0E0               		test	bx, 0E0E0h 
 0C96  75 07                    		jnz	short CSRERR 
 0C98  89 1E 0013 R             		mov	ds:var_643, bx 
 0C9C                           GSTCUR: 
 0C9C  E9 0BFD R                		jmp	GOSCUR 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0C9F                           CSRERR: 
 0C9F  E9 0EF1 R                		jmp	SCNERR 
                                CSRATR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0CA2                           LCPY		proc near 
 0CA2  E8 0B26 R                		call	SCRSAV 
 0CA5  CD 05                    		int	5		;  - PRINT-SCREEN KEY 
                                					; automatically	called by keyboard scanner
				 when	print-screen key is pressed 
 0CA7  E8 0A4D R                		call	SCRRST 
                                LCPY		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0CAA                           SCRATR		proc near 
 0CAA  50                       		push	ax 
 0CAB  51                       		push	cx 
 0CAC  52                       		push	dx 
 0CAD  8A D0                    		mov	dl, al 
 0CAF  8A F3                    		mov	dh, bl 
 0CB1  81 EA 0101               		sub	dx, 101h 
 0CB5  89 16 001E R             		mov	ds:var_64e, dx 
 0CB9  8A 3E 0009 R             		mov	bh, ds:CVPAGE 
 0CBD  B4 02                    		mov	ah, 2 
 0CBF  CD 10                    		int	10h		; - VIDEO - SET	CURSOR POSITION 
                                					; DH,DL	= row, column (0,0 = upper left) 
                                					; BH = page number 
 0CC1  B4 08                    		mov	ah, 8 
 0CC3  CD 10                    		int	10h		; - VIDEO - READ ATTRIBUTES/CHARACTE
				R AT CURSOR	POSITION 
                                					; BH = display page 
                                					; Return: AL = character 
                                					; AH = attribute of character (alpha modes
				) 
 0CC5  B7 00                    		mov	bh, 0 
 0CC7  8A DC                    		mov	bl, ah 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-49
                                                            

 0CC9  5A                       		pop	dx 
 0CCA  59                       		pop	cx 
 0CCB  58                       		pop	ax 
 0CCC  C3                       		ret 
                                SCRATR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0CCD                           SCRSTT		proc near 
 0CCD  E8 0B26 R                		call	SCRSAV 
 0CD0  8A 0F                    		mov	cl, [bx] 
 0CD2  80 F9 05                 		cmp	cl, 5 
 0CD5  73 16                    		jnb	short loc_5CD8 
 0CD7  43                       		inc	bx 
 0CD8  FE C1                    		inc	cl 
 0CDA  53                       		push	bx 
 0CDB  51                       		push	cx 
 0CDC  8A 16 000A R             		mov	dl, ds:var_63a 
 0CE0  E8 0E6F R                		call	sub_5E5A 
 0CE3  76 0B                    		jbe	short loc_5CDB 
 0CE5  8A D0                    		mov	dl, al 
 0CE7  3C 03                    		cmp	al, 3 
 0CE9  72 05                    		jb	short loc_5CDB 
 0CEB  58                       		pop	ax 
 0CEC  58                       		pop	ax 
 0CED                           loc_5CD8: 
 0CED  E9 0EF1 R                		jmp	SCNERR 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0CF0                           loc_5CDB: 
 0CF0  E8 0E6F R                		call	sub_5E5A 
 0CF3  E8 0E6F R                		call	sub_5E5A 
 0CF6  76 03                    		jbe	short loc_5CE6 
 0CF8  E8 0D9F R                		call	sub_5D8A 
 0CFB                           loc_5CE6: 
 0CFB  E8 0E6F R                		call	sub_5E5A 
 0CFE  76 03                    		jbe	short loc_5CEE 
 0D00  E8 0D9F R                		call	sub_5D8A 
 0D03                           loc_5CEE: 
 0D03  59                       		pop	cx 
 0D04  5B                       		pop	bx 
 0D05  8A 2E 000F R             		mov	ch, ds:CVMODE 
 0D09  E8 0E6F R                		call	sub_5E5A 
 0D0C  76 4C                    		jbe	short loc_5D45 
 0D0E  A2 000A R                		mov	ds:var_63a, al 
 0D11  C6 06 0016 R 07          		mov	byte ptr ds:var_646, 7 
 0D16  C6 06 0015 R 07          		mov	byte ptr ds:var_645, 7 
 0D1B  3C 00                    		cmp	al, 0 
 0D1D  75 13                    		jnz	short loc_5D1D 
 0D1F  33 D2                    		xor	dx, dx 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-50
                                                            

 0D21  89 16 001C R             		mov	word ptr ds:var_64c, dx 
 0D25  B5 02                    		mov	ch, 2 
 0D27  80 3E 000B R 50          		cmp	byte ptr ds:var_63b, 80 
 0D2C  74 28                    		jz	short loc_5D41 
 0D2E  B5 00                    		mov	ch, 0 
 0D30  EB 24                    		jmp	short loc_5D41 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0D32                           loc_5D1D: 
 0D32  B5 04                    		mov	ch, 4 
 0D34  C6 06 000B R 28          		mov	byte ptr ds:var_63b, 40 
 0D39  BA 0140                  		mov	dx, 320 
 0D3C  C7 06 001C R 3F02        		mov	word ptr ds:var_64c, 3F02h 
 0D42  3C 01                    		cmp	al, 1 
 0D44  74 10                    		jz	short loc_5D41 
 0D46  B5 06                    		mov	ch, 6 
 0D48  C6 06 000B R 50          		mov	byte ptr ds:var_63b, 80 
 0D4D  BA 0280                  		mov	dx, 640 
 0D50  C7 06 001C R 7F01        		mov	word ptr ds:var_64c, 7F01h 
 0D56                           loc_5D41: 
 0D56  89 16 0019 R             		mov	ds:var_649, dx 
 0D5A                           loc_5D45: 
 0D5A  E8 0E6F R                		call	sub_5E5A 
 0D5D  76 0F                    		jbe	short loc_5D59 
 0D5F  80 E5 FE                 		and	ch, 0FEh 
 0D62  3C 00                    		cmp	al, 0 
 0D64  74 08                    		jz	short loc_5D59 
 0D66  80 FD 06                 		cmp	ch, 6 
 0D69  73 03                    		jnb	short loc_5D59 
 0D6B  80 CD 01                 		or	ch, 1 
 0D6E                           loc_5D59: 
 0D6E  8A C5                    		mov	al, ch 
 0D70  3A 06 000F R             		cmp	al, ds:CVMODE 
 0D74  74 10                    		jz	short loc_5D71 
 0D76  B4 00                    		mov	ah, 0 
 0D78  CD 10                    		int	10h		; - VIDEO - SET	VIDEO MODE 
                                					; AL = mode 
 0D7A  53                       		push	bx 
 0D7B  51                       		push	cx 
 0D7C  E8 0722 R                		call	SCNRST 
 0D7F  59                       		pop	cx 
 0D80  5B                       		pop	bx 
 0D81  C6 06 0009 R 00          		mov	byte ptr ds:CVPAGE, 0 
 0D86                           loc_5D71: 
 0D86  E8 0E6F R                		call	sub_5E5A 
 0D89  76 03                    		jbe	short loc_5D79 
 0D8B  A2 0009 R                		mov	ds:CVPAGE, al 
 0D8E                           loc_5D79: 
 0D8E  E8 0E6F R                		call	sub_5E5A 
 0D91  74 02                    		jz	short loc_5D80 
 0D93  73 03                    		jnb	short loc_5D83 
 0D95                           loc_5D80: 
 0D95  A0 0009 R                		mov	al, ds:CVPAGE 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-51
                                                            

 0D98                           loc_5D83: 
 0D98  B4 05                    		mov	ah, 5 
 0D9A  CD 10                    		int	10h		; - VIDEO - SELECT DISPLAY PAGE 
                                					; AL = display page, 0-7  for modes 0 &	1,
				 0-3	for modes 2 & 3 
 0D9C  E9 0EED R                		jmp	SCNOK 
                                SCRSTT		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0D9F                           sub_5D8A	proc near 
 0D9F  0A D2                    		or	dl, dl 
 0DA1  75 10                    		jnz	short loc_5D9E 
 0DA3  B4 04                    		mov	ah, 4 
 0DA5  80 3E 000B R 50          		cmp	byte ptr ds:var_63b, 80 
 0DAA  74 02                    		jz	short loc_5D99 
 0DAC  B4 08                    		mov	ah, 8 
 0DAE                           loc_5D99: 
 0DAE  3A C4                    		cmp	al, ah 
 0DB0  73 06                    		jnb	short loc_5DA3 
 0DB2  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0DB3                           loc_5D9E: 
 0DB3  3C 00                    		cmp	al, 0 
 0DB5  75 01                    		jnz	short loc_5DA3 
 0DB7  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0DB8                           loc_5DA3: 
 0DB8  58                       		pop	ax 
 0DB9  58                       		pop	ax 
 0DBA  58                       		pop	ax 
 0DBB  E9 0EF1 R                		jmp	SCNERR 
                                sub_5D8A	endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0DBE                           SETCLR		proc near 
 0DBE  E8 0B26 R                		call	SCRSAV 
 0DC1  8A 0F                    		mov	cl, [bx] 
 0DC3  43                       		inc	bx 
 0DC4  FE C1                    		inc	cl 
 0DC6  8A 2E 0016 R             		mov	ch, ds:var_646 
 0DCA  A0 000A R                		mov	al, ds:var_63a 
 0DCD  3C 00                    		cmp	al, 0 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-52
                                                            

 0DCF  74 4C                    		jz	short loc_5E08 
 0DD1  3C 01                    		cmp	al, 1 
 0DD3  74 03                    		jz	short loc_5DC3 
 0DD5                           loc_5DC0: 
 0DD5  E9 0EF1 R                		jmp	SCNERR 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0DD8                           loc_5DC3: 
 0DD8  80 F9 06                 		cmp	cl, 6 
 0DDB  73 F8                    		jnb	short loc_5DC0 
 0DDD  E8 0E6F R                		call	sub_5E5A 
 0DE0  76 12                    		jbe	short loc_5DDF 
 0DE2  53                       		push	bx 
 0DE3  3C 10                    		cmp	al, 10h 
 0DE5  72 04                    		jb	short loc_5DD6 
 0DE7  24 0F                    		and	al, 0Fh 
 0DE9  0C 10                    		or	al, 10h 
 0DEB                           loc_5DD6: 
 0DEB  8A D8                    		mov	bl, al 
 0DED  B7 00                    		mov	bh, 0 
 0DEF  B4 0B                    		mov	ah, 0Bh 
 0DF1  CD 10                    		int	10h		; - VIDEO - SET	COLOR PALETTE 
                                					; BH = 00h, BL = border	color 
                                					; BH = 01h, BL = palette (0-3) 
 0DF3  5B                       		pop	bx 
 0DF4                           loc_5DDF: 
 0DF4  33 D2                    		xor	dx, dx 
 0DF6  E8 0E6F R                		call	sub_5E5A 
 0DF9  76 04                    		jbe	short loc_5DEA 
 0DFB  8A D0                    		mov	dl, al 
 0DFD  B6 01                    		mov	dh, 1 
 0DFF                           loc_5DEA: 
 0DFF  E8 0E6F R                		call	sub_5E5A 
 0E02  76 04                    		jbe	short loc_5DF3 
 0E04  8A D0                    		mov	dl, al 
 0E06  B6 01                    		mov	dh, 1 
 0E08                           loc_5DF3: 
 0E08  E8 0E6F R                		call	sub_5E5A 
 0E0B  76 04                    		jbe	short loc_5DFC 
 0E0D  8A D0                    		mov	dl, al 
 0E0F  B6 01                    		mov	dh, 1 
 0E11                           loc_5DFC: 
 0E11  0A F6                    		or	dh, dh 
 0E13  74 4C                    		jz	short loc_5E4C 
 0E15  8A C2                    		mov	al, dl 
 0E17  24 01                    		and	al, 1 
 0E19  B7 01                    		mov	bh, 1 
 0E1B  EB 3E                    		jmp	short loc_5E46 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0E1D                           loc_5E08: 
 0E1D  80 F9 05                 		cmp	cl, 5 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-53
                                                            

 0E20  73 4A                    		jnb	short SETERR 
 0E22  E8 0E6F R                		call	sub_5E5A 
 0E25  76 11                    		jbe	short loc_5E23 
 0E27  3C 20                    		cmp	al, 20h	; ' ' 
 0E29  73 41                    		jnb	short SETERR 
 0E2B  A8 10                    		test	al, 10h 
 0E2D  74 04                    		jz	short loc_5E1E 
 0E2F  24 0F                    		and	al, 0Fh 
 0E31  0C 80                    		or	al, 80h 
 0E33                           loc_5E1E: 
 0E33  80 E5 70                 		and	ch, 70h 
 0E36  0A E8                    		or	ch, al 
 0E38                           loc_5E23: 
 0E38  E8 0E6F R                		call	sub_5E5A 
 0E3B  76 13                    		jbe	short loc_5E3B 
 0E3D  3C 10                    		cmp	al, 10h 
 0E3F  73 2B                    		jnb	short SETERR 
 0E41  24 07                    		and	al, 7 
 0E43  D0 E0                    		shl	al, 1 
 0E45  D0 E0                    		shl	al, 1 
 0E47  D0 E0                    		shl	al, 1 
 0E49  D0 E0                    		shl	al, 1 
 0E4B  80 E5 8F                 		and	ch, 8Fh 
 0E4E  0A E8                    		or	ch, al 
 0E50                           loc_5E3B: 
 0E50  E8 0E6F R                		call	sub_5E5A 
 0E53  76 0C                    		jbe	short loc_5E4C 
 0E55  3C 10                    		cmp	al, 10h 
 0E57  73 13                    		jnb	short SETERR 
 0E59  B7 00                    		mov	bh, 0 
 0E5B                           loc_5E46: 
 0E5B  8A D8                    		mov	bl, al 
 0E5D  B4 0B                    		mov	ah, 0Bh 
 0E5F  CD 10                    		int	10h		; - VIDEO - SET	COLOR PALETTE 
                                					; BH = 00h, BL = border	color 
                                					; BH = 01h, BL = palette (0-3) 
 0E61                           loc_5E4C: 
 0E61  88 2E 0016 R             		mov	ds:var_646, ch 
 0E65  88 2E 0015 R             		mov	ds:var_645, ch 
 0E69  E9 0EED R                		jmp	SCNOK 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0E6C                           SETERR: 
 0E6C  E9 0EF1 R                		jmp	SCNERR 
                                SETCLR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0E6F                           sub_5E5A	proc near 
 0E6F  FE C9                    		dec	cl 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-54
                                                            

 0E71  74 09                    		jz	short loc_5E67 
 0E73  8B 07                    		mov	ax, [bx] 
 0E75  43                       		inc	bx 
 0E76  43                       		inc	bx 
 0E77  0A C0                    		or	al, al 
 0E79  86 E0                    		xchg	ah, al 
 0E7B  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0E7C                           loc_5E67: 
 0E7C  FE C1                    		inc	cl 
 0E7E  F9                       		stc 
 0E7F  C3                       		ret 
                                sub_5E5A	endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Machine specific routine to set screen width 
                                ; Height in [AL], width	in [CL] 
                                 
 0E80                           SWIDTH		proc near 
 0E80  E8 0B26 R                		call	SCRSAV 
 0E83  BB 0EF4 R                		mov	bx, offset MODES40 
 0E86  3C 28                    		cmp	al, 40		; Is the mode 40 characters wide?
				 
 0E88  74 17                    		jz	short WIDE40 
 0E8A  3C 50                    		cmp	al, 80		; Or is	it 80 wide? 
 0E8C  BB 0EFC R                		mov	bx, offset MODES80 
 0E8F  75 DB                    		jnz	short SETERR	; If not 40 or 80 columns, e
				rror 
 0E91  A2 000B R                		mov	ds:var_63b, al 
 0E94  BA 0280                  		mov	dx, 640 
 0E97  B0 02                    		mov	al, 2 
 0E99  C7 06 001C R 7F01        		mov	word ptr ds:var_64c, 7F01h 
 0E9F  EB 15                    		jmp	short loc_5EA1 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0EA1                           WIDE40: 
 0EA1  80 3E 000F R 07          		cmp	byte ptr ds:CVMODE, 7 
 0EA6  74 45                    		jz	short SCNOK 
 0EA8  A2 000B R                		mov	ds:var_63b, al 
 0EAB  BA 0140                  		mov	dx, 320 
 0EAE  B0 01                    		mov	al, 1 
 0EB0  C7 06 001C R 3F02        		mov	word ptr ds:var_64c, 3F02h 
 0EB6                           loc_5EA1: 
 0EB6  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 0EBB  74 07                    		jz	short loc_5EAF 
 0EBD  A2 000A R                		mov	ds:var_63a, al 
 0EC0  89 16 0019 R             		mov	ds:var_649, dx 
 0EC4                           loc_5EAF: 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-55
                                                            

 0EC4  A0 000F R                		mov	al, ds:CVMODE 
 0EC7  B4 00                    		mov	ah, 0 
 0EC9  03 D8                    		add	bx, ax 
 0ECB  2E: 8A 07                		mov	al, cs:[bx] 
 0ECE  B4 00                    		mov	ah, 0 
 0ED0  3A 06 000F R             		cmp	al, ds:CVMODE 
 0ED4  74 17                    		jz	short SCNOK 
 0ED6  CD 10                    		int	10h		; - VIDEO - SET	VIDEO MODE 
                                					; AL = mode 
 0ED8  E8 0722 R                		call	SCNRST 
 0EDB  33 C0                    		xor	ax, ax 
 0EDD  A2 0009 R                		mov	ds:CVPAGE, al 
 0EE0  80 3E 000A R 02          		cmp	byte ptr ds:var_63a, 2 
 0EE5  74 06                    		jz	short SCNOK 
 0EE7  B4 0B                    		mov	ah, 0Bh 
 0EE9  33 DB                    		xor	bx, bx 
 0EEB  CD 10                    		int	10h		; - VIDEO - SET	COLOR PALETTE 
                                					; BH = 00h, BL = border	color 
                                					; BH = 01h, BL = palette (0-3) 
                                 
 0EED                           SCNOK: 
 0EED  F8                       		clc 
 0EEE                           GOSRST: 
 0EEE  E9 0A4D R                		jmp	SCRRST 
                                SWIDTH		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                ; START	OF FUNCTION CHUNK FOR sub_5D8A 
                                 
 0EF1                           SCNERR: 
 0EF1  F9                       		stc 
 0EF2  EB FA                    		jmp	short GOSRST 
                                ; END OF FUNCTION CHUNK	FOR sub_5D8A 
                                ; ---------------------------------------------
				------------------------------ 
                                 
                                PUBLIC  FKYFMT, FKYADV, STOREC, FETCHC 
                                PUBLIC  RIGHTC, LEFTC, UPC, DOWNC 
                                PUBLIC  SCALXY, MAPXYC, SETATR, READC, SETC, NS
				ETCX 
                                PUBLIC  GTASPC, PIXSIZ 
                                PUBLIC  TUPC, TDOWNC, PGINIT, NREAD, NWRITE 
                                PUBLIC  PNTINI, SCANR, SCANL 
                                 
 0EF4  00                       MODES40		db    0 
 0EF5  01                       		db    1 
 0EF6  00                       		db    0 
 0EF7  01                       		db    1 
 0EF8  04                       		db    4 
 0EF9  05                       		db    5 
 0EFA  05                       		db    5 
 0EFB  07                       		db    7 
 0EFC  02                       MODES80		db    2 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-56
                                                            

 0EFD  03                       		db    3 
 0EFE  02                       		db    2 
 0EFF  03                       		db    3 
 0F00  06                       		db    6 
 0F01  06                       		db    6 
 0F02  06                       		db    6 
 0F03  07                       		db    7 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F04                           FKYFMT		proc near 
 0F04  BB 0022 R                		mov	bx, offset var_652 
 0F07  80 3E 000B R 28          		cmp	byte ptr ds:var_63b, 40 ; 40 wide? 
 0F0C  74 03                    		jz	short FKYFMX 
 0F0E  BB 0025 R                		mov	bx, offset var_655 
 0F11                           FKYFMX: 
 0F11  C3                       		ret 
                                FKYFMT		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F12                           FKYADV		proc near 
 0F12  0B E4                    		or	sp, sp 
 0F14  C3                       		ret 
                                FKYADV		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F15                           STOREC		proc near 
 0F15  A2 001B R                		mov	ds:var_64b, al 
 0F18  89 1E 0017 R             		mov	ds:var_647, bx 
 0F1C  C3                       		ret 
                                STOREC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F1D                           FETCHC		proc near 
 0F1D  A0 001B R                		mov	al, ds:var_64b 
 0F20  8B 1E 0017 R             		mov	bx, ds:var_647 
 0F24  C3                       		ret 
                                FETCHC		endp 
                                 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-57
                                                            

                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F25                           RIGHTC		proc near 
 0F25  51                       		push	cx 
 0F26  8A 0E 001C R             		mov	cl, ds:var_64c 
 0F2A  D2 0E 001B R             		ror	byte ptr ds:var_64b, cl 
 0F2E  72 04                    		jb	short RGHTCX 
 0F30  FF 06 0017 R             		inc	word ptr ds:var_647 
 0F34                           RGHTCX: 
 0F34  59                       		pop	cx 
 0F35  C3                       		ret 
                                RIGHTC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F36                           LEFTC		proc near 
 0F36  51                       		push	cx 
 0F37  8A 0E 001C R             		mov	cl, ds:var_64c 
 0F3B  D2 06 001B R             		rol	byte ptr ds:var_64b, cl 
 0F3F  72 04                    		jb	short LEFTCX 
 0F41  FF 0E 0017 R             		dec	word ptr ds:var_647 
 0F45                           LEFTCX: 
 0F45  59                       		pop	cx 
 0F46  C3                       		ret 
                                LEFTC		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                ; START	OF FUNCTION CHUNK FOR TUPC 
                                 
 0F47                           UPC: 
 0F47  B8 2000                  		mov	ax, 2000h 
 0F4A  3B 06 0017 R             		cmp	ax, ds:var_647 
 0F4E  76 08                    		jbe	short loc_5F43 
 0F50  2D 0050                  		sub	ax, 80 
 0F53  01 06 0017 R             		add	ds:var_647, ax 
 0F57  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0F58                           loc_5F43: 
 0F58  29 06 0017 R             		sub	ds:var_647, ax 
 0F5C  C3                       		ret 
                                ; END OF FUNCTION CHUNK	FOR TUPC 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-58
                                                            

 0F5D                           DOWNC		proc near 
 0F5D  B8 2000                  		mov	ax, 2000h 
 0F60  3B 06 0017 R             		cmp	ax, ds:var_647 
 0F64  76 05                    		jbe	short DOWNCX 
 0F66  01 06 0017 R             		add	ds:var_647, ax 
 0F6A  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0F6B                           DOWNCX: 
 0F6B  2D 0050                  		sub	ax, 80 
 0F6E  29 06 0017 R             		sub	ds:var_647, ax 
 0F72  C3                       		ret 
                                DOWNC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F73                           SCALXY		proc near 
 0F73  0A ED                    		or	ch, ch 
 0F75  78 1B                    		js	short loc_5F7D 
 0F77  8B 1E 0019 R             		mov	bx, ds:var_649 
 0F7B  3B CB                    		cmp	cx, bx 
 0F7D  9F                       		lahf 
 0F7E  72 03                    		jb	short loc_5F6E 
 0F80  8B CB                    		mov	cx, bx 
 0F82  49                       		dec	cx 
 0F83                           loc_5F6E: 
 0F83  0A F6                    		or	dh, dh 
 0F85  78 10                    		js	short loc_5F82 
 0F87  BB 00C8                  		mov	bx, 200 
 0F8A  3B D3                    		cmp	dx, bx 
 0F8C  72 0C                    		jb	short loc_5F85 
 0F8E  8B D3                    		mov	dx, bx 
 0F90  4A                       		dec	dx 
 0F91  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0F92                           loc_5F7D: 
 0F92  33 C9                    		xor	cx, cx 
 0F94  9F                       		lahf 
 0F95  EB EC                    		jmp	short loc_5F6E 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0F97                           loc_5F82: 
 0F97  33 D2                    		xor	dx, dx 
 0F99  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-59
                                                            

 0F9A                           loc_5F85: 
 0F9A  9E                       		sahf 
 0F9B  C3                       		ret 
                                SCALXY		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F9C                           MAPXYC		proc near 
 0F9C  8B C1                    		mov	ax, cx 
 0F9E  8A 0E 000A R             		mov	cl, ds:var_63a 
 0FA2  FE C1                    		inc	cl 
 0FA4  D3 C8                    		ror	ax, cl 
 0FA6  50                       		push	ax 
 0FA7  D2 C4                    		rol	ah, cl 
 0FA9  8A EC                    		mov	ch, ah 
 0FAB  33 F6                    		xor	si, si 
 0FAD  8B C2                    		mov	ax, dx 
 0FAF  D1 E8                    		shr	ax, 1 
 0FB1  73 03                    		jnb	short loc_5FA1 
 0FB3  BE 2000                  		mov	si, 2000h 
 0FB6                           loc_5FA1: 
 0FB6  B1 50                    		mov	cl, 80 
 0FB8  F6 E1                    		mul	cl 
 0FBA  5A                       		pop	dx 
 0FBB  B6 00                    		mov	dh, 0 
 0FBD  03 C2                    		add	ax, dx 
 0FBF  03 F0                    		add	si, ax 
 0FC1  89 36 0017 R             		mov	ds:var_647, si 
 0FC5  8A 0E 001C R             		mov	cl, ds:var_64c 
 0FC9  FE C9                    		dec	cl 
 0FCB  D2 E5                    		shl	ch, cl 
 0FCD  8A CD                    		mov	cl, ch 
 0FCF  A0 001D R                		mov	al, ds:var_64d 
 0FD2  D2 C8                    		ror	al, cl 
 0FD4  A2 001B R                		mov	ds:var_64b, al 
 0FD7  C3                       		ret 
                                MAPXYC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0FD8                           SETATR		proc near 
 0FD8  3C 04                    		cmp	al, 4 
 0FDA  73 03                    		jnb	short STATRX 
 0FDC  A2 0030 R                		mov	ds:var_660, al 
 0FDF                           STATRX: 
 0FDF  F8                       		clc 
 0FE0  C3                       		ret 
                                SETATR		endp 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-60
                                                            

                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0FE1                           READC		proc near 
 0FE1  8B 36 0017 R             		mov	si, ds:var_647 
 0FE5  1E                       		push	ds 
 0FE6  B8 B800                  		mov	ax, 0B800h 
 0FE9  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 0FEB  8A 04                    		mov	al, [si] 
 0FED  1F                       		pop	ds 
                                		assume ds:nothing 
 0FEE  8A 26 001B R             		mov	ah, ds:var_64b 
 0FF2  F6 D4                    		not	ah 
 0FF4  22 C4                    		and	al, ah 
 0FF6  8A 0E 001C R             		mov	cl, ds:var_64c 
 0FFA                           RDCLOP: 
 0FFA  D3 C0                    		rol	ax, cl 
 0FFC  73 FC                    		jnb	short RDCLOP 
 0FFE  8A C4                    		mov	al, ah 
 1000  C3                       		ret 
                                READC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 1001                           SETC		proc near 
 1001  51                       		push	cx 
 1002  1E                       		push	ds 
 1003  E8 100D R                		call	SETPTR 
 1006  20 2C                    		and	[si], ch 
 1008  08 04                    		or	[si], al 
 100A  1F                       		pop	ds 
 100B  59                       		pop	cx 
 100C  C3                       		ret 
                                SETC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Set DS:SI to point at	current	"C" 
                                 
 100D                           SETPTR		proc near 
 100D  8A 26 001B R             		mov	ah, ds:var_64b 
 1011  8A EC                    		mov	ch, ah 
 1013  A0 0030 R                		mov	al, ds:var_660 
 1016  80 3E 000A R 01          		cmp	byte ptr ds:var_63a, 1 
 101B  74 02                    		jz	short loc_600A 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-61
                                                            

 101D  24 01                    		and	al, 1 
 101F                           loc_600A: 
 101F  8A 0E 001C R             		mov	cl, ds:var_64c 
 1023                           loc_600E: 
 1023  D2 C8                    		ror	al, cl 
 1025  D2 C4                    		rol	ah, cl 
 1027  72 FA                    		jb	short loc_600E 
 1029  BE B800                  		mov	si, 0B800h 
 102C  56                       		push	si 
 102D  8B 36 0017 R             		mov	si, ds:var_647 
 1031  1F                       		pop	ds 
 1032  C3                       		ret 
                                SETPTR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 1033                           NSETCX		proc near 
 1033  1E                       		push	ds 
 1034  E8 100D R                		call	SETPTR 
 1037  F6 C5 80                 		test	ch, 80h 
 103A  74 0E                    		jz	short loc_6035 
 103C                           loc_6027: 
 103C  4B                       		dec	bx 
 103D  78 41                    		js	short loc_606B 
 103F  20 2C                    		and	[si], ch 
 1041  08 04                    		or	[si], al 
 1043  D2 C8                    		ror	al, cl 
 1045  D2 CD                    		ror	ch, cl 
 1047  72 F3                    		jb	short loc_6027 
 1049  46                       		inc	si 
 104A                           loc_6035: 
 104A  51                       		push	cx 
 104B  50                       		push	ax 
 104C  BA 0007                  		mov	dx, 7 
 104F  8A E0                    		mov	ah, al 
 1051                           loc_603C: 
 1051  D2 C8                    		ror	al, cl 
 1053  0A E0                    		or	ah, al 
 1055  4A                       		dec	dx 
 1056  75 F9                    		jnz	short loc_603C 
 1058  8A C4                    		mov	al, ah 
 105A  26: 8A 0E 000A R         		mov	cl, es:var_63a 
 105F  D3 CB                    		ror	bx, cl 
 1061  D1 CB                    		ror	bx, 1 
 1063  D1 CB                    		ror	bx, 1 
 1065  EB 04                    		jmp	short loc_6056 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1067                           loc_6052: 
 1067  89 04                    		mov	[si], ax 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-62
                                                            

 1069  46                       		inc	si 
 106A  46                       		inc	si 
 106B                           loc_6056: 
 106B  FE CB                    		dec	bl 
 106D  79 F8                    		jns	short loc_6052 
 106F  D0 E7                    		shl	bh, 1 
 1071  73 03                    		jnb	short loc_6061 
 1073  88 04                    		mov	[si], al 
 1075  46                       		inc	si 
 1076                           loc_6061: 
 1076  B3 00                    		mov	bl, 0 
 1078  D3 C3                    		rol	bx, cl 
 107A  D1 C3                    		rol	bx, 1 
 107C  58                       		pop	ax 
 107D  59                       		pop	cx 
 107E  EB BC                    		jmp	short loc_6027 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1080                           loc_606B: 
 1080  1F                       		pop	ds 
 1081  C3                       		ret 
                                NSETCX		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Get screen aspect ratio 
                                 
 1082                           GTASPC		proc near 
 1082  BB 00D5                  		mov	bx, 213		; FP number! 
 1085  BA 0133                  		mov	dx, 307 
 1088  80 3E 000A R 01          		cmp	byte ptr ds:var_63a, 1 
 108D  74 06                    		jz	short GTASPX 
 108F  BB 006B                  		mov	bx, 107		; FP number! 
 1092  BA 0267                  		mov	dx, 615 
 1095                           GTASPX: 
 1095  C3                       		ret 
                                GTASPC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 1096                           PIXSIZ		proc near 
 1096  A0 001C R                		mov	al, ds:var_64c 
 1099  C3                       		ret 
                                PIXSIZ		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-63
                                                            

                                 
                                 
 109A                           TUPC		proc near 
 109A  83 3E 0017 R 4F          		cmp	word ptr ds:var_647, 4Fh 
 109F  76 03                    		jbe	short TUPCX 
 10A1  E9 0F47 R                		jmp	UPC 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 10A4                           TUPCX: 
 10A4  F9                       		stc 
 10A5  C3                       		ret 
                                TUPC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 10A6                           TDOWNC		proc near 
 10A6  81 3E 0017 R 3EF0        		cmp	word ptr ds:var_647, 3EF0h 
 10AC  73 F6                    		jnb	short TUPCX 
 10AE  E9 0F5D R                		jmp	DOWNC 
                                TDOWNC		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 10B1  11B4 R                   PGDISP		dw offset FNOR 
 10B3  11B7 R                   		dw offset FNAND 
 10B5  11BA R                   		dw offset FNINV 
 10B7  11BC R                   		dw offset FNSET 
 10B9  11BF R                   		dw offset FNXOR 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 10BB                           PGINIT		proc near 
 10BB  9F                       		lahf 
 10BC  89 1E 0031 R             		mov	ds:var_661, bx 
 10C0  51                       		push	cx 
 10C1  D1 E9                    		shr	cx, 1 
 10C3  D1 E9                    		shr	cx, 1 
 10C5  D1 E9                    		shr	cx, 1 
 10C7  89 0E 0033 R             		mov	ds:var_663, cx 
 10CB  59                       		pop	cx 
 10CC  80 E1 07                 		and	cl, 7 
 10CF  B5 08                    		mov	ch, 8 
 10D1  2A E9                    		sub	ch, cl 
 10D3  80 E5 07                 		and	ch, 7 
 10D6  89 0E 0035 R             		mov	WORD PTR ds:var_665, cx 
 10DA  9E                       		sahf 
 10DB  73 13                    		jnb	short PGINIX 
 10DD  3C 05                    		cmp	al, 5 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-64
                                                            

 10DF  73 0F                    		jnb	short PGINIX 
 10E1  BB 10B1 R                		mov	bx, offset PGDISP 
 10E4  B4 00                    		mov	ah, 0 
 10E6  D0 E0                    		shl	al, 1 
 10E8  03 D8                    		add	bx, ax 
 10EA  2E: 8B 07                		mov	ax, cs:[bx] 
 10ED  A3 0037 R                		mov	ds:var_667, ax 
 10F0                           PGINIX: 
 10F0  C3                       		ret 
                                PGINIT		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 10F1                           NREAD		proc near 
 10F1  1E                       		push	ds 
 10F2  8B 3E 0031 R             		mov	di, ds:var_661 
 10F6  8B 1E 0033 R             		mov	bx, ds:var_663 
 10FA  E8 100D R                		call	SETPTR 
 10FD  8A 34                    		mov	dh, [si] 
 10FF  B4 00                    		mov	ah, 0 
 1101                           loc_60EC: 
 1101  F6 C5 80                 		test	ch, 80h 
 1104  74 08                    		jz	short loc_60F9 
 1106  D2 C5                    		rol	ch, cl 
 1108  D2 E6                    		shl	dh, cl 
 110A  02 E1                    		add	ah, cl 
 110C  EB F3                    		jmp	short loc_60EC 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 110E                           loc_60F9: 
 110E  8A CC                    		mov	cl, ah 
 1110  EB 06                    		jmp	short loc_6103 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1112                           loc_60FD: 
 1112  26: 88 35                		mov	es:[di], dh 
 1115  47                       		inc	di 
 1116  8A F0                    		mov	dh, al 
 1118                           loc_6103: 
 1118  46                       		inc	si 
 1119  8A 04                    		mov	al, [si] 
 111B  8A E7                    		mov	ah, bh 
 111D  D3 E0                    		shl	ax, cl 
 111F  0A F4                    		or	dh, ah 
 1121  FE CB                    		dec	bl 
 1123  79 ED                    		jns	short loc_60FD 
 1125  26: 8A 0E 0036 R         		mov	cl, es:var_666 
 112A  0A C9                    		or	cl, cl 
 112C  74 08                    		jz	short NREADX 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-65
                                                            

 112E  D2 EE                    		shr	dh, cl 
 1130  D2 E6                    		shl	dh, cl 
 1132  26: 88 35                		mov	es:[di], dh 
 1135  47                       		inc	di 
 1136                           NREADX: 
 1136  1F                       		pop	ds 
 1137  89 3E 0031 R             		mov	ds:var_661, di 
 113B  C3                       		ret 
                                NREAD		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 113C                           NWRITE		proc near 
 113C  1E                       		push	ds 
 113D  8B 3E 0031 R             		mov	di, ds:var_661 
 1141  8B 1E 0033 R             		mov	bx, ds:var_663 
 1145  E8 100D R                		call	SETPTR 
 1148  8B 14                    		mov	dx, [si] 
 114A  B4 00                    		mov	ah, 0 
                                 
 114C                           loc_6137: 
 114C  F6 C5 80                 		test	ch, 80h 
 114F  74 08                    		jz	short loc_6144 
 1151  D2 C5                    		rol	ch, cl 
 1153  D3 C2                    		rol	dx, cl 
 1155  02 E1                    		add	ah, cl 
 1157  EB F3                    		jmp	short loc_6137 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1159                           loc_6144: 
 1159  8A CC                    		mov	cl, ah 
 115B  EB 0B                    		jmp	short loc_6153 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 115D                           loc_6148: 
 115D  88 14                    		mov	[si], dl 
 115F  46                       		inc	si 
 1160  8A D6                    		mov	dl, dh 
 1162  46                       		inc	si 
 1163  8A 34                    		mov	dh, [si] 
 1165  4E                       		dec	si 
 1166  D3 C2                    		rol	dx, cl 
 1168                           loc_6153: 
 1168  26: 8A 05                		mov	al, es:[di] 
 116B  47                       		inc	di 
 116C  26: FF 16 0037 R         		call	word ptr es:var_667 
 1171  D3 CA                    		ror	dx, cl 
 1173  FE CB                    		dec	bl 
 1175  79 E6                    		jns	short loc_6148 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-66
                                                            

 1177  26: 8A 1E 0035 R         		mov	bl, es:var_665 
 117C  0A DB                    		or	bl, bl 
 117E  75 07                    		jnz	short loc_6172 
 1180  4F                       		dec	di 
 1181  0A C9                    		or	cl, cl 
 1183  74 29                    		jz	short loc_6199 
 1185  EB 11                    		jmp	short loc_6183 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1187                           loc_6172: 
 1187  02 CB                    		add	cl, bl 
 1189  80 F9 08                 		cmp	cl, 8 
 118C  72 0A                    		jb	short loc_6183 
 118E  88 14                    		mov	[si], dl 
 1190  74 1C                    		jz	short loc_6199 
 1192  46                       		inc	si 
 1193  8A D6                    		mov	dl, dh 
 1195  80 E9 08                 		sub	cl, 8 
 1198                           loc_6183: 
 1198  8A 04                    		mov	al, [si] 
 119A  D2 E0                    		shl	al, cl 
 119C  D2 E8                    		shr	al, cl 
 119E  8A F0                    		mov	dh, al 
 11A0  B5 08                    		mov	ch, 8 
 11A2  2A E9                    		sub	ch, cl 
 11A4  8A CD                    		mov	cl, ch 
 11A6  D2 EA                    		shr	dl, cl 
 11A8  D2 E2                    		shl	dl, cl 
 11AA  0A F2                    		or	dh, dl 
 11AC  88 34                    		mov	[si], dh 
 11AE                           loc_6199: 
 11AE  1F                       		pop	ds 
 11AF  89 3E 0031 R             		mov	ds:var_661, di 
 11B3  C3                       		ret 
                                NWRITE		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 11B4                           FNOR: 
 11B4  0A D0                    		or	dl, al 
 11B6  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 11B7                           FNAND: 
 11B7  22 D0                    		and	dl, al 
 11B9  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 11BA                           FNINV: 
 11BA  34 FF                    		xor	al, 0FFh 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-67
                                                            

                                 
 11BC                           FNSET: 
 11BC  8A D0                    		mov	dl, al 
 11BE  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 11BF                           FNXOR: 
 11BF  32 D0                    		xor	dl, al 
 11C1  C3                       		ret 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 11C2                           PNTINI		proc near 
 11C2  3C 04                    		cmp	al, 4 
 11C4  72 02                    		jb	short PNTINX 
 11C6  B0 00                    		mov	al, 0 
 11C8                           PNTINX: 
 11C8  A2 0039 R                		mov	ds:var_669, al 
 11CB  F8                       		clc 
 11CC  C3                       		ret 
                                PNTINI		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 11CD                           SCANR		proc near 
 11CD  1E                       		push	ds 
 11CE  8B FA                    		mov	di, dx 
 11D0  E8 100D R                		call	SETPTR 
 11D3  E8 1277 R                		call	sub_6262 
 11D6  2A DC                    		sub	bl, ah 
 11D8  8A D3                    		mov	dl, bl 
 11DA  8A 24                    		mov	ah, [si] 
 11DC  51                       		push	cx 
 11DD                           loc_61C8: 
 11DD  D2 CC                    		ror	ah, cl 
 11DF  D2 CD                    		ror	ch, cl 
 11E1  72 FA                    		jb	short loc_61C8 
 11E3  59                       		pop	cx 
 11E4  B3 00                    		mov	bl, 0 
 11E6  26: 8A 3E 0039 R         		mov	bh, es:var_669 
 11EB  26: 80 3E 000A R 01      		cmp	byte ptr es:var_63a, 1 
 11F1  74 03                    		jz	short loc_61E1 
 11F3  80 E7 01                 		and	bh, 1 
 11F6                           loc_61E1: 
 11F6  8A C3                    		mov	al, bl 
 11F8  D3 C0                    		rol	ax, cl 
 11FA  3A C7                    		cmp	al, bh 
 11FC  75 16                    		jnz	short loc_61FF 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-68
                                                            

 11FE  4F                       		dec	di 
 11FF  74 0B                    		jz	short loc_61F7 
 1201  D2 CD                    		ror	ch, cl 
 1203  72 F1                    		jb	short loc_61E1 
 1205  46                       		inc	si 
 1206  8A 24                    		mov	ah, [si] 
 1208  FE CA                    		dec	dl 
 120A  75 EA                    		jnz	short loc_61E1 
 120C                           loc_61F7: 
 120C  33 DB                    		xor	bx, bx 
 120E  8B D3                    		mov	dx, bx 
 1210  8A CA                    		mov	cl, dl 
 1212  1F                       		pop	ds 
 1213  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1214                           loc_61FF: 
 1214  26: 89 36 0000 E         		mov	es:CSAVEA, si 
 1219  26: 88 2E 0000 E         		mov	BYTE PTR es:CSAVEM, ch 
 121E  57                       		push	di 
 121F  26: 8A 36 0030 R         		mov	dh, es:var_660 
 1224  8A DE                    		mov	bl, dh 
 1226  51                       		push	cx 
 1227  26: 80 3E 000A R 01      		cmp	byte ptr es:var_63a, 1 
 122D  74 09                    		jz	short loc_6223 
 122F  80 E6 01                 		and	dh, 1 
 1232  8A DE                    		mov	bl, dh 
 1234  EB 02                    		jmp	short loc_6223 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1236                           loc_6221: 
 1236  D2 C6                    		rol	dh, cl 
 1238                           loc_6223: 
 1238  D2 CD                    		ror	ch, cl 
 123A  72 FA                    		jb	short loc_6221 
 123C  59                       		pop	cx 
 123D  33 FF                    		xor	di, di 
 123F  EB 08                    		jmp	short loc_6234 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1241                           loc_622C: 
 1241  B0 00                    		mov	al, 0 
 1243  D3 C0                    		rol	ax, cl 
 1245  3A C7                    		cmp	al, bh 
 1247  74 1B                    		jz	short loc_624F 
 1249                           loc_6234: 
 1249  3A C3                    		cmp	al, bl 
 124B  74 06                    		jz	short loc_623E 
 124D  20 2C                    		and	[si], ch 
 124F  08 34                    		or	[si], dh 
 1251  B3 FF                    		mov	bl, 0FFh 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-69
                                                            

 1253                           loc_623E: 
 1253  47                       		inc	di 
 1254  D2 CE                    		ror	dh, cl 
 1256  D2 CD                    		ror	ch, cl 
 1258  72 E7                    		jb	short loc_622C 
 125A  46                       		inc	si 
 125B  8A 24                    		mov	ah, [si] 
 125D  FE CA                    		dec	dl 
 125F  75 E0                    		jnz	short loc_622C 
 1261  D2 C5                    		rol	ch, cl 
 1263  4E                       		dec	si 
 1264                           loc_624F: 
 1264  5A                       		pop	dx 
 1265  FE C3                    		inc	bl 
 1267  74 02                    		jz	short loc_6256 
 1269  B1 00                    		mov	cl, 0 
 126B                           loc_6256: 
 126B  8B DF                    		mov	bx, di 
 126D  1F                       		pop	ds 
 126E  89 36 0017 R             		mov	ds:var_647, si 
 1272  88 2E 001B R             		mov	ds:var_64b, ch 
 1276  C3                       		ret 
                                SCANR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 1277                           sub_6262	proc near 
 1277  8B C6                    		mov	ax, si 
 1279  BB 2000                  		mov	bx, 2000h 
 127C  3B C3                    		cmp	ax, bx 
 127E  72 02                    		jb	short loc_626D 
 1280  2B C3                    		sub	ax, bx 
 1282                           loc_626D: 
 1282  B3 50                    		mov	bl, 80 
 1284  F6 F3                    		div	bl 
 1286  C3                       		ret 
                                sub_6262	endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 1287                           SCANL		proc near 
 1287  1E                       		push	ds 
 1288  E8 100D R                		call	SETPTR 
 128B  8A F0                    		mov	dh, al 
 128D  E8 1277 R                		call	sub_6262 
 1290  8A D4                    		mov	dl, ah 
 1292  8A 24                    		mov	ah, [si] 
 1294  51                       		push	cx 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-70
                                                            

 1295                           loc_6280: 
 1295  D2 CC                    		ror	ah, cl 
 1297  D2 CD                    		ror	ch, cl 
 1299  72 FA                    		jb	short loc_6280 
 129B  59                       		pop	cx 
 129C  26: 8A 1E 0030 R         		mov	bl, es:var_660 
 12A1  26: 8A 3E 0039 R         		mov	bh, es:var_669 
 12A6  26: 80 3E 000A R 01      		cmp	byte ptr es:var_63a, 1 
 12AC  74 04                    		jz	short loc_629D 
 12AE  81 E3 0101               		and	bx, 101h 
 12B2                           loc_629D: 
 12B2  D2 CF                    		ror	bh, cl 
 12B4  D2 CB                    		ror	bl, cl 
 12B6  33 FF                    		xor	di, di 
 12B8  EB 13                    		jmp	short loc_62B8 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 12BA                           loc_62A5: 
 12BA  B0 00                    		mov	al, 0 
 12BC  D3 C8                    		ror	ax, cl 
 12BE  3A C7                    		cmp	al, bh 
 12C0  74 18                    		jz	short loc_62C5 
 12C2  3A C3                    		cmp	al, bl 
 12C4  74 06                    		jz	short loc_62B7 
 12C6  20 2C                    		and	[si], ch 
 12C8  08 34                    		or	[si], dh 
 12CA  B3 FF                    		mov	bl, -1 
 12CC                           loc_62B7: 
 12CC  47                       		inc	di 
 12CD                           loc_62B8: 
 12CD  D2 C6                    		rol	dh, cl 
 12CF  D2 C5                    		rol	ch, cl 
 12D1  72 E7                    		jb	short loc_62A5 
 12D3  4E                       		dec	si 
 12D4  8A 24                    		mov	ah, [si] 
 12D6  FE CA                    		dec	dl 
 12D8  79 E0                    		jns	short loc_62A5 
 12DA                           loc_62C5: 
 12DA  8A C3                    		mov	al, bl 
 12DC  8B DF                    		mov	bx, di 
 12DE  0B DB                    		or	bx, bx 
 12E0  75 04                    		jnz	short loc_62D1 
 12E2  B1 00                    		mov	cl, 0 
 12E4  1F                       		pop	ds 
 12E5  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 12E6                           loc_62D1: 
 12E6  D2 CD                    		ror	ch, cl 
 12E8  72 01                    		jb	short loc_62D6 
 12EA  46                       		inc	si 
 12EB                           loc_62D6: 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-71
                                                            

 12EB  FE C0                    		inc	al 
 12ED  74 02                    		jz	short loc_62DC 
 12EF  B1 00                    		mov	cl, 0 
 12F1                           loc_62DC: 
 12F1  1F                       		pop	ds 
 12F2  88 2E 001B R             		mov	ds:var_64b, ch 
 12F6  89 36 0017 R             		mov	ds:var_647, si 
 12FA  C3                       		ret 
                                SCANL		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                ; Start of another module? 
                                ;		align 10h 
                                 
                                PUBLIC  RDPEN, RDTRIG, RDSTIK, POLLEV 
                                 
 12FB  00                       ISREVT		db 0 
 12FC  0000                     LPWSDN		dw 0 
 12FE  0000                     LPLGX		dw 0 
 1300  0000                     LPLGY		dw 0 
 1302  0000                     LPDOWN		dw 0                    ; -1 if	current
				ly down,	0 if up 
 1304  0000                     LPGX		dw 0 
 1306  0000                     LPGY		dw 0 
 1308  0001                     LPROW		dw 1 
 130A  0001                     LPCOL		dw 1 
 130C  0001                     LPLROW		dw 1 
 130E  0001                     LPLCOL		dw 1 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 1310                           LPENQR		proc near 
 1310  1E                       		push	ds 
 1311  0E                       		push	cs 
 1312  1F                       		pop	ds 
                                		assume ds:CSEG 
 1313  50                       		push	ax 
 1314  53                       		push	bx 
 1315  51                       		push	cx 
 1316  52                       		push	dx 
 1317  B4 04                    		mov	ah, 4 
 1319  CD 10                    		int	10h		; - VIDEO - READ LIGHT PEN POSITION 
				(all but PS) 
                                					; Return: AH = 00h light pen switch not	ac
				tivated 
                                					; AH = 01h light pen values in registers 
                                					; DH,DL	= row,columnCH = raster	line (0-19
				9) (EGA) old graphics	modes 
                                					; CX = (EGA) raster line 
                                					; BX = pixel column 
 131B  0A E4                    		or	ah, ah 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-72
                                                            

 131D  74 3F                    		jz	short NOSWIT 
 131F  89 1E 1304 R             		mov	LPGX, bx 
 1323  FE C6                    		inc	dh 
 1325  88 36 130C R             		mov	byte ptr LPLROW, dh 
 1329  FE C2                    		inc	dl 
 132B  88 16 130E R             		mov	byte ptr LPLCOL, dl 
 132F  88 2E 1306 R             		mov	byte ptr LPGY, ch 
 1333  83 3E 1302 R FF          		cmp	LPDOWN,	-1 
 1338  74 1E                    		jz	short LPENQX 
 133A  C6 06 12FB R 01          		mov	ISREVT,	1 
 133F  B8 FFFF                  		mov	ax, -1 
 1342  A3 1302 R                		mov	LPDOWN,	ax 
 1345  A3 12FC R                		mov	LPWSDN,	ax 
 1348  89 1E 12FE R             		mov	LPLGX, bx 
 134C  88 2E 1300 R             		mov	byte ptr LPLGY,	ch 
 1350  88 36 1308 R             		mov	byte ptr LPROW,	dh 
 1354  88 16 130A R             		mov	byte ptr LPCOL,	dl 
 1358                           LPENQX: 
 1358  5A                       		pop	dx 
 1359  59                       		pop	cx 
 135A  5B                       		pop	bx 
 135B  58                       		pop	ax 
 135C  1F                       		pop	ds 
                                		assume ds:nothing 
 135D  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 135E                           NOSWIT: 
 135E  C7 06 1302 R 0000        		mov	ds:LPDOWN, 0 
 1364  EB F2                    		jmp	short LPENQX 
                                LPENQR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Light	pen control via	[AL] 
                                ;  -2: Pen ON 
                                ;  -1: Pen OFF 
                                ;   0: Return -1 if pen	was down since last pol
				l, else 0. 
                                ;   1: Return X	Graphics Coordinate where pen w
				as last activated. 
                                ;   2: Return Y	Graphics Coordinate where pen w
				as last activated. 
                                ;   3: Return -1 if pen	is currently down, 0 if
					currently up. 
                                ;   4: Return last known valid X Graphics Coord
				inate. 
                                ;   5: Return last known valid Y Graphics Coord
				inate. 
                                ;   6: Return character	row where pen was last 
				activated. 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-73
                                                            

                                ;   7: Return character	column where pen was la
				st activated. 
                                ;   8: Return last known character row. 
                                ;   9: Return last known character column. 
                                 
 1366                           RDPEN		proc near 
 1366  1E                       		push	ds 
 1367  0E                       		push	cs 
 1368  1F                       		pop	ds 
                                		assume ds:CSEG 
 1369  0A C0                    		or	al, al 
 136B  78 17                    		js	short LPNOFF 
 136D  56                       		push	si 
 136E  D0 E0                    		shl	al, 1 
 1370  B4 00                    		mov	ah, 0 
 1372  BE 12FC R                		mov	si, offset LPWSDN 
 1375  03 F0                    		add	si, ax 
 1377  2E: 8B 1C                		mov	bx, cs:[si] 
 137A  0B C0                    		or	ax, ax 
 137C  75 03                    		jnz	short RDPENX 
 137E  A3 12FC R                		mov	LPWSDN,	ax	; Not down since last poll 
 1381                           RDPENX: 
 1381  5E                       		pop	si 
 1382  1F                       		pop	ds 
                                		assume ds:nothing 
 1383  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1384                           LPNOFF: 
 1384  3C FE                    		cmp	al, -2		; Or should it be ON? 
 1386  74 07                    		jz	short LPNON 
 1388  80 26 06F6 R FE          		and	ds:EVTSET, 0FEh	; Disable light	pen readi
				ng 
 138D  1F                       		pop	ds 
 138E  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 138F                           LPNON: 
 138F  80 0E 06F6 R 01          		or	ds:EVTSET, 1	; Enable light pen reading 
 1394  33 C0                    		xor	ax, ax 
 1396  A3 1302 R                		mov	ds:LPDOWN, ax 
 1399  A3 12FC R                		mov	ds:LPWSDN, ax	; Not down since last poll 
 139C  1F                       		pop	ds 
 139D  C3                       		ret 
                                RDPEN		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 139E                           RDTRIG		proc near 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-74
                                                            

 139E  52                       		push	dx 
 139F  51                       		push	cx 
 13A0  33 C9                    		xor	cx, cx 
 13A2  8A C8                    		mov	cl, al 
 13A4  3C 01                    		cmp	al, 1 
 13A6  75 02                    		jnz	short loc_639F 
 13A8  B1 02                    		mov	cl, 2 
 13AA                           loc_639F: 
 13AA  3C 02                    		cmp	al, 2 
 13AC  75 02                    		jnz	short loc_63A5 
 13AE  B1 01                    		mov	cl, 1 
 13B0                           loc_63A5: 
 13B0  80 C1 04                 		add	cl, 4 
 13B3  BA 0201                  		mov	dx, 201h 
 13B6  EC                       		in	al, dx		; Game I/O port 
                                					; bits 0-3: Coordinates	(resistive, time-d
				ependent inputs) 
                                					; bits 4-7: Buttons/Triggers (digital inpu
				ts) 
 13B7  F6 D0                    		not	al 
 13B9  D2 C8                    		ror	al, cl 
 13BB  24 01                    		and	al, 1 
 13BD  0A E4                    		or	ah, ah 
 13BF  74 16                    		jz	short RDTRGX 
 13C1  FB                       		sti 
 13C2  2E: A0 06F7 R            		mov	al, cs:LSTRIG 
 13C6  D2 C8                    		ror	al, cl 
 13C8  8A E8                    		mov	ch, al 
 13CA  24 FE                    		and	al, 0FEh 
 13CC  D2 C0                    		rol	al, cl 
 13CE  2E: A2 06F7 R            		mov	cs:LSTRIG, al 
 13D2  8A C5                    		mov	al, ch 
 13D4  24 01                    		and	al, 1 
 13D6  FA                       		cli 
 13D7                           RDTRGX: 
 13D7  59                       		pop	cx 
 13D8  5A                       		pop	dx 
 13D9  C3                       		ret 
                                RDTRIG		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 13DA                           RDSTIK		proc near 
 13DA  50                       		push	ax 
 13DB  51                       		push	cx 
 13DC  52                       		push	dx 
 13DD  3C 04                    		cmp	al, 4 
 13DF  F5                       		cmc 
 13E0  72 1D                    		jb	short RDSTKX 
 13E2  8A C8                    		mov	cl, al 
 13E4  B0 01                    		mov	al, 1 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-75
                                                            

 13E6  D2 E0                    		shl	al, cl 
 13E8  8A C8                    		mov	cl, al 
 13EA  33 DB                    		xor	bx, bx 
 13EC  BA 0201                  		mov	dx, 201h 
 13EF  EC                       		in	al, dx		; Game I/O port 
                                					; bits 0-3: Coordinates	(resistive, time-d
				ependent inputs) 
                                					; bits 4-7: Buttons/Triggers (digital inpu
				ts) 
 13F0  22 C1                    		and	al, cl 
 13F2  75 0B                    		jnz	short RDSTKX 
 13F4  4B                       		dec	bx 
 13F5  4B                       		dec	bx 
 13F6  FA                       		cli 
 13F7  EE                       		out	dx, al		; Game I/O port 
                                					; bits 0-3: Coordinates	(resistive, time-d
				ependent inputs) 
                                					; bits 4-7: Buttons/Triggers (digital inpu
				ts) 
 13F8                           RDSTLP: 
 13F8  43                       		inc	bx 
 13F9  EC                       		in	al, dx		; Game I/O port 
                                					; bits 0-3: Coordinates	(resistive, time-d
				ependent inputs) 
                                					; bits 4-7: Buttons/Triggers (digital inpu
				ts) 
 13FA  22 C1                    		and	al, cl 
 13FC  75 FA                    		jnz	short RDSTLP 
 13FE  FB                       		sti 
 13FF                           RDSTKX: 
 13FF  5A                       		pop	dx 
 1400  59                       		pop	cx 
 1401  58                       		pop	ax 
 1402  C3                       		ret 
                                RDSTIK		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 1403                           POLLEV		proc near 
 1403  FC                       		cld 
 1404  FA                       		cli 
 1405  2E: 80 3E 12FB R 00      		cmp	cs:ISREVT, 0	; Light	pen event? 
 140B  2E: C6 06 12FB R 00      		mov	cs:ISREVT, 0 
 1411  FB                       		sti 
 1412  75 0D                    		jnz	short POLEVX 
 1414  1E                       		push	ds 
 1415  33 C0                    		xor	ax, ax 
 1417  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 1419  A1 041A                  		mov	ax, ds:41Ah	; Next keyboard	buffer item 
 141C  3B 06 041C               		cmp	ax, ds:41Ch	; Last keyboard	buffer item 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-76
                                                            

 1420  1F                       		pop	ds 
                                		assume ds:nothing 
 1421                           POLEVX: 
 1421  C3                       		ret 
                                POLLEV		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                ; Start of another module? 
                                ;		align 10h 
                                 
                                PUBLIC  DONOTE 
                                 
 1422  0084[                    NTARRY		db 84h dup(0) 
            00                  
                         ]      
                                
 14A6  0000                     CURNOT		dw 0 
 14A8  0000                     NOTPTR		dw 0 
 14AA  00                       		db 0            ; Unused? 
 14AB  00                       		db 0 
 14AC  00                       byte_64AA	db 0 
 14AD  0000                     word_64AB	dw 0 
                                 
 14AF  00                       byte_64AD	db 0 
 14B0  00                       ISRCNT		db 0            ; Timer	ISR entry count
				er. Because the timer ticks 
                                				; faster, only chain to	the previous handle
				r when 
                                				; the counter goes to zero. 
 14B1  00 00 00 00              OLDTMI		dd 0            ; Previous timer interr
				upt vector 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 14B5                           TMRISR		proc far 
 14B5  50                       		push	ax 
 14B6  53                       		push	bx 
 14B7  52                       		push	dx 
 14B8  56                       		push	si 
 14B9  1E                       		push	ds 
 14BA  0E                       		push	cs 
 14BB  1F                       		pop	ds 
                                		assume ds:CSEG 
 14BC  F6 06 06F6 R 02          		test	EVTSET,	2	; Speaker on? 
 14C1  75 06                    		jnz	short TMRIS1	; If not, turn it off now 
 14C3  E4 61                    		in	al, 61h		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-77
                                                            

                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 14C5  24 FD                    		and	al, 0FDh 
 14C7  E6 61                    		out	61h, al		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 14C9                           TMRIS1: 
 14C9  FB                       		sti 
 14CA  F6 06 06F6 R 02          		test	EVTSET,	2	; Speaker on? 
 14CF  74 1D                    		jz	short loc_64EC 
 14D1  C6 06 14AF R 02          		mov	byte_64AD, 2 
 14D6  83 3E 14AD R 00          		cmp	word_64AB, 0 
 14DB  75 13                    		jnz	short loc_64EF 
 14DD  80 3E 14AC R 00          		cmp	byte_64AA, 0 
 14E2  75 0C                    		jnz	short loc_64EF 
 14E4  8B 36 14A6 R             		mov	si, CURNOT 
 14E8  3B 36 14A8 R             		cmp	si, NOTPTR 
 14EC  75 27                    		jnz	short loc_6514 
 14EE                           loc_64EC: 
 14EE  EB 75                    		jmp	short loc_6564 
 14F0                           loc_64EF: 
 14F0  FF 0E 14AD R             		dec	word_64AB 
 14F4  75 6F                    		jnz	short loc_6564 
 14F6  FE 0E 14AC R             		dec	byte_64AA 
 14FA  79 69                    		jns	short loc_6564 
 14FC  8B 36 14A6 R             		mov	si, CURNOT 
 1500  3B 36 14A8 R             		cmp	si, NOTPTR 
 1504  75 13                    		jnz	short loc_6518 
 1506  80 26 06F6 R FD          		and	EVTSET,	0FDh	; Clear	speaker	event bit 
 150B  FA                       		cli 
 150C  E4 61                    		in	al, 61h		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 150E  24 FD                    		and	al, 0FDh 
 1510  E6 61                    		out	61h, al		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 1512  FB                       		sti 
 1513  EB 50                    		jmp	short loc_6564 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-78
                                                            

                                ; ---------------------------------------------
				------------------------------ 
                                 
 1515                           loc_6514: 
 1515  B0 B6                    		mov	al, 0B6h 
 1517  E6 43                    		out	43h, al		; Timer	8253-5 (AT: 8254.2). 
 1519                           loc_6518: 
 1519  BB 1422 R                		mov	bx, offset NTARRY 
 151C  8B 00                    		mov	ax, [bx+si] 
 151E  0B C0                    		or	ax, ax 
 1520  75 07                    		jnz	short loc_6528 
 1522  FA                       		cli 
 1523  E4 61                    		in	al, 61h		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 1525  24 FD                    		and	al, 0FDh 
 1527  EB 0B                    		jmp	short loc_6533 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1529                           loc_6528: 
 1529  E6 42                    		out	42h, al		; Timer	8253-5 (AT: 8254.2). 
 152B  8A C4                    		mov	al, ah 
 152D  E6 42                    		out	42h, al		; Timer	8253-5 (AT: 8254.2). 
 152F  FA                       		cli 
 1530  E4 61                    		in	al, 61h		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 1532  0C 03                    		or	al, 3 
 1534                           loc_6533: 
 1534  E6 61                    		out	61h, al		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 1536  FB                       		sti 
 1537  46                       		inc	si 
 1538  46                       		inc	si 
 1539  8B 00                    		mov	ax, [bx+si] 
 153B  46                       		inc	si 
 153C  46                       		inc	si 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-79
                                                            

 153D  E8 16BA R                		call	NXTNOT 
 1540  89 36 14A6 R             		mov	CURNOT,	si 
 1544  BB 1746                  		mov	bx, 5958 
 1547  F7 E3                    		mul	bx 
 1549  B3 00                    		mov	bl, 0 
 154B  D1 E0                    		shl	ax, 1 
 154D  D1 D2                    		rcl	dx, 1 
 154F  D1 E0                    		shl	ax, 1 
 1551  D1 D2                    		rcl	dx, 1 
 1553  D1 E0                    		shl	ax, 1 
 1555  D1 D2                    		rcl	dx, 1 
 1557  D1 E0                    		shl	ax, 1 
 1559  D1 D2                    		rcl	dx, 1 
 155B  D1 D3                    		rcl	bx, 1 
 155D  88 1E 14AC R             		mov	byte_64AA, bl 
 1561  89 16 14AD R             		mov	word_64AB, dx 
 1565                           loc_6564: 
 1565  FE 0E 14B0 R             		dec	ISRCNT 
 1569  79 0B                    		jns	short CHKSTP 
 156B  B8 0800                  		mov	ax, 2048	; 65536/32 
 156E  E6 40                    		out	40h, al		; Timer	8253-5 (AT: 8254.2). 
 1570  8A C4                    		mov	al, ah 
 1572  E6 40                    		out	40h, al		; Timer	8253-5 (AT: 8254.2). 
 1574  EB 26                    		jmp	short TMRRST 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1576                           CHKSTP: 
 1576  75 33                    		jnz	short TMRISX 
 1578  F6 06 06F6 R 02          		test	EVTSET,	2	; Speaker still	on? 
 157D  75 1D                    		jnz	short TMRRST	; If so, keep going. 
 157F  FE 0E 14AF R             		dec	byte_64AD 
 1583  75 17                    		jnz	short TMRRST 
 1585  33 C0                    		xor	ax, ax		; Reset	timer interval to normal 
 1587  E6 40                    		out	40h, al		; Timer	8253-5 (AT: 8254.2). 
 1589  E6 40                    		out	40h, al		; Timer	8253-5 (AT: 8254.2). 
 158B  C5 16 14B1 R             		lds	dx, OLDTMI	; Restore old interrupt	vector
				 
                                		assume ds:nothing 
 158F  1E                       		push	ds 
 1590  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 1592  89 16 0020               		mov	ds:20h,	dx 
 1596  58                       		pop	ax 
 1597  A3 0022                  		mov	ds:22h,	ax 
 159A  EB 05                    		jmp	short TMRCHN 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 159C                           TMRRST: 
 159C  C6 06 14B0 R 20          		mov	ds:ISRCNT, 32	; Timer	ticks 32x faster; r
				estart period. 
 15A1                           TMRCHN: 
 15A1  1F                       		pop	ds 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-80
                                                            

                                		assume ds:nothing 
 15A2  5E                       		pop	si 
 15A3  5A                       		pop	dx 
 15A4  5B                       		pop	bx 
 15A5  58                       		pop	ax 
 15A6  2E: FF 2E 14B1 R         		jmp	cs:OLDTMI	; Chain	to previous timer ISR 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 15AB                           TMRISX: 
 15AB  1F                       		pop	ds 
 15AC  5E                       		pop	si 
 15AD  5A                       		pop	dx 
 15AE  5B                       		pop	bx 
 15AF  B0 20                    		mov	al, 20h		; Send EOI 
 15B1  E6 20                    		out	20h, al		; Interrupt controller,	8259A. 
 15B3  58                       		pop	ax 
 15B4  CF                       		iret 
                                TMRISR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Queues note for execution, saves all regs. 
                                ; On entry: 
                                ;   AL = voice (0=foreground, 1=back, -1=off) 
                                ;   CX = frequency 
                                ;   DX = duration (1=18.7ms) 
                                ; 
                                 
 15B5                           DONOTE		proc near 
 15B5  1E                       		push	ds 
 15B6  53                       		push	bx 
 15B7  56                       		push	si 
 15B8  0E                       		push	cs 
 15B9  1F                       		pop	ds 
                                		assume ds:CSEG 
 15BA  3C FF                    		cmp	al, -1		; Note off? 
 15BC  75 21                    		jnz	short DOPLAY 
 15BE  F6 06 06F6 R 02          		test	EVTSET,	2	; Speaker on? 
 15C3  74 15                    		jz	short DONOTX 
 15C5  FA                       		cli 
 15C6  8B 1E 14A8 R             		mov	bx, NOTPTR 
 15CA  89 1E 14A6 R             		mov	CURNOT,	bx 
 15CE  80 26 06F6 R FD          		and	EVTSET,	0FDh	; Clear	event bit 
 15D3  E4 61                    		in	al, 61h		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-81
                                                            

 15D5  24 FD                    		and	al, 0FDh 
 15D7  E6 61                    		out	61h, al		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 15D9  FB                       		sti 
 15DA                           DONOTX: 
 15DA  F8                       		clc 
 15DB  5E                       		pop	si 
 15DC  5B                       		pop	bx 
 15DD  1F                       		pop	ds 
                                		assume ds:nothing 
 15DE  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 15DF                           DOPLAY: 
 15DF  50                       		push	ax 
 15E0  52                       		push	dx 
 15E1  B8 0013                  		mov	ax, 19 
 15E4  3B C1                    		cmp	ax, cx 
 15E6  72 04                    		jb	short DODIV 
 15E8  33 C0                    		xor	ax, ax 
 15EA  EB 08                    		jmp	short NXNOTE 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 15EC                           DODIV: 
 15EC  BA 0012                  		mov	dx, 12h 
 15EF  B8 34DC                  		mov	ax, 34DCh 
 15F2  F7 F1                    		div	cx		; Divide 1,193,180 by CX 
 15F4                           NXNOTE: 
 15F4  50                       		push	ax 
 15F5  1E                       		push	ds 
 15F6  33 C0                    		xor	ax, ax 
 15F8  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 15FA  BB 0471                  		mov	bx, 471h	; Ctrl+Break flag 
 15FD  88 07                    		mov	[bx], al	; Zero out the flag 
 15FF  1F                       		pop	ds 
                                		assume ds:nothing 
 1600  8B 36 14A8 R             		mov	si, ds:NOTPTR 
 1604  56                       		push	si 
 1605  83 C6 04                 		add	si, 4 
 1608  E8 16BA R                		call	NXTNOT 
 160B                           WAITLP: 
 160B  1E                       		push	ds 
 160C  33 C0                    		xor	ax, ax 
 160E  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-82
                                                            

 1610  BB 0471                  		mov	bx, 471h	; Ctrl+Break flag 
 1613  3A 07                    		cmp	al, [bx]	; Break	flag set? 
 1615  1F                       		pop	ds 
                                		assume ds:nothing 
 1616  75 06                    		jnz	short WTDONE 
 1618  3B 36 14A6 R             		cmp	si, ds:CURNOT 
 161C  74 ED                    		jz	short WAITLP 
 161E                           WTDONE: 
 161E  5E                       		pop	si 
 161F  58                       		pop	ax 
 1620  BB 1422 R                		mov	bx, offset NTARRY 
 1623  89 00                    		mov	[bx+si], ax 
 1625  46                       		inc	si 
 1626  46                       		inc	si 
 1627  58                       		pop	ax 
 1628  89 00                    		mov	[bx+si], ax 
 162A  46                       		inc	si 
 162B  46                       		inc	si 
 162C  E8 16BA R                		call	NXTNOT 
 162F  89 36 14A8 R             		mov	ds:NOTPTR, si 
 1633  8B F0                    		mov	si, ax 
 1635  FA                       		cli 
 1636  F6 06 06F6 R 02          		test	ds:EVTSET, 2	; Speaker on? 
 163B  75 37                    		jnz	short TMISON 
 163D  B8 0001                  		mov	ax, 1 
 1640  A3 14AD R                		mov	ds:word_64AB, ax 
 1643  48                       		dec	ax 
 1644  A2 14AC R                		mov	ds:byte_64AA, al 
 1647  3A 06 14B0 R             		cmp	al, ds:ISRCNT	; Is the timer ISR still go
				ing? 
 164B  75 27                    		jnz	short TMISON	; If yes, no need to install
				 ISR 
 164D  FE 0E 14B0 R             		dec	ds:ISRCNT	; ISRCNT was 0,	now -1 
 1651  06                       		push	es 
 1652  1E                       		push	ds 
 1653  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 1655  C4 06 0020               		les	ax, DWORD PTR DS:[20h]	; Install timer	IS
				R (IRQ0, vector 08h) 
 1659  BA 14B5 R                		mov	dx, offset TMRISR 
 165C  89 16 0020               		mov	ds:20h,	dx 
 1660  0E                       		push	cs 
 1661  5A                       		pop	dx 
 1662  89 16 0022               		mov	ds:22h,	dx 
 1666  1F                       		pop	ds 
                                		assume ds:nothing 
 1667  A3 14B1 R                		mov	word ptr ds:OLDTMI, ax 
 166A  8C C0                    		mov	ax, es 
 166C  A3 14B3 R                		mov	word ptr ds:OLDTMI+2, ax 
 166F  07                       		pop	es 
 1670  B0 B6                    		mov	al, 0B6h 
 1672  E6 43                    		out	43h, al		; Timer	8253-5 (AT: 8254.2). 
 1674                           TMISON: 
 1674  80 0E 06F6 R 02          		or	ds:EVTSET, 2	; Speaker on! 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Page     1-83
                                                            

 1679  FB                       		sti 
 167A  58                       		pop	ax 
 167B  3C 00                    		cmp	al, 0		; Play in the foreground? 
 167D  75 38                    		jnz	short GONOTX 
 167F                           FGNDLP: 
 167F  1E                       		push	ds 
 1680  33 C0                    		xor	ax, ax 
 1682  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 1684  BB 0471                  		mov	bx, 471h	; Ctrl+Break flag 
 1687  3A 07                    		cmp	al, [bx]	; Break	flag set? 
 1689  1F                       		pop	ds 
                                		assume ds:nothing 
 168A  75 2B                    		jnz	short GONOTX 
 168C  A1 14A6 R                		mov	ax, ds:CURNOT 
 168F  3B 06 14A8 R             		cmp	ax, ds:NOTPTR 
 1693  74 22                    		jz	short GONOTX 
 1695  0B F6                    		or	si, si 
 1697  74 E6                    		jz	short FGNDLP 
 1699  05 0004                  		add	ax, 4		; Advance pointer 
 169C  3D 0084                  		cmp	ax, 84h		; Wrapping around? 
 169F  75 02                    		jnz	short HAVPTR 
 16A1  33 C0                    		xor	ax, ax		; If yes, pointer wraps	to zero 
 16A3                           HAVPTR: 
 16A3  3B 06 14A8 R             		cmp	ax, ds:NOTPTR 
 16A7  75 D6                    		jnz	short FGNDLP 
 16A9  80 3E 14AC R 00          		cmp	ds:byte_64AA, 0 
 16AE  75 CF                    		jnz	short FGNDLP 
 16B0  83 3E 14AD R 06          		cmp	ds:word_64AB, 6 
 16B5  73 C8                    		jnb	short FGNDLP 
 16B7                           GONOTX: 
 16B7  E9 15DA R                		jmp	DONOTX 
                                DONOTE		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 16BA                           NXTNOT		proc near 
 16BA  81 FE 0084               		cmp	si, 84h 
 16BE  74 01                    		jz	short WRAP 
 16C0  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 16C1                           WRAP: 
 16C1  BE 0000                  		mov	si, 0 
 16C4  C3                       		ret 
                                NXTNOT		endp 
                                 
 16C5                           CSEG    ENDS 
                                        END 
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Symbols-1
                                                             

Segments and Groups:

                N a m e         	Size	Align	Combine Class

CSEG . . . . . . . . . . . . . .  	16C5	PARA	PUBLIC	'CODESG'
DSEG . . . . . . . . . . . . . .  	003A	PARA	PUBLIC	'DATASG'

Symbols:            

                N a m e         	Type	Value	Attr         

BADFNM . . . . . . . . . . . . .  	L NEAR	03E5	CSEG
BADMAP . . . . . . . . . . . . .  	L NEAR	0079	CSEG
BASDAT . . . . . . . . . . . . .  	L NEAR	0173	CSEG
BAUDTB . . . . . . . . . . . . .  	L WORD 	01BC	CSEG
BRKFLG . . . . . . . . . . . . .  	L BYTE 	06F8	CSEG
BYTE_5095  . . . . . . . . . . .  	L BYTE 	00B4	CSEG
BYTE_64AA  . . . . . . . . . . .  	L BYTE 	14AC	CSEG
BYTE_64AD  . . . . . . . . . . .  	L BYTE 	14AF	CSEG

CBFSEG . . . . . . . . . . . . .  	L WORD 	0230	CSEG
CBFSIZ . . . . . . . . . . . . .  	L WORD 	0232	CSEG
CBKINT . . . . . . . . . . . . .  	L WORD 	0001	DSEG
CBREAK . . . . . . . . . . . . .  	L NEAR	083A	CSEG
CBRKSG . . . . . . . . . . . . .  	L WORD 	0003	DSEG
CHKESC . . . . . . . . . . . . .  	L NEAR	085B	CSEG
CHKSTP . . . . . . . . . . . . .  	L NEAR	1576	CSEG
CKCOM1 . . . . . . . . . . . . .  	L NEAR	0376	CSEG
CKCOM2 . . . . . . . . . . . . .  	L NEAR	03B0	CSEG
CLREOL . . . . . . . . . . . . .  	N PROC	0B91	CSEG	Global	Length = 002C
CLREOX . . . . . . . . . . . . .  	L NEAR	0BB8	CSEG
CLRSCN . . . . . . . . . . . . .  	N PROC	0B64	CSEG	Global	Length = 002D
CM1CTL . . . . . . . . . . . . .  	L BYTE 	01EC	CSEG
CM1ISR . . . . . . . . . . . . .  	L NEAR	023C	CSEG
CM2CTL . . . . . . . . . . . . .  	L BYTE 	020E	CSEG
CM2ISR . . . . . . . . . . . . .  	F PROC	0242	CSEG	Length = 0117
CMPREP . . . . . . . . . . . . .  	N PROC	06DB	CSEG	Length = 001B
COMDLY . . . . . . . . . . . . .  	N PROC	06C5	CSEG	Length = 0016
COMEOI . . . . . . . . . . . . .  	L NEAR	0295	CSEG
COMERR . . . . . . . . . . . . .  	L NEAR	03EA	CSEG
COMISR . . . . . . . . . . . . .  	L NEAR	0246	CSEG
COMTBL . . . . . . . . . . . . .  	L WORD 	01E8	CSEG
CSAVEA . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
CSAVEM . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
CSRATR . . . . . . . . . . . . .  	N PROC	0C6E	CSEG	Global	Length = 0034
CSRDSP . . . . . . . . . . . . .  	N PROC	0BBD	CSEG	Global	Length = 0050
CSRERR . . . . . . . . . . . . .  	L NEAR	0C9F	CSEG
CTLBRK . . . . . . . . . . . . .  	F PROC	071B	CSEG	Length = 0007
CURNOT . . . . . . . . . . . . .  	L WORD 	14A6	CSEG
CVMODE . . . . . . . . . . . . .  	L BYTE 	000F	DSEG
CVPAGE . . . . . . . . . . . . .  	L BYTE 	0009	DSEG

DEBUG  . . . . . . . . . . . . .  	Text  		
DELAY  . . . . . . . . . . . . .  	L NEAR	06CB	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Symbols-2
                                                             

DOCLRS . . . . . . . . . . . . .  	L NEAR	0B67	CSEG
DODIV  . . . . . . . . . . . . .  	L NEAR	15EC	CSEG
DONOTE . . . . . . . . . . . . .  	N PROC	15B5	CSEG	Global	Length = 0105
DONOTX . . . . . . . . . . . . .  	L NEAR	15DA	CSEG
DOPFLT . . . . . . . . . . . . .  	L NEAR	0150	CSEG
DOPLAY . . . . . . . . . . . . .  	L NEAR	15DF	CSEG
DOSCRL . . . . . . . . . . . . .  	N PROC	0ADA	CSEG	Length = 0023
DOSCRX . . . . . . . . . . . . .  	L NEAR	0AF9	CSEG
DOVEC  . . . . . . . . . . . . .  	L NEAR	07AC	CSEG
DOWNC  . . . . . . . . . . . . .  	N PROC	0F5D	CSEG	Global	Length = 0016
DOWNCX . . . . . . . . . . . . .  	L NEAR	0F6B	CSEG

EDTMAP . . . . . . . . . . . . .  	N PROC	094B	CSEG	Global	Length = 0058
EQUIP  . . . . . . . . . . . . .  	L BYTE 	0733	CSEG
EVTSET . . . . . . . . . . . . .  	L BYTE 	06F6	CSEG

FETCHC . . . . . . . . . . . . .  	N PROC	0F1D	CSEG	Global	Length = 0008
FGNDLP . . . . . . . . . . . . .  	L NEAR	167F	CSEG
FKYADV . . . . . . . . . . . . .  	N PROC	0F12	CSEG	Global	Length = 0003
FKYFMT . . . . . . . . . . . . .  	N PROC	0F04	CSEG	Global	Length = 000E
FKYFMX . . . . . . . . . . . . .  	L NEAR	0F11	CSEG
FNAND  . . . . . . . . . . . . .  	L NEAR	11B7	CSEG
FNINV  . . . . . . . . . . . . .  	L NEAR	11BA	CSEG
FNOR . . . . . . . . . . . . . .  	L NEAR	11B4	CSEG
FNSET  . . . . . . . . . . . . .  	L NEAR	11BC	CSEG
FNXOR  . . . . . . . . . . . . .  	L NEAR	11BF	CSEG

GETFBC . . . . . . . . . . . . .  	N PROC	0096	CSEG	Global	Length = 001E
GETHED . . . . . . . . . . . . .  	N PROC	0050	CSEG	Global	Length = 0006
GONOTX . . . . . . . . . . . . .  	L NEAR	16B7	CSEG
GOSCUR . . . . . . . . . . . . .  	L NEAR	0BFD	CSEG
GOSRST . . . . . . . . . . . . .  	L NEAR	0EEE	CSEG
GRPINI . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
GRPSIZ . . . . . . . . . . . . .  	N PROC	00FA	CSEG	Global	Length = 000D
GSTCUR . . . . . . . . . . . . .  	L NEAR	0C9C	CSEG
GTASPC . . . . . . . . . . . . .  	N PROC	1082	CSEG	Global	Length = 0014
GTASPX . . . . . . . . . . . . .  	L NEAR	1095	CSEG
GWINI  . . . . . . . . . . . . .  	N PROC	0734	CSEG	Global	Length = 0068
GWINIX . . . . . . . . . . . . .  	L NEAR	0799	CSEG
GWTERM . . . . . . . . . . . . .  	N PROC	07B9	CSEG	Global	Length = 0063

HAVBSZ . . . . . . . . . . . . .  	L NEAR	0367	CSEG
HAVPTR . . . . . . . . . . . . .  	L NEAR	16A3	CSEG
HEIGHT . . . . . . . . . . . . .  	L NEAR	0103	CSEG

INFMAP . . . . . . . . . . . . .  	N PROC	0942	CSEG	Global	Length = 0009
INICMX . . . . . . . . . . . . .  	L NEAR	050B	CSEG
INICOM . . . . . . . . . . . . .  	N PROC	03EF	CSEG	Global	Length = 0120
INILPT . . . . . . . . . . . . .  	L NEAR	0764	CSEG
INKMAP . . . . . . . . . . . . .  	N PROC	08E0	CSEG	Global	Length = 0062
INMAPX . . . . . . . . . . . . .  	L NEAR	0949	CSEG
ISRCNT . . . . . . . . . . . . .  	L BYTE 	14B0	CSEG
ISRDSP . . . . . . . . . . . . .  	L WORD 	0234	CSEG
ISREVT . . . . . . . . . . . . .  	L BYTE 	12FB	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Symbols-3
                                                             

ISRFN0 . . . . . . . . . . . . .  	L NEAR	031F	CSEG
ISRFN1 . . . . . . . . . . . . .  	L NEAR	02E6	CSEG
ISRFN2 . . . . . . . . . . . . .  	L NEAR	0264	CSEG
ISRFN3 . . . . . . . . . . . . .  	L NEAR	0313	CSEG
ISRX . . . . . . . . . . . . . .  	L NEAR	02DD	CSEG

KEYINP . . . . . . . . . . . . .  	N PROC	081C	CSEG	Global	Length = 008B
KEYINX . . . . . . . . . . . . .  	L NEAR	0866	CSEG
KYBCLR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

LCPY . . . . . . . . . . . . . .  	N PROC	0CA2	CSEG	Global	Length = 0008
LEFTC  . . . . . . . . . . . . .  	N PROC	0F36	CSEG	Global	Length = 0011
LEFTCX . . . . . . . . . . . . .  	L NEAR	0F45	CSEG
LOC_5044 . . . . . . . . . . . .  	L NEAR	0063	CSEG
LOC_5060 . . . . . . . . . . . .  	L NEAR	007F	CSEG
LOC_506E . . . . . . . . . . . .  	L NEAR	008D	CSEG
LOC_5073 . . . . . . . . . . . .  	L NEAR	0092	CSEG
LOC_50CB . . . . . . . . . . . .  	L NEAR	00EA	CSEG
LOC_50CE . . . . . . . . . . . .  	L NEAR	00ED	CSEG
LOC_5187 . . . . . . . . . . . .  	L NEAR	01A6	CSEG
LOC_518F . . . . . . . . . . . .  	L NEAR	01AE	CSEG
LOC_5192 . . . . . . . . . . . .  	L NEAR	01B1	CSEG
LOC_523B . . . . . . . . . . . .  	L NEAR	0257	CSEG
LOC_5257 . . . . . . . . . . . .  	L NEAR	0273	CSEG
LOC_5262 . . . . . . . . . . . .  	L NEAR	027E	CSEG
LOC_52DC . . . . . . . . . . . .  	L NEAR	02F8	CSEG
LOC_52F2 . . . . . . . . . . . .  	L NEAR	030E	CSEG
LOC_5330 . . . . . . . . . . . .  	L NEAR	034C	CSEG
LOC_5333 . . . . . . . . . . . .  	L NEAR	034F	CSEG
LOC_5418 . . . . . . . . . . . .  	L NEAR	0434	CSEG
LOC_542A . . . . . . . . . . . .  	L NEAR	0446	CSEG
LOC_543D . . . . . . . . . . . .  	L NEAR	0459	CSEG
LOC_5446 . . . . . . . . . . . .  	L NEAR	0462	CSEG
LOC_5457 . . . . . . . . . . . .  	L NEAR	0473	CSEG
LOC_5463 . . . . . . . . . . . .  	L NEAR	047F	CSEG
LOC_546F . . . . . . . . . . . .  	L NEAR	048B	CSEG
LOC_5479 . . . . . . . . . . . .  	L NEAR	0495	CSEG
LOC_54DC . . . . . . . . . . . .  	L NEAR	04F8	CSEG
LOC_551B . . . . . . . . . . . .  	L NEAR	0537	CSEG
LOC_552C . . . . . . . . . . . .  	L NEAR	0548	CSEG
LOC_5555 . . . . . . . . . . . .  	L NEAR	0571	CSEG
LOC_557D . . . . . . . . . . . .  	L NEAR	0599	CSEG
LOC_55A3 . . . . . . . . . . . .  	L NEAR	05BF	CSEG
LOC_55B5 . . . . . . . . . . . .  	L NEAR	05D1	CSEG
LOC_55D4 . . . . . . . . . . . .  	L NEAR	05F0	CSEG
LOC_55DD . . . . . . . . . . . .  	L NEAR	05F9	CSEG
LOC_55DF . . . . . . . . . . . .  	L NEAR	05FB	CSEG
LOC_55F5 . . . . . . . . . . . .  	L NEAR	0611	CSEG
LOC_55F9 . . . . . . . . . . . .  	L NEAR	0615	CSEG
LOC_5606 . . . . . . . . . . . .  	L NEAR	0621	CSEG
LOC_560D . . . . . . . . . . . .  	L NEAR	0628	CSEG
LOC_563C . . . . . . . . . . . .  	L NEAR	0657	CSEG
LOC_5654 . . . . . . . . . . . .  	L NEAR	066F	CSEG
LOC_5662 . . . . . . . . . . . .  	L NEAR	067D	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Symbols-4
                                                             

LOC_5673 . . . . . . . . . . . .  	L NEAR	068E	CSEG
LOC_5684 . . . . . . . . . . . .  	L NEAR	069F	CSEG
LOC_568D . . . . . . . . . . . .  	L NEAR	06A8	CSEG
LOC_5696 . . . . . . . . . . . .  	L NEAR	06B1	CSEG
LOC_569F . . . . . . . . . . . .  	L NEAR	06BA	CSEG
LOC_56A6 . . . . . . . . . . . .  	L NEAR	06C1	CSEG
LOC_56EE . . . . . . . . . . . .  	L NEAR	0704	CSEG
LOC_57E9 . . . . . . . . . . . .  	L NEAR	07FF	CSEG
LOC_5871 . . . . . . . . . . . .  	L NEAR	0887	CSEG
LOC_5884 . . . . . . . . . . . .  	L NEAR	089A	CSEG
LOC_58D3 . . . . . . . . . . . .  	L NEAR	08E9	CSEG
LOC_58DA . . . . . . . . . . . .  	L NEAR	08F0	CSEG
LOC_58DC . . . . . . . . . . . .  	L NEAR	08F2	CSEG
LOC_58DE . . . . . . . . . . . .  	L NEAR	08F4	CSEG
LOC_58EA . . . . . . . . . . . .  	L NEAR	0900	CSEG
LOC_58F2 . . . . . . . . . . . .  	L NEAR	0908	CSEG
LOC_590A . . . . . . . . . . . .  	L NEAR	0920	CSEG
LOC_5912 . . . . . . . . . . . .  	L NEAR	0928	CSEG
LOC_5928 . . . . . . . . . . . .  	L NEAR	093E	CSEG
LOC_594D . . . . . . . . . . . .  	L NEAR	0963	CSEG
LOC_595D . . . . . . . . . . . .  	L NEAR	0973	CSEG
LOC_5965 . . . . . . . . . . . .  	L NEAR	097B	CSEG
LOC_5983 . . . . . . . . . . . .  	L NEAR	0999	CSEG
LOC_5989 . . . . . . . . . . . .  	L NEAR	099F	CSEG
LOC_598B . . . . . . . . . . . .  	L NEAR	09A1	CSEG
LOC_59D8 . . . . . . . . . . . .  	L NEAR	09EE	CSEG
LOC_59DB . . . . . . . . . . . .  	L NEAR	09F1	CSEG
LOC_5A06 . . . . . . . . . . . .  	L NEAR	0A1C	CSEG
LOC_5A35 . . . . . . . . . . . .  	L NEAR	0A4A	CSEG
LOC_5A4E . . . . . . . . . . . .  	L NEAR	0A63	CSEG
LOC_5A51 . . . . . . . . . . . .  	L NEAR	0A66	CSEG
LOC_5A57 . . . . . . . . . . . .  	L NEAR	0A6C	CSEG
LOC_5A6A . . . . . . . . . . . .  	L NEAR	0A7F	CSEG
LOC_5A6F . . . . . . . . . . . .  	L NEAR	0A84	CSEG
LOC_5A82 . . . . . . . . . . . .  	L NEAR	0A97	CSEG
LOC_5A89 . . . . . . . . . . . .  	L NEAR	0A9E	CSEG
LOC_5A9D . . . . . . . . . . . .  	L NEAR	0AB2	CSEG
LOC_5B42 . . . . . . . . . . . .  	L NEAR	0B57	CSEG
LOC_5B45 . . . . . . . . . . . .  	L NEAR	0B5A	CSEG
LOC_5BC6 . . . . . . . . . . . .  	L NEAR	0BDB	CSEG
LOC_5BC9 . . . . . . . . . . . .  	L NEAR	0BDE	CSEG
LOC_5BDB . . . . . . . . . . . .  	L NEAR	0BF0	CSEG
LOC_5C14 . . . . . . . . . . . .  	L NEAR	0C29	CSEG
LOC_5C26 . . . . . . . . . . . .  	L NEAR	0C3B	CSEG
LOC_5C37 . . . . . . . . . . . .  	L NEAR	0C4C	CSEG
LOC_5C46 . . . . . . . . . . . .  	L NEAR	0C5B	CSEG
LOC_5C53 . . . . . . . . . . . .  	L NEAR	0C68	CSEG
LOC_5C63 . . . . . . . . . . . .  	L NEAR	0C78	CSEG
LOC_5C6F . . . . . . . . . . . .  	L NEAR	0C84	CSEG
LOC_5C79 . . . . . . . . . . . .  	L NEAR	0C8E	CSEG
LOC_5CD8 . . . . . . . . . . . .  	L NEAR	0CED	CSEG
LOC_5CDB . . . . . . . . . . . .  	L NEAR	0CF0	CSEG
LOC_5CE6 . . . . . . . . . . . .  	L NEAR	0CFB	CSEG
LOC_5CEE . . . . . . . . . . . .  	L NEAR	0D03	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Symbols-5
                                                             

LOC_5D1D . . . . . . . . . . . .  	L NEAR	0D32	CSEG
LOC_5D41 . . . . . . . . . . . .  	L NEAR	0D56	CSEG
LOC_5D45 . . . . . . . . . . . .  	L NEAR	0D5A	CSEG
LOC_5D59 . . . . . . . . . . . .  	L NEAR	0D6E	CSEG
LOC_5D71 . . . . . . . . . . . .  	L NEAR	0D86	CSEG
LOC_5D79 . . . . . . . . . . . .  	L NEAR	0D8E	CSEG
LOC_5D80 . . . . . . . . . . . .  	L NEAR	0D95	CSEG
LOC_5D83 . . . . . . . . . . . .  	L NEAR	0D98	CSEG
LOC_5D99 . . . . . . . . . . . .  	L NEAR	0DAE	CSEG
LOC_5D9E . . . . . . . . . . . .  	L NEAR	0DB3	CSEG
LOC_5DA3 . . . . . . . . . . . .  	L NEAR	0DB8	CSEG
LOC_5DC0 . . . . . . . . . . . .  	L NEAR	0DD5	CSEG
LOC_5DC3 . . . . . . . . . . . .  	L NEAR	0DD8	CSEG
LOC_5DD6 . . . . . . . . . . . .  	L NEAR	0DEB	CSEG
LOC_5DDF . . . . . . . . . . . .  	L NEAR	0DF4	CSEG
LOC_5DEA . . . . . . . . . . . .  	L NEAR	0DFF	CSEG
LOC_5DF3 . . . . . . . . . . . .  	L NEAR	0E08	CSEG
LOC_5DFC . . . . . . . . . . . .  	L NEAR	0E11	CSEG
LOC_5E08 . . . . . . . . . . . .  	L NEAR	0E1D	CSEG
LOC_5E1E . . . . . . . . . . . .  	L NEAR	0E33	CSEG
LOC_5E23 . . . . . . . . . . . .  	L NEAR	0E38	CSEG
LOC_5E3B . . . . . . . . . . . .  	L NEAR	0E50	CSEG
LOC_5E46 . . . . . . . . . . . .  	L NEAR	0E5B	CSEG
LOC_5E4C . . . . . . . . . . . .  	L NEAR	0E61	CSEG
LOC_5E67 . . . . . . . . . . . .  	L NEAR	0E7C	CSEG
LOC_5EA1 . . . . . . . . . . . .  	L NEAR	0EB6	CSEG
LOC_5EAF . . . . . . . . . . . .  	L NEAR	0EC4	CSEG
LOC_5F43 . . . . . . . . . . . .  	L NEAR	0F58	CSEG
LOC_5F6E . . . . . . . . . . . .  	L NEAR	0F83	CSEG
LOC_5F7D . . . . . . . . . . . .  	L NEAR	0F92	CSEG
LOC_5F82 . . . . . . . . . . . .  	L NEAR	0F97	CSEG
LOC_5F85 . . . . . . . . . . . .  	L NEAR	0F9A	CSEG
LOC_5FA1 . . . . . . . . . . . .  	L NEAR	0FB6	CSEG
LOC_600A . . . . . . . . . . . .  	L NEAR	101F	CSEG
LOC_600E . . . . . . . . . . . .  	L NEAR	1023	CSEG
LOC_6027 . . . . . . . . . . . .  	L NEAR	103C	CSEG
LOC_6035 . . . . . . . . . . . .  	L NEAR	104A	CSEG
LOC_603C . . . . . . . . . . . .  	L NEAR	1051	CSEG
LOC_6052 . . . . . . . . . . . .  	L NEAR	1067	CSEG
LOC_6056 . . . . . . . . . . . .  	L NEAR	106B	CSEG
LOC_6061 . . . . . . . . . . . .  	L NEAR	1076	CSEG
LOC_606B . . . . . . . . . . . .  	L NEAR	1080	CSEG
LOC_60EC . . . . . . . . . . . .  	L NEAR	1101	CSEG
LOC_60F9 . . . . . . . . . . . .  	L NEAR	110E	CSEG
LOC_60FD . . . . . . . . . . . .  	L NEAR	1112	CSEG
LOC_6103 . . . . . . . . . . . .  	L NEAR	1118	CSEG
LOC_6137 . . . . . . . . . . . .  	L NEAR	114C	CSEG
LOC_6144 . . . . . . . . . . . .  	L NEAR	1159	CSEG
LOC_6148 . . . . . . . . . . . .  	L NEAR	115D	CSEG
LOC_6153 . . . . . . . . . . . .  	L NEAR	1168	CSEG
LOC_6172 . . . . . . . . . . . .  	L NEAR	1187	CSEG
LOC_6183 . . . . . . . . . . . .  	L NEAR	1198	CSEG
LOC_6199 . . . . . . . . . . . .  	L NEAR	11AE	CSEG
LOC_61C8 . . . . . . . . . . . .  	L NEAR	11DD	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Symbols-6
                                                             

LOC_61E1 . . . . . . . . . . . .  	L NEAR	11F6	CSEG
LOC_61F7 . . . . . . . . . . . .  	L NEAR	120C	CSEG
LOC_61FF . . . . . . . . . . . .  	L NEAR	1214	CSEG
LOC_6221 . . . . . . . . . . . .  	L NEAR	1236	CSEG
LOC_6223 . . . . . . . . . . . .  	L NEAR	1238	CSEG
LOC_622C . . . . . . . . . . . .  	L NEAR	1241	CSEG
LOC_6234 . . . . . . . . . . . .  	L NEAR	1249	CSEG
LOC_623E . . . . . . . . . . . .  	L NEAR	1253	CSEG
LOC_624F . . . . . . . . . . . .  	L NEAR	1264	CSEG
LOC_6256 . . . . . . . . . . . .  	L NEAR	126B	CSEG
LOC_626D . . . . . . . . . . . .  	L NEAR	1282	CSEG
LOC_6280 . . . . . . . . . . . .  	L NEAR	1295	CSEG
LOC_629D . . . . . . . . . . . .  	L NEAR	12B2	CSEG
LOC_62A5 . . . . . . . . . . . .  	L NEAR	12BA	CSEG
LOC_62B7 . . . . . . . . . . . .  	L NEAR	12CC	CSEG
LOC_62B8 . . . . . . . . . . . .  	L NEAR	12CD	CSEG
LOC_62C5 . . . . . . . . . . . .  	L NEAR	12DA	CSEG
LOC_62D1 . . . . . . . . . . . .  	L NEAR	12E6	CSEG
LOC_62D6 . . . . . . . . . . . .  	L NEAR	12EB	CSEG
LOC_62DC . . . . . . . . . . . .  	L NEAR	12F1	CSEG
LOC_639F . . . . . . . . . . . .  	L NEAR	13AA	CSEG
LOC_63A5 . . . . . . . . . . . .  	L NEAR	13B0	CSEG
LOC_64EC . . . . . . . . . . . .  	L NEAR	14EE	CSEG
LOC_64EF . . . . . . . . . . . .  	L NEAR	14F0	CSEG
LOC_6514 . . . . . . . . . . . .  	L NEAR	1515	CSEG
LOC_6518 . . . . . . . . . . . .  	L NEAR	1519	CSEG
LOC_6528 . . . . . . . . . . . .  	L NEAR	1529	CSEG
LOC_6533 . . . . . . . . . . . .  	L NEAR	1534	CSEG
LOC_6564 . . . . . . . . . . . .  	L NEAR	1565	CSEG
LPCOL  . . . . . . . . . . . . .  	L WORD 	130A	CSEG
LPDOWN . . . . . . . . . . . . .  	L WORD 	1302	CSEG
LPENQR . . . . . . . . . . . . .  	N PROC	1310	CSEG	Length = 0056
LPENQX . . . . . . . . . . . . .  	L NEAR	1358	CSEG
LPGX . . . . . . . . . . . . . .  	L WORD 	1304	CSEG
LPGY . . . . . . . . . . . . . .  	L WORD 	1306	CSEG
LPLCOL . . . . . . . . . . . . .  	L WORD 	130E	CSEG
LPLGX  . . . . . . . . . . . . .  	L WORD 	12FE	CSEG
LPLGY  . . . . . . . . . . . . .  	L WORD 	1300	CSEG
LPLROW . . . . . . . . . . . . .  	L WORD 	130C	CSEG
LPNOFF . . . . . . . . . . . . .  	L NEAR	1384	CSEG
LPNON  . . . . . . . . . . . . .  	L NEAR	138F	CSEG
LPROW  . . . . . . . . . . . . .  	L WORD 	1308	CSEG
LPWSDN . . . . . . . . . . . . .  	L WORD 	12FC	CSEG
LSTRIG . . . . . . . . . . . . .  	L BYTE 	06F7	CSEG

MAPSUP . . . . . . . . . . . . .  	N PROC	09A4	CSEG	Global	Length = 0003
MAPXYC . . . . . . . . . . . . .  	N PROC	0F9C	CSEG	Global	Length = 003C
MASKS? . . . . . . . . . . . . .  	L BYTE 	01E4	CSEG
MODES40  . . . . . . . . . . . .  	L BYTE 	0EF4	CSEG
MODES80  . . . . . . . . . . . .  	L BYTE 	0EFC	CSEG

NOBRK  . . . . . . . . . . . . .  	L NEAR	083F	CSEG
NONASC . . . . . . . . . . . . .  	L NEAR	086B	CSEG
NOSWIT . . . . . . . . . . . . .  	L NEAR	135E	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Symbols-7
                                                             

NOTPTR . . . . . . . . . . . . .  	L WORD 	14A8	CSEG
NOTTAB . . . . . . . . . . . . .  	L NEAR	088E	CSEG
NREAD  . . . . . . . . . . . . .  	N PROC	10F1	CSEG	Global	Length = 004B
NREADX . . . . . . . . . . . . .  	L NEAR	1136	CSEG
NSETCX . . . . . . . . . . . . .  	N PROC	1033	CSEG	Global	Length = 004F
NTARRY . . . . . . . . . . . . .  	L BYTE 	1422	CSEG	Length = 0084
NWRITE . . . . . . . . . . . . .  	N PROC	113C	CSEG	Global	Length = 0078
NXNOTE . . . . . . . . . . . . .  	L NEAR	15F4	CSEG
NXTCHR . . . . . . . . . . . . .  	L NEAR	0AE5	CSEG
NXTNOT . . . . . . . . . . . . .  	N PROC	16BA	CSEG	Length = 000B

OEMHED . . . . . . . . . . . . .  	L BYTE 	0017	CSEG
OFF_5101 . . . . . . . . . . . .  	L WORD 	0120	CSEG
OLDTMI . . . . . . . . . . . . .  	L DWORD	14B1	CSEG
ONEKEY . . . . . . . . . . . . .  	L NEAR	0864	CSEG
OVMODE . . . . . . . . . . . . .  	L BYTE 	0000	DSEG

PEKFLT . . . . . . . . . . . . .  	N PROC	0138	CSEG	Global	Length = 000E
PEKPOK . . . . . . . . . . . . .  	L BYTE 	0107	CSEG
PFLTX  . . . . . . . . . . . . .  	L NEAR	01B5	CSEG
PGDISP . . . . . . . . . . . . .  	L WORD 	10B1	CSEG
PGINIT . . . . . . . . . . . . .  	N PROC	10BB	CSEG	Global	Length = 0036
PGINIX . . . . . . . . . . . . .  	L NEAR	10F0	CSEG
PIXSIZ . . . . . . . . . . . . .  	N PROC	1096	CSEG	Global	Length = 0004
PNTINI . . . . . . . . . . . . .  	N PROC	11C2	CSEG	Global	Length = 000B
PNTINX . . . . . . . . . . . . .  	L NEAR	11C8	CSEG
POKFLT . . . . . . . . . . . . .  	N PROC	0146	CSEG	Global	Length = 0076
POLEVX . . . . . . . . . . . . .  	L NEAR	1421	CSEG
POLLEV . . . . . . . . . . . . .  	N PROC	1403	CSEG	Global	Length = 001F
PRTMAP . . . . . . . . . . . . .  	N PROC	0056	CSEG	Global	Length = 0040

RDCLOP . . . . . . . . . . . . .  	L NEAR	0FFA	CSEG
RDPEN  . . . . . . . . . . . . .  	N PROC	1366	CSEG	Global	Length = 0038
RDPENX . . . . . . . . . . . . .  	L NEAR	1381	CSEG
RDSTIK . . . . . . . . . . . . .  	N PROC	13DA	CSEG	Global	Length = 0029
RDSTKX . . . . . . . . . . . . .  	L NEAR	13FF	CSEG
RDSTLP . . . . . . . . . . . . .  	L NEAR	13F8	CSEG
RDTRGX . . . . . . . . . . . . .  	L NEAR	13D7	CSEG
RDTRIG . . . . . . . . . . . . .  	N PROC	139E	CSEG	Global	Length = 003C
READC  . . . . . . . . . . . . .  	N PROC	0FE1	CSEG	Global	Length = 0020
RECCOM . . . . . . . . . . . . .  	N PROC	050F	CSEG	Global	Length = 0040
RGHTCX . . . . . . . . . . . . .  	L NEAR	0F34	CSEG
RIGHTC . . . . . . . . . . . . .  	N PROC	0F25	CSEG	Global	Length = 0011

SCALXY . . . . . . . . . . . . .  	N PROC	0F73	CSEG	Global	Length = 0029
SCANL  . . . . . . . . . . . . .  	N PROC	1287	CSEG	Global	Length = 0074
SCANR  . . . . . . . . . . . . .  	N PROC	11CD	CSEG	Global	Length = 00AA
SCBFX  . . . . . . . . . . . . .  	L NEAR	03D6	CSEG
SCNCLR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SCNERR . . . . . . . . . . . . .  	L NEAR	0EF1	CSEG
SCNOK  . . . . . . . . . . . . .  	L NEAR	0EED	CSEG
SCNRST . . . . . . . . . . . . .  	N PROC	0722	CSEG	Global	Length = 0011
SCNSWI . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SCNXLT . . . . . . . . . . . . .  	L BYTE 	08A7	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Symbols-8
                                                             

SCRATR . . . . . . . . . . . . .  	N PROC	0CAA	CSEG	Global	Length = 0023
SCRINP . . . . . . . . . . . . .  	N PROC	0A0B	CSEG	Global	Length = 0017
SCROL  . . . . . . . . . . . . .  	L NEAR	0B85	CSEG
SCROLL . . . . . . . . . . . . .  	N PROC	0A22	CSEG	Global	Length = 00A1
SCROUT . . . . . . . . . . . . .  	N PROC	09A7	CSEG	Global	Length = 0029
SCRRDC . . . . . . . . . . . . .  	N PROC	0AFD	CSEG	Length = 000F
SCRRST . . . . . . . . . . . . .  	L NEAR	0A4D	CSEG
SCRSAV . . . . . . . . . . . . .  	N PROC	0B26	CSEG	Length = 003E
SCRSTT . . . . . . . . . . . . .  	N PROC	0CCD	CSEG	Global	Length = 00D2
SCRSV2 . . . . . . . . . . . . .  	N PROC	09D0	CSEG	Length = 003B
SCRWRC . . . . . . . . . . . . .  	N PROC	0B0C	CSEG	Length = 001A
SEGINI . . . . . . . . . . . . .  	N PROC	0000	CSEG	Global	Length = 0017
SETATR . . . . . . . . . . . . .  	N PROC	0FD8	CSEG	Global	Length = 0009
SETC . . . . . . . . . . . . . .  	N PROC	1001	CSEG	Global	Length = 000C
SETCBF . . . . . . . . . . . . .  	N PROC	0359	CSEG	Global	Length = 008C
SETCLR . . . . . . . . . . . . .  	N PROC	0DBE	CSEG	Global	Length = 00B1
SETCSR . . . . . . . . . . . . .  	L NEAR	07DB	CSEG
SETCUR . . . . . . . . . . . . .  	L NEAR	0BD4	CSEG
SETERR . . . . . . . . . . . . .  	L NEAR	0E6C	CSEG
SETFBC . . . . . . . . . . . . .  	N PROC	00B5	CSEG	Global	Length = 003B
SETPTR . . . . . . . . . . . . .  	N PROC	100D	CSEG	Length = 0026
SETVMD . . . . . . . . . . . . .  	L NEAR	07FD	CSEG
SETVPG . . . . . . . . . . . . .  	N PROC	0AC3	CSEG	Length = 0017
SETVPX . . . . . . . . . . . . .  	L NEAR	0AD8	CSEG
SNDCMX . . . . . . . . . . . . .  	L NEAR	059F	CSEG
SNDCOM . . . . . . . . . . . . .  	N PROC	054F	CSEG	Global	Length = 0058
SNDLOP . . . . . . . . . . . . .  	L NEAR	0564	CSEG
SNDLPT . . . . . . . . . . . . .  	N PROC	05D6	CSEG	Global	Length = 0028
SNERR  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SPCTAB . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
STACOM . . . . . . . . . . . . .  	N PROC	05A7	CSEG	Global	Length = 002F
STATRX . . . . . . . . . . . . .  	L NEAR	0FDF	CSEG
STOREC . . . . . . . . . . . . .  	N PROC	0F15	CSEG	Global	Length = 0008
SUB_5643 . . . . . . . . . . . .  	N PROC	065E	CSEG	Length = 0022
SUB_5665 . . . . . . . . . . . .  	N PROC	0680	CSEG	Length = 0045
SUB_5BF8 . . . . . . . . . . . .  	N PROC	0C0D	CSEG	Length = 0061
SUB_5D8A . . . . . . . . . . . .  	N PROC	0D9F	CSEG	Length = 001F
SUB_5E5A . . . . . . . . . . . .  	N PROC	0E6F	CSEG	Length = 0011
SUB_6262 . . . . . . . . . . . .  	N PROC	1277	CSEG	Length = 0010
SWIDTH . . . . . . . . . . . . .  	N PROC	0E80	CSEG	Global	Length = 0071
SWPVEC . . . . . . . . . . . . .  	N PROC	079C	CSEG	Length = 001D

TDOWNC . . . . . . . . . . . . .  	N PROC	10A6	CSEG	Global	Length = 000B
TIMISR . . . . . . . . . . . . .  	F PROC	06F9	CSEG	Length = 0022
TIMRSG . . . . . . . . . . . . .  	L WORD 	0007	DSEG
TMISON . . . . . . . . . . . . .  	L NEAR	1674	CSEG
TMRCHN . . . . . . . . . . . . .  	L NEAR	15A1	CSEG
TMRIS1 . . . . . . . . . . . . .  	L NEAR	14C9	CSEG
TMRISR . . . . . . . . . . . . .  	F PROC	14B5	CSEG	Length = 0100
TMRISX . . . . . . . . . . . . .  	L NEAR	15AB	CSEG
TMRRST . . . . . . . . . . . . .  	L NEAR	159C	CSEG
TRMCOM . . . . . . . . . . . . .  	N PROC	05FE	CSEG	Global	Length = 0060
TUPC . . . . . . . . . . . . . .  	N PROC	109A	CSEG	Global	Length = 000C
TUPCX  . . . . . . . . . . . . .  	L NEAR	10A4	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 5/3/21 15:00:44
 
                                                            Symbols-9
                                                             

TWOKEY . . . . . . . . . . . . .  	L NEAR	0889	CSEG
TXTATR . . . . . . . . . . . . .  	L NEAR	00AD	CSEG

UPC  . . . . . . . . . . . . . .  	L NEAR	0F47	CSEG	Global

VAR_63A  . . . . . . . . . . . .  	L BYTE 	000A	DSEG
VAR_63B  . . . . . . . . . . . .  	L BYTE 	000B	DSEG
VAR_63C  . . . . . . . . . . . .  	L BYTE 	000C	DSEG
VAR_63E  . . . . . . . . . . . .  	L BYTE 	000E	DSEG
VAR_640  . . . . . . . . . . . .  	L BYTE 	0010	DSEG
VAR_641  . . . . . . . . . . . .  	L BYTE 	0011	DSEG
VAR_642  . . . . . . . . . . . .  	L BYTE 	0012	DSEG
VAR_643  . . . . . . . . . . . .  	L WORD 	0013	DSEG
VAR_645  . . . . . . . . . . . .  	L BYTE 	0015	DSEG
VAR_646  . . . . . . . . . . . .  	L BYTE 	0016	DSEG
VAR_647  . . . . . . . . . . . .  	L WORD 	0017	DSEG
VAR_649  . . . . . . . . . . . .  	L WORD 	0019	DSEG
VAR_64B  . . . . . . . . . . . .  	L BYTE 	001B	DSEG
VAR_64C  . . . . . . . . . . . .  	L BYTE 	001C	DSEG
VAR_64D  . . . . . . . . . . . .  	L BYTE 	001D	DSEG
VAR_64E  . . . . . . . . . . . .  	L WORD 	001E	DSEG
VAR_650  . . . . . . . . . . . .  	L BYTE 	0020	DSEG
VAR_652  . . . . . . . . . . . .  	L BYTE 	0022	DSEG
VAR_655  . . . . . . . . . . . .  	L BYTE 	0025	DSEG
VAR_660  . . . . . . . . . . . .  	L BYTE 	0030	DSEG
VAR_661  . . . . . . . . . . . .  	L WORD 	0031	DSEG
VAR_663  . . . . . . . . . . . .  	L WORD 	0033	DSEG
VAR_665  . . . . . . . . . . . .  	L BYTE 	0035	DSEG
VAR_666  . . . . . . . . . . . .  	L BYTE 	0036	DSEG
VAR_667  . . . . . . . . . . . .  	L WORD 	0037	DSEG
VAR_669  . . . . . . . . . . . .  	L BYTE 	0039	DSEG
VIDPGE . . . . . . . . . . . . .  	L NEAR	075D	CSEG
VISVPG . . . . . . . . . . . . .  	L BYTE 	000D	DSEG

WAITLP . . . . . . . . . . . . .  	L NEAR	160B	CSEG
WIDE40 . . . . . . . . . . . . .  	L NEAR	0EA1	CSEG
WORD_50E9  . . . . . . . . . . .  	L WORD 	0108	CSEG
WORD_64AB  . . . . . . . . . . .  	L WORD 	14AD	CSEG
WRAP . . . . . . . . . . . . . .  	L NEAR	16C1	CSEG
WTDONE . . . . . . . . . . . . .  	L NEAR	161E	CSEG


   4138 Source  Lines
   4138 Total   Lines
    467 Symbols

  34816 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
