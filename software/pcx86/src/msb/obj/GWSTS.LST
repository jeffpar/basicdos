Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-1
                                                            

                                ; [ This translation created 10-Feb-83 by Versi
				on 4.3 ] 
                                 
 0008                           	.RADIX  8		; To be safe 
                                 
 0000                           CSEG	SEGMENT PUBLIC 'CODESG' 
                                	ASSUME  CS:CSEG 
                                 
                             C  INCLUDE	OEM.INC 
                             C  ; [ This translation created 10-Feb-83 by Versi
				on 4.3 ] 
                             C   
                             C  	PAGE	,132D 
                             C  	SUBTTL  Common file to produce 2-segment 8086 GW-CPM BASIC 
                             C   
                             C  	.SALL 
                             C   
 000A                        C  	.RADIX	10 
 = 0000                      C  	OEMRAM=0D 
                             C  ;Pascal program HFILE searches for the following line - DO NOT MODIFY 
                             C  ;** (VERSION SPECIFIC VALUES) ************************************************ 
 = 0019                      C  	NMLINE=25		;Max screen display text lines 
 = 0001                      C  	NBANKS=1		;Number of graphic planes 
 = 0000                      C  	PALSIZ=0		;Size of OEM color palette 
 = 0000                      C  	DBLCHR=0		;Editor support for KANJI chars 
 = 0000                      C  	KANABS=0		;Kana BASIC (Japanese JIS codes) 
 = 0000                      C  	KANJFN=0		;KANJI String Functions KPOS, KLEN .. 
 = 0000                      C  	JISKTN=0		;&K, &J constants (KANJI) 
 = 0001                      C  	SUPRSH=1		;1=super shift key feature 
 = 000A                      C  	NMKEYF=10		;number of function keys 
 = 000E                      C  	NMKEYT=14		;number of function key traps 
 = 0001                      C  	FKEYON=1		;yes=display function keys 
 = 0001                      C  	SCROLT=1		;Line 25 allocated for status only 
 = 0001                      C  	PLAYSW=1		;for PLAY statement 
 = 0001                      C  	BEEPSW=1		;for SOUND, BEEP statements 
 = 0003                      C  	NMLPT=3			;number of line printers 
 = 0001                      C  	CONSSW=1		;Device CONS: 
 = 0002                      C  	NMCOMT=2		;number of COMmunications ports 
 = 0001                      C  	NMPENT=1		;number of light pens 
 = 0004                      C  	NMSTRT=4		;number of joysticks 
 = 0000                      C  	GWCASS=0		;Cassette switch (CSAVE,CLOAD,MOTOR) 
 = 0001                      C  	IBMLIK=1		;IBM compatibility package 
 = 0001                      C  	IBMTOK=1		;IBM token compatibility 
 = 0001                      C  	DYNCOM=1		;Dynamic communication buffers 
                             C  ;** (END OF VERSION SPECIFIC VALUES) ***************************************** 
                             C  ;Pascal program HFILE searches for the previous line - DO NOT MODIFY 
                             C  ; 
 = 0015                      C  	NUMTRP=NMKEYT+NMCOMT+NMPENT+NMSTRT 
 = 0001                      C  	GW=1			;GW BASIC 
 = 0000                      C  	ESCCTL=0		;Escape Sequence processing in SCROUT 
 = 0000                      C  	GWDBUG=0		;DEBUG statement (TEST VERSIONS ONLY) 
                             C  				; Support is in BINTRP.MAC and GWSTS.MAC 
 = 0000                      C  	SIXDIG=0		;# of digits of accuracy assumed when formatting 
                             C  				;single precision numbers for output. 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-2
Common file to produce 2-segment 8086 GW-CPM BASIC          

                             C  				; 0 := 7 digits 
                             C  				; 1 := 6 digits 
 = 0000                      C  	CASSW=0			;CASSETTE SWITCH 
 = 0001                      C  	LABKEY=1		;^T (LABEL) key capability 
 = 0001                      C  	HGHBIT=1		;8-bit characters (ASCII & Graphics) 
 = 0001                      C  	QUEUE=1			;Queued painting algorithm (vs. stack) 
 = 0001                      C  	GIO86=1			;BASIC-86 Generalized I/O 
 = 0001                      C  	SCRNIO=1		;Screen editor 
 = 0001                      C  	SCRN86=1		;8086 Screen editor 
 = 0001                      C  	I8086=1			;CROSS ASSEMBLING FOR 8086 
 = 0001                      C  	MULSEG=1		;MULTI-SEGMENT 8086 BASIC 
 = 0000                      C  	SMALL=0			;"SMALL" VERSION OF 8086 BASIC IF SET 
 = 0001                      C  	TRUROM=1 
 = 0000                      C  	SBC86=0			;SBC 86/02 BOARD? 
 = 0001                      C  	SHORTJ=1		;USE INTRA-SEGMENT SHORT JUMPS 
                             C  				;IN 8086 CODE 
 = 0001                      C  	LNGVAR=1		;LONG VARIABLE NAME SUPPORT (EXTENDED ONLY) 
 = 0000                      C  	SHTERR=0		;SHORT (2 CHAR) ERROR MESSAGES 
 = 0000                      C  	SHTINS=0		;INSTR IN NON-FAST LEN2 VERSIONS 
 = 0000                      C  	SHTLHM=0		;LEFT HAND SIDE MID IN NON FAST LEN2 VERSIONS 
 = 0000                      C  	SHTCHN=0		;ALLOW CHAIN IN NON-5.0 
 = 0000                      C  	SHTPRO=0		;ALLOW PROTECTED FILES IN NON-FIVDSK 
 = 0000                      C  	SHTLIN=0		;ALLOW LINE INPUT IN NON-EXTENDED NON-FAST 
 = 0000                      C  	SHTREN=0		;ALLOW RENUM IN NON-FST VERSIONS 
 = 0001                      C  	INKEYF=1		;ADDS INKEY$ FUNCTION 
 = 0000                      C  	NOIOS=0			;NO I/O STATMENTS (INP,OUT, WAIT) 
 = 0000                      C  	NOPEKS=0		;NO PEEK, POKE 
 = 0000                      C  	NOUSR=0			;NO USR 
 = 0000                      C  	NOCTLA=0		;NO CONTROL-A IN EXTENDED 
 = 0000                      C  	NORUBT=0		;NO RUBOUT 
 = 0000                      C  	NOROMP=0		;NO ROM PROGRAM FEATURE 
 = 0000                      C  	NOATDL=0		;NO AUTO DELETE IN NON-FAST EXTENDED 
 = 0000                      C  	NODOT=0			;NO DOT IN LEN2 
 = 0000                      C  	NOEDIT=0		;NO EDIT COMMAND 
 = 0000                      C  	CRONLY=0		;ONLY PUT OUT CR, NOT CRLF TO TERMINAL 
                             C  				;AND FILES 
 = 0000                      C  	NONULL=0		;NO NULL COMMAND, PUT OUT NULLS IN CRDO & OUTCH1 
 = 0000                      C  	NOVARP=0		;NO VARPTR FUNCTION 
 = 0001                      C  	FIVEO=1			;GENERATE VERSION WITH RELEASE 5.0 FEATURES 
 = 0001                      C  	FIVMEM=1 
 = 0001                      C  	ANSI=1 
 = 0001                      C  	FIVDSK=1		;5.0 NEW DSK CODE 
 = 0001                      C  	FIVLPT=1		;WIDTH LPRINT AND 255 FEATURE 
 = 0001                      C  	HEXOCT=1		;&H..., HEX$, &O..., OCT$ 
 = 0000                      C  	BINCSW=0		;&B..., BIN$ 
 = 0001                      C  	BLODSW=1		;BLOAD, BSAVE COMMANDS 
 = 0001                      C  	MEMIMG=1		;MEMORY IMAGE FILES 
 = 0001                      C  	GENBIN=1 
                             C   
 = 0000                      C  	TRUANS=0		;TRUE ANSI VERSION (STATIC SCAN, ON ERROR) 
 = 0000                      C  	COMMNT=0		;DONT WANT BIG COMMENT 
 = 0000                      C  	INTEL=0			;INTEL PROPRIETARY 
 = 0000                      C  	INTFSW=0		;INTEL FLOATING POINT 
 = 0000                      C  	INTFHW=0 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-3
Common file to produce 2-segment 8086 GW-CPM BASIC          

 = 0000                      C  	RMX=0			;INTEL RMX VERSION 
 = 0000                      C  	EDIT80=0		;FOR EDIT80 I/O ROUTINES 
 = 0000                      C  	RSHACK=0 
 = 0000                      C  	INTLEC=0 
 = 0002                      C  	LENGTH=2		;  1 MEANS 8K, 2 MEANS 12K 
 = 0000                      C  	BASDEB=0		;WHETHER DBG WILL BE LOADED WITH BASIC 
 = 0001                      C  	RSTLES=1		;WHETHER BASIC WILL USE RST LOCATIONS 
                             C  				;TO MAKE ITSELF SMALLER & QUICKER 
 = 0001                      C  	REALIO=1		;WHETHER SIMULATE (=0) OR ON MACHINE (=1) 
 = 0001                      C  	GENIO=1			;USE G/P ROUTINES 
 = 0001                      C  	CHSEAT=1		;CHSNS eats chars 
 = 0000                      C  	GENDSK=0		;USE G/P DSK CODE 
 = 0000                      C  	LONGI=0			;WHETHER WE ASK "TERMINAL WIDTH?" 
                             C  				;AND WANT SIN-TAN-COS-ATN? 
 = 0000                      C  	INSTSW=0		;FOR INSTR INSTRUCTION 
 = 0001                      C  	SWAPSW=1		;FOR SWAP STATEMENT 
 = 0000                      C  	MDS=0			;FOR INTEL MDS SYSTEMS 
 = 0000                      C  	SBC=0			;FOR INTEL SINGLE BOARD COMPUTER 
                             C  				;1=SBC 80/10, 2=SBC 80/20 
 = 0001                      C  	PURE=1			;ON FOR PURE CODE 
 = 0000                      C  	KILLER=0		;FOR ROM VERSION THAT WONT RUN IN RAM 
 = 0000                      C  	INTROM=0 
 = 0001                      C  	LPTSW=1 
 = 0001                      C  	NCRLPT=1 
 = 0000                      C  	NCRCAS=0 
 = 0000                      C  	ISC=0			;FOR ISC VERSION 
 = 0000                      C  	LPT3=0			;THREE LPT DRIVER VERSION(QUME,OKIA,CENT) 
 = 0000                      C  	TSLPT=0 
                             C   
 = 0000                      C  	DOS=0			;ON TO GEN ROUTINES FOR DOS 
 = 0001                      C  	DISK=1			;FILE I/O FEATURES 
 = 0000                      C  	TIMSHR=0		;NO TIME-SHARING DISK 
 = 0000                      C  	TSDISK=0		;NO TIME-SHARING DISK FOR US 
 = 0000                      C  	SPCDSK=0		;MAY HAVE MM'S DISK CODE 
 = 0000                      C  	SPCNDS=0 
 = 0001                      C  	FAST=1			;CONSTANT COMPRESSION, RENUM & FRIENDS 
 = 0000                      C  	KEYSTA=0 
 = 0000                      C  	ISIS=0			;FOR VERSION TO RUN UNDER INTEL'S ISIS II DOS 
 = 0000                      C  	MDSISS=0		;FOR MDS VERSION THAT RUNS UNDER ISIS-II 
 = 0001                      C  	CPM=1			;FOR CPM compatible operating systems 
 = 0001                      C  	CPM2=1			;VERSION 2. CPM 
 = 0000                      C  	CPM86=0			;FOR CP/M-86 operating system 
 = 0001                      C  	SCP=1			;MS-DOS operating system 
 = 0000                      C  	CPMCON=0 
 = 0000                      C  	CPMSER=0		;CHECK CPM SERIAL #'S 
 = 0000                      C  	CPMADD=0		;FOR VERSION TO RUN ON ADDS CPM 
 = 0000                      C  	CPMA75=0		;FOR VERSION TO RUN ON ADDS SYSTEM 75 
                             C  				;CP/M 
 = 0000                      C  	CPMRSH=0		;FOR RADIO SHACK CPM/M 
 = 0000                      C  	CPM110=0		;FOR CP/M @1100 HEX (INTERALIA) 
 = 0000                      C  	CPMSBC=0		;FOR VERSION TO RUN ON SBC CP/M AT 4100H 
 = 0000                      C  	CPMPER=0		;FOR PERTEC VERSION OF CPM 
 = 0000                      C  	CPMLIF=0		;LIFEBOAT CP/M AT 4200H 
 = 0000                      C  	CPMMDS=0		;MOHAWK DATA SYSTEMS CP/M 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-4
Common file to produce 2-segment 8086 GW-CPM BASIC          

 = 0000                      C  	CPMCON=0 
 = 0000                      C  	Z80=0 
 = 0001                      C  	DISK=1 
 = 0001                      C  	NCRLPT=1 
 = 0001                      C  	RSTLES=1 
 = 0000                      C  	DRVPOS=CPMADD 
 = 0000                      C  	TRNCHR=CPMADD 
 = 0000                      C  	INLADD=CPMADD 
 = 0001                      C  	LISTEN=1		;ON MEANS LISTEN FOR ^C 
 = 0001                      C  	LISTEN=1 
 = 0000                      C  	LEN2=0 
 = 0001                      C  	LEN2=1 
 = 0001                      C  	HEXOCT=1 
 = 0002                      C  	LENGTH=2 
 = 0001                      C  	RSTLES=1 
 = 0001                      C  	FIVLPT=1 
 = 0000                      C  	I8251=0			;THIS SWITCH IS USED FOR ROSEMOUNT VERSION 
 = 0001                      C  	CONTRO=1		;ALLOW ^O 
 = 0001                      C  	LEN3=LEN2 OR CASSW 
                             C   
                             C   
                             C   
 = 0001                      C  	STRING=1 
 = 0001                      C  	NCRLPT=1 
                             C   
                             C  ; *** OEM Switches which need to be defaulted to 0 
                             C  ; 
 = 0000                      C  	CMPUTN=0 
 = 0000                      C  	DUPONT=0 
 = 0000                      C  	EXIDY=0 
 = 0000                      C  	GESBC=0 
 = 0000                      C  	HEATH=0 
 = 0000                      C  	LOKHED=0 
 = 0000                      C  	MOSTEK=0 
 = 0000                      C  	TEK=0 
 = 0000                      C  	TRSER2=0 
 = 0000                      C  	NASCOM=0 
 = 0000                      C  	NATROM=0 
 = 0000                      C  	NCRBAS=0 
 = 0000                      C  	NCRDEB=0 
 = 0000                      C  	NCRDEB=0 
 = 0000                      C  	NCRELS=0 
 = 0000                      C  	ONTEL=0 
 = 0000                      C  	PCS=0 
 = 0000                      C  	SGSATS=0 
 = 0000                      C  	ALTAIR=0 
 = 0000                      C  	DMC=0 
 = 0000                      C  	PANBAS=0 
 = 0000                      C  	XTNSYS=0 
 = 0000                      C  	NECBAS=0 
                             C  ;******************************************************************* 
                             C  ; Z80 related macros 
                             C  ;******************************************************************* 
 = 0001                      C  	Z80=1			;FOR VERSION THAT RUNS ON BOTH 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-5
Common file to produce 2-segment 8086 GW-CPM BASIC          

                             C  				;8080'S AND ZILOG Z-80'S 
 = 0001                      C  	Z80MAC=1		;USE 8080 MACROS INSTEAD OF Z80 INSTRUCTIONS 
 = 0000                      C  	Z80=0 
 = 0001                      C  	Z80=1 
                             C  LDIR	MACRO 
                             C  	MOV	WORD PTR A,WORD PTR M 
                             C  	STAX	D 
                             C  	INXF	H 
                             C  	INXF	D 
                             C  	DCXF	B 
                             C  	MOV	WORD PTR A,WORD PTR B 
                             C  	ORA	C 
                             C  	JNZ	_-8D 
                             C  ENDM 
                             C  LDDR	MACRO 
                             C  	MOV	WORD PTR A,WORD PTR M 
                             C  	STAX	D 
                             C  	DCXF	H 
                             C  	DCXF	D 
                             C  	DCXF	B 
                             C  	MOV	WORD PTR A,WORD PTR B 
                             C  	ORA	C 
                             C  	JNZ	_-8D 
                             C  ENDM 
                             C  DJNZ	MACRO	    DEST 
                             C  	DCR	B 
                             C  	JNZ	DEST 
                             C  ENDM 
                             C  ;******************************************************************* 
                             C  ; Define reset routines. 
                             C  ;******************************************************************* 
                             C  FSIGN	MACRO 
                             C  	CALL	SIGN 
                             C  ENDM 
                             C  PUSHM	MACRO 
                             C  	MOV	WORD PTR C,WORD PTR M 
                             C  	INX	H 
                             C  	MOV	WORD PTR B,WORD PTR M 
                             C  	INX	H 
                             C  	PUSH	WORD PTR B 
                             C  ENDM 
                             C  SYNCHK	MACRO	X 
                             C  	CALL	SYNCHR 
                             C  	DB	OFFSET X 
                             C  ENDM 
                             C  OUTCHR	MACRO 
                             C  	CALL	OUTDO 
                             C  ENDM 
                             C  CHRGET	MACRO 
                             C  	CALL	CHRGTR 
                             C  ENDM 
                             C  COMPAR	MACRO 
                             C  	CALL	DCOMPR 
                             C  ENDM 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-6
Common file to produce 2-segment 8086 GW-CPM BASIC          

                             C  GETYPE	MACRO 
                             C  	CALL	GETYPR 
                             C  ENDM 
                             C  COMPAR	MACRO 
                             C  	DB	73O 
                             C  	DB	332O 
                             C   ENDM 
                             C  ACRLF	MACRO 
                             C  	DB	13D 
                             C  	DB	10D 
                             C  ENDM 
                             C  PUSHR	MACRO 
                             C  	PUSH	WORD PTR D 
                             C  	PUSH	WORD PTR B 
                             C  ENDM 
                             C  POPR	MACRO 
                             C  	POP	WORD PTR B 
                             C  	POP	WORD PTR D 
                             C  ENDM 
                             C  MOVRI	MACRO	B,C,D,E 
                             C  	DB	1O		; "LXI  B" 
                             C  	DB	OFFSET C 
                             C  	DB	OFFSET B 
                             C  	DB	21O		; "LXI  D" 
                             C  	DB	OFFSET E 
                             C  	DB	OFFSET D 
                             C  ENDM 
                             C  INST	MACRO	X 
                             C  	DB	OX 
                             C  ENDM 
                             C   
                             C   
 = 000F                      C  	CONTO=15		;CHARACTER TO SUPRESS OUTPUT (USUALLY CONTROL-O) 
 = 0000                      C  	DBLTRN=0		;FOR DOUBLE PRECISION TRANSCENDENTALS 
                             C   
 = 000E                      C  	CLMWID=14D		;MAKE COMMA COLUMNS FOURTEEN CHARACTERS 
 = 0080                      C  	DATPSC=128D		;NUMBER OF DATA BYTES IN DISK SECTOR 
 = 0050                      C  	LINLN=80D		;TERMINAL LINE LENGTH 
 = 0084                      C  	LPTLEN=132D 
 = 00FF                      C  	BUFLEN=255		;LONG LINES 
 = 0028                      C  	NAMLEN=40D		;MAXIMUM LENGTH NAME -- 3 TO 127 
                             C   
 = 006E                      C  	NUMLEV=110D		;NUMBER OF STACK LEVELS RESERVED 
                             C  				;BY AN EXPLICIT CALL TO GETSTK 
 = 0004                      C  	STRSIZ=4 
 = 0003                      C  	STRSIZ=3 
 = 0003                      C  	NUMTMP=3		;NUMBER OF STRING TEMPORARIES 
 = 000A                      C  	NUMTMP=10 
                             C   
 0008                        C  	.RADIX	8 
                             C  ; 
                             C  ; Useful macros 
                             C  ; 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-7
Common file to produce 2-segment 8086 GW-CPM BASIC          

                             C  ACRLF   MACRO 
                             C          DB      13D 
                             C          DB      10D 
                             C  ENDM 
                             C   
                             C  INS86   MACRO   A,B,C,D 
                             C          DB      A&O 
                             C  IFNB    <B> 
                             C          DB      B&O 
                             C  ENDIF 
                             C  IFNB    <D> 
                             C          DB      C&O 
                             C          DB      D&O 
                             C  ENDIF 
                             C  IFB     <D> 
                             C   IFNB   <C> 
                             C          DW      C 
                             C    ENDIF 
                             C   ENDIF 
                             C  ENDM 
                             C   
                             C  CALLOS  MACRO 
                             C          CALL    CPMENT 
                             C  ENDM 
                             C   
                             C  POPR    MACRO 
                             C          POP     CX 
                             C          POP     DX 
                             C  ENDM 
                             C   
                             C  ADR     MACRO   X 
                             C          DW      X 
                             C  ENDM 
                             C   
                             C  DC      MACRO   ARG 
                             C          IRPC    ZZ,<ARG> 
                             C              IFDIF       <ZZ>,<">
                             C                  DB      "&ZZ&" 
                             C                  _A="&ZZ&" 
                             C              ENDIF 
                             C          ENDM 
                             C  ENDM 
                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-8
Common file to produce 2-segment 8086 GW-CPM BASIC          

                             C          PAGE 
                             C   
                             C  DBGBRK	MACRO 
                             C  	DB	0CDh,06h,0CCh 
                             C  	ENDM 
                                 
                                 
                                	TITLE   GWSTS - GW-BASIC Common Statement Support 
                                 
                                COMMENT	* 
                                 
                                --------- --- ---- -- --------- 
                                COPYRIGHT (C) 1982 BY MICROSOFT 
                                --------- --- ---- -- --------- 
                                 
                                        * 
                                 
                                ;General Feature Switches (Not OEM Switches) 
                                ; 
 = 0000                         KANADT=0			;Japanese date format("[yy]yy/mm/dd") 
 = 0001                         STKEYF=1D			;Start number of string function keys 
 = 0001                         IBMCSR=IBMLIK			;IBM comp. cursor interface 
 = 003C                         FKEYCR=74O			;CR character for F-KEY display line 
 = 0000                         GWLEV2=0			;Version 2.0 of GW BASIC-86 
                                 
                                ;OEM Switches (ONLY INCLUDE IF ABSOLUTELY NECESSARY) 
                                ; 
 = 0000                         MCI=0 
 = 0000                         TETRA=0 
 = 0000                         MELCO=0 
 = 0000                         ZENITH=0 
                                 
                                ;Definition of scroll types 
                                ; Choice of scroll type is by switch SCROLT. 
                                ; Switches defined here are used to implement a specific SCROLT type. 
                                ; If other scroll types are needed then additional SCROLT types should be 
                                ;   defined here. 
 = 0001                         	INVLIN=SCROLT		;Invisible (function key) Line 
 = 0000                         	FKFSRL=(SCROLT-1) AND 1	;Clear fkeys/full scroll/rewrite fkeys 
                                 
                                ;Local Switches 
                                ; 
 = 0000                         	KEYFSW=0		;No KEY Function 
 = 0001                         	INTHND=SCP		;MSDOS Ctl-C interrupt handler 
 = FFFF                         	CLRFMT=(MELCO-1) AND (ZENITH-1)	;New COLOR parameter format 
 = 001B                         	FKEYCR=27D		;IBM CR FKey display line graphic 
                                	.SALL 
 000A                           	.RADIX	10 
                                 
                                	EXTRN	CHRGTR:NEAR,SYNCHR:NEAR,SNERR:NEAR,FCERR:NEAR,GETBYT:NEAR 
                                	EXTRN	USERR:NEAR 
                                 
                                 
                                ENDIF 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-9
Common file to produce 2-segment 8086 GW-CPM BASIC          

                                 
                                DOSIO	MACRO	DFUN 
                                	MOV	AH,LOW OFFSET DFUN 
                                	INT	33		;MS-DOS system call 
                                ENDM 
 = 002A                         	GDAT=42D		;MS-DOS Get Date Function 
 = 002B                         	SDAT=43D		;MS-DOS Set Date Function 
 = 002C                         	GTIM=44D		;MS-DOS Get Time Function 
 = 002D                         	STIM=45D		;MS-DOS Set Time Function 
                                	PUBLIC	PATCHG 
 0000  01F4[                    PATCHG:	DB	500D DUP(?)	;GW patch space 
            ??                  
                         ]      
                                
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-10
Common file to produce 2-segment 8086 GW-CPM BASIC          

                                	PAGE 
                                	SUBTTL CLS,LOCATE,WIDTH (of screen),LCOPY 
                                 
                                	PUBLIC	CLS,LOCATE,GWWID,LCOPYS,COLOR,GETLIN,SCRENF,SCREEN 
                                 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	ASSUME DS:DSEG 
                                	EXTRN	LINCNT:WORD,LINLEN:WORD,CSRY:WORD,CSRX:WORD,BUF:WORD 
 0000                           DSEG	ENDS 
                                 
                                	EXTRN	GETFBC:NEAR 
                                	EXTRN	SCRSTT:NEAR,SCRATR:NEAR 
                                	EXTRN	SETCLR:NEAR,SWIDTH:NEAR 
                                	EXTRN	LCPY:NEAR 
                                 
 = 002C                         	COMMA="," 
 = 0028                         	OPAREN="(" 
 = 0029                         	CPAREN=")" 
 = 0022                         	QUOTE=34D 
 = 0008                         	BKSPC=8D 
 = 000D                         	CR=13D 
 = 000A                         	LF=10D 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-11
CLS,LOCATE,WIDTH (of screen),LCOPY                          

                                	PAGE 
                                ;CLS: CLear Screen issues an escape sequence to clear 
                                ;     the CRT.  Sequences are ANSII standard whereas the machine 
                                ;     default is not.  CLS resets the graphics cursor position. 
                                ;ENTRY - none 
                                ;EXIT  - none 
                                ;USES  - none 
                                ; 
                                	EXTRN	CLRSCN:NEAR 
 01F4  E8 03AE R                CLS:	CALL	SCNINT		;Test for optional parameter 
 01F7  F5                       	CMC 
 01F8  9C                       	PUSHF 
 01F9  50                       	PUSH	AX 
 01FA  E8 03DD R                	CALL	EOSCHK		;Test for end of statement 
 01FD  58                       	POP	AX 
 01FE  9D                       	POPF 
 01FF  53                       	PUSH	BX 
 0200  E8 0000 E                	CALL	CLRSCN 
 0203  5B                       	POP	BX 
 0204  C3                       	RET 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-12
CLS,LOCATE,WIDTH (of screen),LCOPY                          

                                	PAGE 
                                ;LOCATE: Parse the following syntax: 
                                ;       LOCATE [Y] [, [X] [, [CURSOR] [, [START] [, [STOP] ]]] 
                                ; 
                                	EXTRN	SCNPOS:NEAR 
 0205  E8 03AE R                LOCATE:	CALL	SCNINT		;Get optional Y parameter 
 0208  73 03                    	JNB	YLCPRM		;Parameter present 
 020A  E8 02E0 R                	CALL	GTLINE		;Get the current screen position 
 020D  8A D0                    YLCPRM:	MOV	DL,AL 
 020F  0A C0                    	OR	AL,AL		;Test for LOCATE 0 
 0211  74 62                    	JZ	GOFCER 
 0213  2A 16 0000 E             	SUB	DL,BYTE PTR KEYSW	;Increment if PF-keys are displayed 
 0217  3A 16 0000 E             	CMP	DL,BYTE PTR LINCNT	;Check for parameter range 
 021B  77 58                    	JA	GOFCER 
 021D  50                       	PUSH	AX		;Save new Y location 
 021E  E8 03AE R                	CALL	SCNINT		;Get optional X parameter 
 0221  73 05                    	JNB	XLCPRM		;Parameter present 
 0223  E8 0000 E                	CALL	SCNPOS		;Get the current screen position 
 0226  8A C6                    	MOV	AL,DH		;Default to current cursor position 
 0228  8A D0                    XLCPRM:	MOV	DL,AL 
 022A  FE CA                    	DEC	DL		;Dissallow LOCATE ,0 
 022C  3A 16 0000 E             	CMP	DL,BYTE PTR LINLEN	;Check for parameter range 
 0230  73 43                    	JAE	GOFCER 
 0232  50                       	PUSH	AX		;Save new X 
 0233  E8 03AE R                	CALL	SCNINT		;Cursor on/off - 0=off else on 
                                	EXTRN	CSRATR:NEAR 
 0236  B4 FF                    	MOV	AH,LOW 377O	;Ensure non-zero 
 0238  73 02                    	JNB	LOCPR1		;Parameter 1 found 
 023A  32 E4                    	XOR	AH,AH		;Flag as a default 
 023C  50                       LOCPR1:	PUSH	AX		;Push first parameter and flag 
 023D  E8 03AE R                	CALL	SCNINT		;Get next parameter 
 0240  B4 FF                    	MOV	AH,LOW 377O	;Ensure non-zero flag 
 0242  73 02                    	JNB	LOCPR2		;Parameter 2 found 
 0244  32 E4                    	XOR	AH,AH		;Flag as a default 
 0246  50                       LOCPR2:	PUSH	AX		;Push second parameter and flag 
 0247  E8 03AE R                	CALL	SCNINT		;Get next parameter 
 024A  B4 FF                    	MOV	AH,LOW 377O	;Ensure non-zero flag 
 024C  73 02                    	JNB	LOCPR3		;Parameter 3 found 
 024E  32 E4                    	XOR	AH,AH		;Flag as a default 
 0250  50                       LOCPR3:	PUSH	AX		;Push third parameter 
 0251  E8 03DD R                	CALL	EOSCHK		;Check for end of statement 
 0254  8B D3                    	MOV	DX,BX		;Save text pointer 
 0256  59                       	POP	CX 
 0257  5B                       	POP	BX 
 0258  58                       	POP	AX		;Recover three parameters 
 0259  52                       	PUSH	DX		;Save text pointer 
 025A  E8 0000 E                	CALL	CSRATR		;Set Cursor Attribute (OEM routine) 
 025D  72 4F                    	JB	GFCERR		;Declare error from CSRATR 
 025F  5B                       	POP	BX		;Text pointer 
 0260  8B C3                    SETLOC:	MOV	AX,BX 
 0262  59                       	POP	CX 
 0263  5B                       	POP	BX 
 0264  50                       	PUSH	AX 
 0265  8A F9                    	MOV	BH,CL 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-13
CLS,LOCATE,WIDTH (of screen),LCOPY                          

                                	EXTRN	SCNLOC:NEAR 
 0267  8B C3                    	MOV	AX,BX 
 0269  E8 0000 E                	CALL	SCNLOC		;position cursor at line [AL], col [AH] 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	CSRTYP:WORD 
 0000                           DSEG	ENDS 
                                	EXTRN	CSRDSP:NEAR 
 026C  8B D0                    	MOV	DX,AX		;Load cursor position 
 026E  B0 03                    	MOV	AL,LOW 3D	;Signal for user cursor 
 0270  E8 0000 E                	CALL	CSRDSP		;Set cursor 
 0273  5B                       	POP	BX		;Restore text pointer 
 0274  C3                       	RET 
                                 
                                 
 0275  E9 0000 E                GOFCER:	JMP	FCERR 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-14
CLS,LOCATE,WIDTH (of screen),LCOPY                          

                                	PAGE 
                                ;GWWID: Parsing for WIDTH [X] [, [Y]] 
                                ;ENTRY - WIDTH LPRINT is not a possibility at this point. 
                                ;EXIT  - AL = X param 
                                ;        BX = text pointer 
                                ; 
 0278  E8 03AE R                GWWID:	CALL	SCNINT		;Get X dimension 
 027B  73 03                    	JNB	XPRAM		;X param found 
 027D  A0 0000 E                	MOV	AL,BYTE PTR LINLEN	;Use current as default 
 0280  50                       XPRAM:	PUSH	AX		;Save for RET to WIDTH 
 0281  50                       	PUSH	AX		;Save for GWWID use 
 0282  E8 03AE R                	CALL	SCNINT		;Get Y dimension 
 0285  73 03                    	JNB	YPRAM		;Y param found 
 0287  A0 0000 E                	MOV	AL,BYTE PTR LINCNT	;Use current as default 
 028A  50                       YPRAM:	PUSH	AX 
 028B  E8 03DD R                	CALL	EOSCHK		;Must be at end of statement 
 028E  58                       	POP	AX 
 028F  3A 06 0000 E             	CMP	AL,BYTE PTR LINCNT	;Set CC's for Y dimension change 
 0293  9F                       	LAHF 
 0294  8B C8                    	MOV	CX,AX 
 0296  58                       	POP	AX 
 0297  3A 06 0000 E             	CMP	AL,BYTE PTR LINLEN	;Set CC's for X dimension change 
 029B  9F                       	LAHF 
 029C  22 E5                    	AND	AH,CH		;Set CC's for X OR Y change 
 029E  9E                       	SAHF 
 029F  74 0B                    	JZ	GWWIDX		;No change - done 
 02A1  53                       	PUSH	BX		;Save text pointer 
 02A2  50                       	PUSH	AX		;save Width 
 02A3  51                       	PUSH	CX		;save Height 
 02A4  E8 0000 E                	CALL	SWIDTH		;Machine dependent set logic 
 02A7  59                       	POP	CX 
 02A8  58                       	POP	AX 
 02A9  72 03                    	JB	GFCERR		;Error detected within SWIDTH 
 02AB  5B                       	POP	BX		;Restore text pointer 
 02AC  58                       GWWIDX:	POP	AX		;Return X dimension for WIDTH 
 02AD  C3                       	RET 
                                 
 02AE  E9 0000 E                GFCERR:	JMP	FCERR 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-15
CLS,LOCATE,WIDTH (of screen),LCOPY                          

                                	PAGE 
                                ;LCOPY: Copy the screen to the line printer. 
                                ;ENTRY - BX = text pointer 
                                ;EXIT  - BX = text pointer 
 02B1  B2 00                    LCOPYS:	MOV	DL,LOW 0	;default parm is 0 
 02B3  74 03                    	JZ	NOPARM		;branch if end-of-statement 
 02B5  E8 0000 E                	CALL	GETBYT		;[DL]=parm 
 02B8  E8 03DD R                NOPARM:	CALL	EOSCHK		;Check for unwanted parameters 
 02BB  53                       	PUSH	BX		;Save text pointer 
 02BC  E8 0000 E                	CALL	LCPY 
 02BF  72 ED                    	JB	GFCERR		;Error detected in low level routine 
 02C1  5B                       	POP	BX 
 02C2  C3                       	RET 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-16
CLS,LOCATE,WIDTH (of screen),LCOPY                          

                                	PAGE 
                                	SUBTTL  COLOR,GETLIN,SCREEN (function and statement) 
                                ;COLOR: Set the foreground, background, and boarder attributes. 
                                ;       SYNTAX - COLOR [FOR] [,BACK [,BOARD]] 
                                ;       Where - FOR   = Foreground attribute 
                                ;               BACK  = Background attribute 
                                ;               BOARD = Boarder attribute 
                                ; 
 02C3  E8 0366 R                COLOR:	CALL	GTPRMS		;Get arbitrary number of int. parms. 
 02C6  53                       COLOR1:	PUSH	BX		;Save text pointer 
 02C7  8B DF                    	MOV	BX,DI		;Get parameter buffer pointer 
 02C9  E8 0000 E                	CALL	SETCLR		;Check colors for validity 
 02CC  72 E0                    	JB	GFCERR		;Error detected by low level routine 
 02CE  5B                       	POP	BX 
 02CF  C3                       	RET 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-17
COLOR,GETLIN,SCREEN (function and statement)                

                                	PAGE 
                                ;GETLIN: Obtain the current cursor line number. 
                                ;EXIT - FAC = cursor line number 
                                ;       BX preserved 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	LINLEN:WORD,LINCNT:WORD,KEYSW:WORD 
 0000                           DSEG	ENDS 
 02D0  E8 02E0 R                GETLIN:	CALL	GTLINE 
 02D3  53                       	PUSH	BX 
 02D4  33 DB                    	XOR	BX,BX 
 02D6  8A D8                    	MOV	BL,AL 
 02D8  E8 0000 E                	CALL	MAKINT 
 02DB  5B                       	POP	BX 
 02DC  E8 0000 E                	CALL	CHRGTR 
 02DF  C3                       	RET 
                                 
                                ;GTLINE: Get the line number of the character position to which the next 
                                ;character would be written. 
                                ;Entry - none 
                                ;Exit  - [AL] = line number 
                                ;Uses  - AH 
                                ; 
 02E0  A0 0000 E                GTLINE:	MOV	AL,BYTE PTR CSRY	;BX = cursor line number 
 02E3  8A 26 0000 E             	MOV	AH,BYTE PTR CSRX 
 02E7  3A 26 0000 E             	CMP	AH,BYTE PTR LINLEN 
 02EB  76 0C                    	JBE	GETLN0		;BRIF will not wrap before next char is output 
 02ED  8A 26 0000 E             	MOV	AH,BYTE PTR LINCNT	;AL=last valid line number 
 02F1  FE CC                    	DEC	AH		;Scroll always occurs on line [LINCNT]-1 
 02F3  3A C4                    	CMP	AL,AH 
 02F5  73 02                    	JAE	GETLN0		;BRIF wrap will cause scroll 
 02F7  FE C0                    	INC	AL		;Else wrap will cause line number increment 
 02F9  C3                       GETLN0:	RET 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-18
COLOR,GETLIN,SCREEN (function and statement)                

                                	PAGE 
                                ;SCRENF: Obtain character from screen. 
 02FA                           SCRENF: 
 02FA  E8 0000 E                	CALL	CHRGTR		;Eat the SCREEN token since SCREEN is 
                                				;defined as a statement and the function 
                                				;is dispatched to by EVAL. 
 02FD  E8 0000 E                	CALL	SYNCHR 
 0300  28                       	DB	OFFSET OPAREN	;Check for "(" 
 0301  E8 03AE R                	CALL	SCNINT		;Get Y parameter 
 0304  72 38                    	JB	FCERGO		;Parameter not present 
 0306  FE C8                    	DEC	AL 
 0308  3A 06 0000 E             	CMP	AL,BYTE PTR LINCNT	;Check range [1,LINCNT] 
 030C  73 30                    	JAE	FCERGO		;Out of range 
 030E  FE C0                    	INC	AL 
 0310  50                       	PUSH	AX		;Y param. 
 0311  E8 03AE R                	CALL	SCNINT		;Check for X param 
 0314  72 28                    	JB	FCERGO		;Error - no X param 
 0316  FE C8                    	DEC	AL 
 0318  3A 06 0000 E             	CMP	AL,BYTE PTR LINLEN	;Check range [1,LINLEN] 
 031C  73 20                    	JAE	FCERGO		;Out of range 
 031E  FE C0                    	INC	AL 
 0320  50                       	PUSH	AX		;X param. 
 0321  80 FC 29                 	CMP	AH,LOW OFFSET CPAREN	;Check terminator 
 0324  74 1B                    	JE	SCRCHR		;End of params - go get char. 
 0326  E8 03AE R                	CALL	SCNINT 
 0329  72 13                    	JB	FCERGO		;Error - no CPAREN and no Z param. 
 032B  80 FC 29                 	CMP	AH,LOW OFFSET CPAREN	;Must now have CPAREN 
 032E  75 0E                    	JNE	FCERGO 
 0330  3C 00                    	CMP	AL,LOW 00O	;Is Z zero? 
 0332  74 0D                    	JE	SCRCHR		;Yes - go get screen character 
 0334  58                       	POP	AX		;Retrieve X param 
 0335  59                       	POP	CX		;Retrieve Y param 
 0336  53                       	PUSH	BX		;Save text pointer 
 0337  8B D9                    	MOV	BX,CX		;Call SCRATR with AX=X,BX=Y 
 0339  E8 0000 E                	CALL	SCRATR		;Get screen attributes 
 033C  EB 12                    	JMP	SHORT SCRENX 
                                 
 033E  E9 0000 E                FCERGO:	JMP	FCERR 
                                 
 0341  58                       SCRCHR:	POP	AX		;Retrieve col number 
 0342  59                       	POP	CX		;Retrieve row number 
 0343  53                       	PUSH	BX		;Save the text pointer 
                                	EXTRN	SCRINP:NEAR 
 0344  52                       	PUSH	DX 
 0345  8A D1                    	MOV	DL,CL 
 0347  8A F0                    	MOV	DH,AL 
 0349  F9                       	STC			;Indicate call is from SCREEN function 
 034A  E8 0000 E                	CALL	SCRINP		;[AX]=Read char at (DH,DL) 
 034D  8B D8                    	MOV	BX,AX		;return result in BX 
 034F  5A                       	POP	DX 
 0350  E8 0000 E                SCRENX:	CALL	MAKINT		;Set FAC 
 0353  5B                       	POP	BX		;Retrieve text pointer 
 0354  4B                       	DEC	BX 
 0355  E8 0000 E                	CALL	CHRGTR 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-19
COLOR,GETLIN,SCREEN (function and statement)                

 0358  C3                       	RET 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-20
COLOR,GETLIN,SCREEN (function and statement)                

                                	PAGE 
                                ;SCREEN: This statement has no standard syntax.  It is handled 
                                ;        by parsing single byte integers until end of statement. 
                                ;        Parameters may be null (appearance of a comma before an 
                                ;        expression is encountered). 
                                ;       SCRSTT (machine dependent) is called to process parameters 
                                ;       which are in a list which is headed by a one word parameter 
                                ;        count.  The remaining list entries are two bytes long. 
                                ;        The first byte is 0 if the SCREEN parameter was null. 
                                ;        The second byte is the parameter value if it is nonnull 
                                ;        or meaningless (if the parameter was null). 
                                 
 0359  E8 0366 R                SCREEN:	CALL	GTPRMS		;Get single byte integer parms 
 035C  53                       	PUSH	BX 
 035D  8B DF                    	MOV	BX,DI 
 035F  E8 0000 E                	CALL	SCRSTT		;Process params 
 0362  72 DA                    	JB	FCERGO		;Error detected in low level routine 
 0364  5B                       	POP	BX		;Restore text pointer 
 0365  C3                       	RET 
                                 
                                 
 0366  BF 0000 E                GTPRMS:	MOV	DI,OFFSET BUF	;Parameters stored in BUF 
 0369  33 C9                    	XOR	CX,CX		;Initialize parameter count 
 036B  47                       	INC	DI		;Reserve parameter count location 
 036C  41                       SCRLOP:	INC	CX		;Count the param 
 036D  51                       	PUSH	CX 
 036E  57                       	PUSH	DI 
 036F  E8 03AE R                	CALL	SCNINT		;Look for a parameter 
 0372  5F                       	POP	DI 
 0373  59                       	POP	CX 
 0374  74 0C                    	JZ	STTEND		;End of statement encountered 
 0376  73 02                    	JNB	PRMFND		;Parameter found (AH = separator) 
 0378  33 C0                    	XOR	AX,AX		;Indicate a null parameter 
 037A  86 E0                    PRMFND:	XCHG	AH,AL 
 037C  89 05                    	MOV	WORD PTR 0[DI],AX	;Load parameter to list 
 037E  47                       	INC	DI		;Next list entry 
 037F  47                       	INC	DI 
 0380  EB EA                    	JMP	SHORT SCRLOP	;Go get next param 
                                 
                                 
 0382  72 07                    STTEND:	JB	NOPRM 
 0384  C6 05 FF                 	MOV	BYTE PTR 0[DI],LOW 255D	;Set param. exists flag 
 0387  88 45 01                 	MOV	BYTE PTR 1[DI],AL 
 038A  41                       	INC	CX 
 038B  49                       NOPRM:	DEC	CX 
 038C  BF 0000 E                	MOV	DI,OFFSET BUF	;Reset list index 
 038F  88 0D                    	MOV	BYTE PTR 0[DI],CL	;Head list with param count 
 0391  C3                       	RET 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-21
COLOR,GETLIN,SCREEN (function and statement)                

                                	PAGE 
                                	SUBTTL  PUT & GET (Distinguish Disk from Graphics) 
                                 
                                	PUBLIC	PUT,GET 
                                 
                                	EXTRN	DPUTG:NEAR,GPUTG:NEAR 
                                 
                                ;PUT: This code parses enough of the PUT/GET statement to 
                                ;GET: distinguish between the graphics and disk versions of 
                                ;     these commands. 
                                ;       The accepted technique is to search for a "(".  This 
                                ;       does not always allow for file number expressions which begin 
                                ;       with  "(". 
                                ;ENTRY: [BX] points to the character following the token. 
                                ;EXIT  - Exit is made by jumping to the appropriate PUT/GET 
                                ;        code. 
                                ;        [BX] - restored to entry value before call of PUT/GET code. 
                                 
 0392  B9 0001                  PUT:	MOV	CX,1		;Set PUT flag 
 0395  EB 03 90                 	JMP	PARSE 
 0398  33 C9                    GET:	XOR	CX,CX		;Set GET flag 
 039A  51                       PARSE:	PUSH	CX		;Save indication of PUT or GET 
 039B  53                       	PUSH	BX		;Save text pointer 
 039C  3C 28                    	CMP	AL,LOW "("	;Test for "(" 
 039E  74 04                    	JE	GRPVER		;branch if graphics version 
 03A0  3C 40                    	CMP	AL,LOW "@"	;test for relative GET/PUT 
 03A2  75 05                    	JNE	DSKVER		;Disk code may have no "(" or "@" 
 03A4  5B                       GRPVER:	POP	BX		;Restore text pointer 
 03A5  58                       	POP	AX 
 03A6  E9 0000 E                	JMP	GPUTG		;Go to graphics PUT/GET 
                                 
 03A9  5B                       DSKVER:	POP	BX		;Restore text pointer 
 03AA  58                       	POP	AX		;Get PUT/GET flag 
 03AB  E9 0000 E                	JMP	DPUTG 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-22
PUT & GET (Distinguish Disk from Graphics)                  

                                	PAGE 
                                	SUBTTL  Parsing Routines for GWSTS 
                                	PUBLIC	SCNINT,EOSCHK 
                                 
                                ;SCNINT: Test for an optional integer parameter. 
                                ;       If a comma or EOL is discovered assume parameter is missing. 
                                ;       Otherwise evaluate the parameter. 
                                ;EXIT - [AL] = parameter value 
                                ;       C set - no parameter found 
                                ;       C reset - parameter found 
                                ;USES - ALL 
 03AE  4B                       SCNINT:	DEC	BX 
 03AF  E8 0000 E                	CALL	CHRGTR 
 03B2  74 23                    	JZ	NOMORE		;EOL - Param null 
 03B4  3C 2C                    	CMP	AL,LOW OFFSET COMMA 
 03B6  74 1E                    	JZ	OMITD		;Comma found. Param null. 
 03B8  E8 0000 E                	CALL	GETBYT		;Evaluate parameter 
 03BB  50                       	PUSH	AX		;Save parameter 
 03BC  4B                       	DEC	BX		;Prepare to test expression terminator 
 03BD  E8 0000 E                	CALL	CHRGTR 
 03C0  74 0D                    	JZ	TRMOK		;EOL caused termination - OK 
 03C2  3C 2C                    	CMP	AL,LOW OFFSET COMMA 
 03C4  74 08                    	JZ	TRMCOM		;Comma caused termination - OK 
 03C6  3C 29                    	CMP	AL,LOW OFFSET CPAREN	;CPAREN caused termination - OK 
 03C8  74 04                    	JZ	TRMCOM 
 03CA  58                       	POP	AX		;Retrieve param. 
 03CB  E9 0000 E                	JMP	FCERR		;All other terminators not OK 
                                 
 03CE  43                       TRMCOM:	INC	BX		;Move over comma 
 03CF  8A C8                    TRMOK:	MOV	CL,AL		;Save terminator 
 03D1  58                       	POP	AX		;Retrieve parameter value 
 03D2  8A E1                    	MOV	AH,CL		;Return with AH = terminator 
 03D4  F8                       	CLC			;Flag param. found 
 03D5  C3                       	RET 
                                 
 03D6  43                       OMITD:	INC	BX 
 03D7  8A E0                    NOMORE:	MOV	AH,AL		;Save terminator 
 03D9  B0 00                    	MOV	AL,LOW 0D	;Set param value to 0, save flags 
 03DB  F9                       	STC			;Flag param. not found 
 03DC  C3                       	RET 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-23
Parsing Routines for GWSTS                                  

                                	PAGE 
                                ;EOSCHK: Detect garbage beyond end of statement 
                                ;ENTRY - BX = text pointer 
                                ;EXIT  - AL = 0 & all other registers preserved or 
                                ;      - Exit on error through FCERR 
                                ; 
 03DD                           EOSCHK: 
 03DD  4B                       	DEC	BX		;Back up text pointer 
 03DE                           EOSCH1: 
 03DE  E8 0000 E                	CALL	CHRGTR		;Get next character (skipping blanks) 
 03E1  74 03                    	JZ	EOSCKX		;End of statement 
 03E3  E9 0000 E                	JMP	SNERR		;Not EOS - error 
 03E6  C3                       EOSCKX:	RET 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-24
Parsing Routines for GWSTS                                  

                                	PAGE 
                                	SUBTTL  Graphics Support Specific to the 8086 
                                 
                                	PUBLIC	LINLP3 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	MINDEL:WORD,MAXDEL:WORD,MINUPD:WORD,MAXUPD:WORD 
 0000                           DSEG	ENDS 
                                	EXTRN	SETC:NEAR 
                                 
                                ;LINLP3: Inner loop of line code. 
                                 
 03E7  E8 0000 E                LINLP3:	CALL	SETC		;SET CURRENT POINT 
 03EA  03 16 0000 E             	ADD	DX,WORD PTR MINDEL	;ADD SMALL DELTA TO SUM 
 03EE  3B 16 0000 E             	CMP	DX,WORD PTR MAXDEL	;TIME TO UPDATE MINOR? 
 03F2  72 08                    	JB	LINLOP		;NO, UPDATE MAJOR AND CONTINUE 
 03F4  2B 16 0000 E             	SUB	DX,WORD PTR MAXDEL	;UPDATE SUM FOR NEXT POINT 
 03F8  FF 16 0001 E             	CALL	 WORD PTR MINUPD+1	;ADVANCE MINOR AXIS 
 03FC  FF 16 0001 E             LINLOP:	CALL	 WORD PTR MAXUPD+1	;UPDATE MAJOR AXIS 
 0400  E2 E5                    	LOOP	LINLP3		;CONTINUE UNTIL COUNT EXHAUSTED 
 0402  C3                       	RET 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-25
Graphics Support Specific to the 8086                       

                                	PAGE 
                                	SUBTTL  VARPT2 - VARPTR$ Function 
                                 
                                	PUBLIC	VARPT2 
                                	EXTRN	PTRGTN:NEAR 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	VALTYP:WORD,DSCPTR:WORD 
 0000                           DSEG	ENDS 
                                 
                                ;VARPTR$(x) 
                                ; Called after VARPTR sees next char is "$" 
                                ; Returns 3 byte string as follows: 
                                ;  byte 0: type of x 
                                ;  byte 1: low-adr of varptr(x) 
                                ;  byte 2: high-adr of varptr(x) 
                                ; Primary use is so BASCOM can handle DRAW "X"+VARPTR$(A$) 
                                ; 
 0403                           VARPT2: 
 0403  E8 0000 E                	CALL	CHRGTR		;get byte after "$" 
 0406  E8 0000 E                	CALL	SYNCHR 
 0409  28                       	DB	OFFSET "("	;EAT LEFT PAREN 
 040A  E8 0000 E                	CALL	PTRGTN		;GET ADDRESS OF VARIABLE 
 040D  E8 0000 E                	CALL	SYNCHR 
 0410  29                       	DB	OFFSET ")"	;EAT RIGHT PAREN 
 0411  0B D2                    	OR	DX,DX		;MAKE SURE NOT UNDEFINED VAR 
 0413  75 03                    	JNZ	VARRT2		;SET CC'S. ZERO IF UNDEF 
 0415  E9 0000 E                	JMP	FCERR		;ALL OVER IF UNDEF (DONT WANT 
                                				;USER POKING INTO ZERO IF HE'S 
                                				;TOO LAZY TO CHECK 
 0418                           VARRT2: 
 0418  53                       	PUSH	BX		;Save text pntr 
 0419  52                       	PUSH	DX		;Save Var addr 
 041A  A0 0000 E                	MOV	AL,BYTE PTR VALTYP 
 041D  50                       	PUSH	AX		;Save type 
 041E  B0 03                    	MOV	AL,LOW 3 
 0420  E8 0000 E                	CALL	STRINI		;Get a 3 byte string 
 0423  8B 1E 0000 E             	MOV	BX,WORD PTR DSCPTR	;Descriptor in [BX] 
 0427  8F 07                    	POP	WORD PTR 0[BX]	;Store Type in Byte 1 
 0429  43                       	INC	BX 
 042A  8F 07                    	POP	WORD PTR 0[BX]	;Store addr in Bytes 2-3. 
 042C  E9 0000 E                	JMP	PUTNEW		;Desc in FAC & ret. ([BX] on stack). 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-26
VARPT2 - VARPTR$ Function                                   

                                	PAGE 
                                	SUBTTL  PLAY/SOUND statements 
                                 
                                ; 
                                ; PLAY - MUSIC MACRO LANGUAGE 
                                ; 
                                	PUBLIC	PLAYS 
                                	EXTRN	DONOTE:NEAR 
                                	EXTRN	MACLNG:NEAR,MCLXEQ:NEAR,FETCHR:NEAR,DECFET:NEAR,VALSC2:NEAR 
                                	EXTRN	FETCHZ:NEAR 
                                 
                                ;Low-Level routine required: 
                                ; DONOTE(AL: voice (0=forground, 1=back), CX:frequency, DX:duration (1=18.7ms)) 
                                ; queues note for execution, saves all regs. 
                                ; 
 042F  BA 0435 R                PLAYS:	MOV	DX,OFFSET PLYTAB	;POINT TO PLAY COMMAND TABLE 
 0432  E9 0000 E                	JMP	MACLNG 
                                 
 0435  41                       PLYTAB:	DB	"A"		;THE NOTES A-G 
 0436  04DC R                   	DW	OFFSET PLYNOT 
 0438  42                       	DB	"B" 
 0439  04DC R                   	DW	OFFSET PLYNOT 
 043B  43                       	DB	"C" 
 043C  04DC R                   	DW	OFFSET PLYNOT 
 043E  44                       	DB	"D" 
 043F  04DC R                   	DW	OFFSET PLYNOT 
 0441  45                       	DB	"E" 
 0442  04DC R                   	DW	OFFSET PLYNOT 
 0444  46                       	DB	"F" 
 0445  04DC R                   	DW	OFFSET PLYNOT 
 0447  47                       	DB	"G" 
 0448  04DC R                   	DW	OFFSET PLYNOT 
                                 
 044A  4D                       	DB	"M"		;Music Meta Command 
 044B  05B8 R                   	DW	OFFSET PLYMET 
                                 
 044D  CE                       	DB	OFFSET "N"+128D	;PLAY NUMERIC NOTE 
 044E  04BD R                   	DW	OFFSET PLYNUM 
 0450  CF                       	DB	OFFSET "O"+128D	;OCTAVE 
 0451  04B1 R                   	DW	OFFSET POCTAV 
 0453  D0                       	DB	OFFSET "P"+128D	;PAUSE 
 0454  04A1 R                   	DW	OFFSET PPAUSE 
 0456  D4                       	DB	OFFSET "T"+128D	;TEMPO 
 0457  0497 R                   	DW	OFFSET PTEMPO 
 0459  CC                       	DB	OFFSET "L"+128D	;LENGTH 
 045A  0487 R                   	DW	OFFSET PLYLEN 
 045C  58                       	DB	"X"		;EXECUTE STRING 
 045D  0000 E                   	DW	OFFSET MCLXEQ 
 045F  00                       	DB	00		;END OF TABLE 
                                 
                                ; TABLE OF INDEXES INTO NOTTAB FOR EACH NOTE 
                                ; VALUE OF 255 MEANS NOTE NOT ALLOWED. 
                                 
 0460  12                       NOTXLT:	DB	OFFSET 9D*2	;A- (G#) 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-27
PLAY/SOUND statements                                       

 0461  14                       	DB	OFFSET 10D*2	;A 
 0462  16                       	DB	OFFSET 11D*2	;A# 
 0463  18                       	DB	OFFSET 12D*2	;B 
 0464  FF                       	DB	255D		;NO C- OR B# 
 0465  02                       	DB	OFFSET 1D*2	;C 
 0466  04                       	DB	OFFSET 2D*2	;C# 
 0467  06                       	DB	OFFSET 3D*2	;D 
 0468  08                       	DB	OFFSET 4D*2	;D# 
 0469  0A                       	DB	OFFSET 5D*2	;E 
 046A  FF                       	DB	255D		;NO E# OR F- 
 046B  0C                       	DB	OFFSET 6D*2	;F 
 046C  0E                       	DB	OFFSET 7D*2	;F# 
 046D  10                       	DB	OFFSET 8D*2	;G 
 046E  12                       	DB	OFFSET 9D*2	;G# 
                                 
                                ; TABLE OF NOTE FREQUENCIES 
                                ; THESE ARE THE FREQUENCIES IN HERTZ OF THE TOP OCTAVE (6) 
                                ; DIVIDED DOWN BY POWERS OF TWO TO GET ALL OTHER OCTAVES 
                                ; 
 046F  105A                     NOTTAB:	DW	4186D		;C 
 0471  1153                     	DW	4435D		;C# 
 0473  125B                     	DW	4699D		;D 
 0475  1372                     	DW	4978D		;D# 
 0477  149A                     	DW	5274D		;E 
 0479  15D4                     	DW	5588D		;F 
 047B  1720                     	DW	5920D		;F# 
 047D  1880                     	DW	6272D		;G 
 047F  19F5                     	DW	6645D		;G# 
 0481  1B80                     	DW	7040D		;A 
 0483  1D23                     	DW	7459D		;A# 
 0485  1EDE                     	DW	7902D		;B 
                                 
 0487  73 50                    PLYLEN:	JNB	PLGOFC		;ERROR IF NO ARG 
 0489  80 FA 41                 	CMP	DL,LOW 65D	;ALLOW ONLY UP TO 64 
 048C  73 4B                    	JNB	PLGOFC		;FC ERROR IF TOO BIG 
 048E  0A D2                    	OR	DL,DL		;DON'T ALLOW ZERO 
 0490  74 47                    	JZ	PLGOFC		;FC ERROR IF ZERO 
 0492  88 16 0000 E             	MOV	BYTE PTR NOTELN,DL	;STORE NOTE LENGTH 
 0496  C3                       	RET 
                                 
 0497  80 FA 20                 PTEMPO:	CMP	DL,LOW 32D	;ALLOW ONLY 32 - 255 
 049A  72 3D                    	JB	PLGOFC		;FC ERROR IF TOO SMALL 
 049C  88 16 0000 E             	MOV	BYTE PTR BEATS,DL	;Store Beats per minute 
 04A0  C3                       	RET 
                                 
 04A1                           NCFCER: 
 04A1  73 36                    PPAUSE:	JNB	PLGOFC		;ERROR IF NO ARG 
 04A3  33 C9                    	XOR	CX,CX		;PASS FREQ OF 0 
 04A5  80 FA 41                 	CMP	DL,LOW 65D	;ALLOW ONLY 1-64 
 04A8  73 2F                    	JNB	PLGOFC		;FC ERROR IF TOO BIG 
 04AA  0A D2                    	OR	DL,DL		;SEE IF ZERO 
 04AC  74 0E                    	JZ	PLYRET		;RETURN IF SO - NO PAUSE 
 04AE  E9 0544 R                	JMP	PPAUS2		;[DX]=PAUSE LENGTH 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-28
PLAY/SOUND statements                                       

 04B1  73 26                    POCTAV:	JNB	PLGOFC		;ERROR IF NO ARG 
 04B3  80 FA 07                 	CMP	DL,LOW 7	;ALLOW ONLY OCTAVES 0..6 
 04B6  73 21                    	JNB	PLGOFC		;FC ERROR IF TO BIG 
 04B8  88 16 0000 E             	MOV	BYTE PTR OCTAVE,DL 
 04BC  C3                       PLYRET:	RET 
                                 
 04BD  73 1A                    PLYNUM:	JNB	PLGOFC		;ERROR IF NO ARG 
 04BF  8A C2                    	MOV	AL,DL		;GET NOTE NUMBER INTO [AL] 
 04C1  0A C0                    	OR	AL,AL		;SEE IF ZERO (PAUSE) 
 04C3  74 41                    	JZ	PLYNO3		;DO THE PAUSE 
 04C5  3C 55                    	CMP	AL,LOW 85D	;ALLOW ONLY 0..84 
 04C7  73 10                    	JNB	PLGOFC		;FC ERROR IF TOO BIG 
 04C9  98                       	CBW			;CLEAR HI BYTE FOR DIVIDE 
 04CA  48                       	DEC	AX		;MAP TO 0..83 
 04CB  B2 0C                    	MOV	DL,LOW 12D	;DIVIDE BY 12 
 04CD  F6 F2                    	DIV	DL 
 04CF  8A F0                    	MOV	DH,AL		;OCTAVE TO [DH] 
 04D1  8A C4                    	MOV	AL,AH		;NOTE NUMBER IS REMAINDER 
 04D3  FE C0                    	INC	AL		;ADD ONE 
 04D5  02 C0                    	ADD	AL,AL		;DOUBLE TO MAKE INDEX 
 04D7  EB 31                    	JMP	SHORT PLYNU3	;PLAY NOTE [AL], OCTAVE [DH] 
                                 
 04D9  E9 0000 E                PLGOFC:	JMP	FCERR		;GIVE FUNCTION CALL ERROR 
                                 
 04DC  80 E9 40                 PLYNOT:	SUB	CL,LOW OFFSET "A"-1	;MAP TO 1..7 
 04DF  02 C9                    	ADD	CL,CL		;MAP TO 2..14 (THIS ASSUMES SHARP) 
 04E1  E8 0000 E                	CALL	FETCHR		;GET NEXT CHARACTER 
 04E4  74 13                    	JZ	PLYNO2		;END OF STRING - NO SHARP OR FLAT 
 04E6  3C 23                    	CMP	AL,LOW "#"	;CHECK FOR POSSIBLE SHARP 
 04E8  74 11                    	JZ	PLYSHP		;SHARP IT THEN 
 04EA  3C 2B                    	CMP	AL,LOW "+"	;"+" ALSO MEANS SHARP 
 04EC  74 0D                    	JZ	PLYSHP 
 04EE  3C 2D                    	CMP	AL,LOW "-"	;"-" MEANS FLAT 
 04F0  74 05                    	JZ	PLYFLT 
 04F2  E8 0000 E                	CALL	DECFET		;PUT CHAR BACK IN STRING. 
 04F5  EB 02                    	JMP	SHORT PLYNO2	;TREAT AS UNMODIFIED NOTE. 
 04F7  FE C9                    PLYFLT:	DEC	CL		;DECREMENT TWICE TO FLAT IT 
 04F9  FE C9                    PLYNO2:	DEC	CL		;MAP BACK TO UNSHARPED 
 04FB  8A C1                    PLYSHP:	MOV	AL,CL		;INTO [AL] FOR XLAT 
 04FD  BB 0460 R                	MOV	BX,OFFSET NOTXLT	;POINT TO TRANSLATE TABLE 
 0500                           ?CSLAB:				; Code segment dummy label 
 0500  2E: D7                   	XLAT	BYTE PTR ?CSLAB	;TRANSLATE INTO NOTE TABLE INDEX 
 0502  0A C0                    	OR	AL,AL		;SEE IF LEGAL NOTE 
 0504  78 D3                    	JS	PLGOFC		;NOTE'S OK IF NOT .GT. 127 
                                ; 
                                ; ENTER HERE WITH NOTE TO PLAY IN [AL] 
                                ; NOTE 0 IS PAUSE, 2,4,6,8..10,12 ARE A-G AND FRIENDS. 
                                ; 
 0506                           PLYNO3: 
 0506  8A 36 0000 E             	MOV	DH,BYTE PTR OCTAVE	;GET OCTAVE INTO [DH] FOR LATER MATH 
 050A                           PLYNU3: 
 050A  50                       	PUSH	AX		;Save Note 
 050B  52                       	PUSH	DX		;Save Octave 
 050C  A0 0000 E                	MOV	AL,BYTE PTR NOTELN 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-29
PLAY/SOUND statements                                       

 050F  A2 0000 E                	MOV	BYTE PTR NOTE1L,AL	;One note duration = Note length 
 0512  E8 0000 E                	CALL	FETCHR 
 0515  74 10                    	JZ	PLYNU4		;Brif end of string 
 0517  E8 0000 E                	CALL	VALSC2		;See if possible number 
 051A  80 FA 41                 	CMP	DL,LOW 65D	;If was .gt. 64 
 051D  73 BA                    	JNB	PLGOFC		; then error 
 051F  0A D2                    	OR	DL,DL		;Any Length? 
 0521  74 04                    	JZ	PLYNU4		;Brif not, just do note 
 0523  88 16 0000 E             	MOV	BYTE PTR NOTE1L,DL	;Store duration for this note 
 0527                           PLYNU4: 
 0527  5A                       	POP	DX		;Get Octave 
 0528  58                       	POP	AX		;Restore Note 
 0529  98                       	CBW			;FILL [AH] WITH ZEROS 
 052A  8B D8                    	MOV	BX,AX		;TRANSFER TO BX FOR INDEXING 
 052C  0B DB                    	OR	BX,BX		;SEE IF PAUSE (NOTE # 0) 
 052E  74 0E                    	JZ	PLYNO4		;IF PAUSE, PASS [BX]=0 
 0530  2E: 8B 9F 046D R         	MOV	BX,WORD PTR NOTTAB-2[BX]	;FETCH FREQUENCY 
 0535  B1 06                    	MOV	CL,LOW 6	;CALCULATE 6-OCTAVE 
 0537  2A CE                    	SUB	CL,DH		;FOR # OF TIMES TO SHIFT FREQ. 
 0539  D3 EB                    	SHR	BX,CL		;DIVIDE BY 2^(6-OCTAVE) 
 053B  83 D3 00                 	ADC	BX,0		;ADD IN CARRY TO ROUND UP 
 053E                           PLYNO4: 
 053E  8B CB                    	MOV	CX,BX		;FREQUENCY INTO [CX] FOR DONOTE 
 0540  8A 16 0000 E             	MOV	DL,BYTE PTR NOTE1L	;Get this note's length 
 0544                           PPAUS2: 
 0544  A0 0000 E                	MOV	AL,BYTE PTR BEATS	;GET BEATS PER UNIT TIME 
 0547  F6 E2                    	MUL	DL		;CALC NOTE LENGTH * BEATS 
 0549  51                       	PUSH	CX		;SAVE [CX] WHILE WE DIVIDE 
 054A  8B C8                    	MOV	CX,AX		;CALC TIME CONST/(BEATS * NOTE LENGTH) 
 054C  BA 0001                  	MOV	DX,1		;[DX:AX]=96000 (4*60*400.0) and will 
 054F  B8 7700                  	MOV	AX,73400O	; cause DONOTE [DX]=1 to play 2.5 milliseconds 
 0552  F7 F1                    	DIV	CX		; (in other words [DX]=400 will play 1 second) 
 0554  59                       	POP	CX		;RESTORE FREQUENCY 
 0555  0B C0                    	OR	AX,AX		;IF DURATION IS ZERO, GET OUT. 
 0557  74 57                    	JZ	PLYNO8 
 0559  51                       	PUSH	CX		;Save Freq 
 055A                           PLYDOT: 
 055A  50                       	PUSH	AX		;Save duration 
 055B  E8 0000 E                	CALL	FETCHR 
 055E  74 18                    	JZ	PLYDOX		;Brif EOS 
 0560  3C 2E                    	CMP	AL,LOW "."	;Note duration extender? 
 0562  75 11                    	JNZ	PLYDO2		;Brif not 
 0564  58                       	POP	AX		;Get duration 
 0565  B9 0003                  	MOV	CX,3 
 0568  F7 E1                    	MUL	CX 
 056A  D1 E8                    	SHR	AX,1		;Duration = Duration * 1.5 
 056C  D1 EA                    	SHR	DX,1		;Ovf/2 
 056E  0B D2                    	OR	DX,DX		;Still too big? 
 0570  74 E8                    	JZ	PLYDOT		;Itterate if not 
 0572  E9 0000 E                	JMP	FCERR		; else complain.. 
 0575                           PLYDO2: 
 0575  E8 0000 E                	CALL	DECFET		;Put char back 
 0578                           PLYDOX: 
 0578  58                       	POP	AX		;Duration 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-30
PLAY/SOUND statements                                       

 0579  59                       	POP	CX		;Get freq 
 057A  0B C9                    	OR	CX,CX 
 057C  74 33                    	JZ	PLYNO9		;Brif Pause 
 057E  80 3E 0000 E 01          	CMP	BYTE PTR MSCALE,LOW 1 
 0583  74 2C                    	JZ	PLYNO9		;Brif Legatto 
 0585  50                       	PUSH	AX		;Save Duration 
 0586  51                       	PUSH	CX		;Save Frequency 
 0587  8A 0E 0000 E             	MOV	CL,BYTE PTR MSCALE	;Using scale for shift count 
 058B  BB 0003                  	MOV	BX,3		;Stecatto multiplier 
 058E  80 F9 02                 	CMP	CL,LOW 2 
 0591  74 03                    	JZ	PLYNO6		;Brif Stecatto 
 0593  BB 0007                  	MOV	BX,7		; else Normal 
 0596                           PLYNO6: 
 0596  F7 E3                    	MUL	BX		;Duration * 7/8 or 3/4 
 0598  D3 E8                    	SHR	AX,CL 
 059A  0B C0                    	OR	AX,AX 
 059C  75 01                    	JNZ	PLYNO7		;If zero 
 059E  40                       	INC	AX		; then make 1 
 059F                           PLYNO7: 
 059F  59                       	POP	CX		;Get Freq 
 05A0  E8 05B1 R                	CALL	PLYNO9		;Send note 
 05A3  58                       	POP	AX		;Original duration 
 05A4  8A 0E 0000 E             	MOV	CL,BYTE PTR MSCALE 
 05A8  D3 E8                    	SHR	AX,CL		;pause after note is 1/8 or 1/4 
 05AA  33 C9                    	XOR	CX,CX		;Freq = 0 for pause 
 05AC  0B C0                    	OR	AX,AX		;Pause = 0? 
 05AE  75 01                    	JNZ	PLYNO9		;Brif not 
 05B0                           PLYNO8: 
 05B0  C3                       	RET			; else do nothing 
 05B1                           PLYNO9: 
 05B1  8B D0                    	MOV	DX,AX		;DONOTE wants [CX]=freq, [DX]=duration. 
 05B3  EB 6A                    	JMP	SHORT DOSND	;Play freq [CX] for time [DX] 
                                 
 05B5                           PLYMER: 
 05B5  E9 0000 E                	JMP	FCERR 
                                 
                                ; PLYMET -      Process Music Meta Commands. 
                                 
 05B8                           PLYMET: 
 05B8  E8 0000 E                	CALL	FETCHZ		;Get Meta action or error 
 05BB  B1 01                    	MOV	CL,LOW 1	;Factor for Legatto (1/1): MSCALE=1 
 05BD  3C 4C                    	CMP	AL,LOW "L" 
 05BF  74 1D                    	JZ	PLYDUR		;Brif Legatto (Full note) 
 05C1  FE C1                    	INC	CL		;Factor for Stecatto (3/4): MSCALE=2 
 05C3  3C 53                    	CMP	AL,LOW "S" 
 05C5  74 17                    	JZ	PLYDUR		;Brif Stecatto (3/4) 
 05C7  FE C1                    	INC	CL		;Factor for Normal (7/8): MSCALE=3 
 05C9  3C 4E                    	CMP	AL,LOW "N" 
 05CB  74 11                    	JZ	PLYDUR		;Brif Normal (7/8) 
 05CD  32 C9                    	XOR	CL,CL		;MMODE=0 for Forground 
 05CF  3C 46                    	CMP	AL,LOW "F" 
 05D1  74 06                    	JZ	PLYMOD		;Brif Foreground Music 
 05D3  FE C1                    	INC	CL		;MMODE=1 for Background 
 05D5  3C 42                    	CMP	AL,LOW "B" 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-31
PLAY/SOUND statements                                       

 05D7  75 DC                    	JNZ	PLYMER		;Brif not Background Music 
 05D9                           PLYMOD: 
 05D9  88 0E 0000 E             	MOV	BYTE PTR MMODE,CL	;Store Music Mode (0=FG, 1=BG) 
 05DD  C3                       	RET 
 05DE                           PLYDUR: 
 05DE  88 0E 0000 E             	MOV	BYTE PTR MSCALE,CL	;Store Duration Scaling factor 
 05E2  C3                       	RET 
                                 
                                ;SNDINI is called to set OCTAVE, BEATS, NOTELN, NOTE1L, MSCALE, and MMODE 
                                ;to appropriate initial settings.  SNDINI is called at CLEARC and during 
                                ;initialization. 
                                ;Entry - none 
                                ;Exit  - all registers preserved 
                                ; 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	NOTELN:WORD,NOTE1L:WORD,BEATS:WORD,OCTAVE:WORD,MSCALE:WORD 
                                	EXTRN	MMODE:WORD 
 0000                           DSEG	ENDS 
                                PUBLIC	SNDINI 
 05E3  C6 06 0000 E 78          SNDINI:	MOV	BYTE PTR BEATS,LOW 120D 
 05E8  C6 06 0000 E 03          	MOV	BYTE PTR MSCALE,LOW 3D 
 05ED  C6 06 0000 E 00          	MOV	BYTE PTR MMODE,LOW 0D 
 05F2  C6 06 0000 E 04          	MOV	BYTE PTR NOTELN,LOW 4D 
 05F7  C6 06 0000 E 04          	MOV	BYTE PTR NOTE1L,LOW 4D 
 05FC  C6 06 0000 E 04          	MOV	BYTE PTR OCTAVE,LOW 4D 
 0601  E8 0605 R                	CALL	SNDRST		;Turn off sound 
 0604  C3                       	RET 
                                 
                                ;SNDRST is called to reset background music.  It is called during 
                                ; initialization from INIT and during the processing of CTL-C 
                                ; from POLKEY 
                                ; Entry - none 
                                ; Exit  - All registers preserved 
                                ; 
                                PUBLIC	SNDRST 
 0605  50                       SNDRST:	PUSH	AX 
 0606  53                       	PUSH	BX 
 0607  51                       	PUSH	CX 
 0608  52                       	PUSH	DX 
 0609  9C                       	PUSHF 
 060A  B0 FF                    	MOV	AL,LOW 255D 
 060C  E8 0000 E                	CALL	DONOTE		;Disable background music, init music queue 
 060F  9D                       	POPF 
 0610  5A                       	POP	DX 
 0611  59                       	POP	CX 
 0612  5B                       	POP	BX 
 0613  58                       	POP	AX 
 0614  C3                       	RET 
                                 
                                	PUBLIC	BEEPS,BEEP,SOUNDS 
                                	EXTRN	DONOTE:NEAR,FRQINT:NEAR,FRCSNG:NEAR,GETIN2:NEAR 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	FAC:WORD 
 0000                           DSEG	ENDS 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-32
PLAY/SOUND statements                                       

                                 
 0615                           BEEP: 
 0615  B9 0320                  BEEPS:	MOV	CX,800D		; 800 Hz 
 0618  BA 0064                  	MOV	DX,100D		; .. for 1/4 second. 
 061B  32 C0                    	XOR	AL,AL		;[AL]=Music Mode (0=Forground) 
 061D  EB 03                    	JMP	SHORT JDNOTE 
                                 
 061F  A0 0000 E                DOSND:	MOV	AL,BYTE PTR MMODE	;[AL]=Music Mode (0=Forground, 1=background) 
 0622  E8 0000 E                JDNOTE:	CALL	DONOTE		;start new sound. 
 0625  73 03                    	JNB	DNOTOK		;No errors detected by DONOTE 
 0627  E9 0000 E                	JMP	FCERR		;Function call error detected 
 062A                           DNOTOK: 
 062A  E9 0000 E                	JMP	POLKEY		;Allow CTL-C to interrupt and return 
                                ; SOUND  -      Make SOUNDs with the speaker. 
                                ; 
                                ;       Syntax: SOUND x,y 
                                ; 
                                ;       Where:  x is the Frequency in Hertz. 
                                ;               y is the Duration in Clock ticks. (currently 18.2/sec). 
                                ; 
                                ;               Frequency must be at least 37 Hz. 
                                ;               If Duration is 0, then just turn off current sound... 
                                ; 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	$FACLO:WORD,$FACM1:WORD 
 0000                           DSEG	ENDS 
                                	EXTRN	$FMULS:NEAR 
 062D                           SOUNDS: 
 062D  E8 0000 E                	CALL	GETIN2		;Get frequency. 
 0630  83 FA 25                 	CMP	DX,37D 
 0633  72 50                    	JB	SNDFCE		;Must be at least 37 Hz.. 
 0635  52                       	PUSH	DX		;Save frequency 
 0636  E8 0000 E                	CALL	SYNCHR 
 0639  2C                       	DB	OFFSET "," 
 063A  E8 0000 E                	CALL	FRMEVL		;Get duration. 
 063D  E8 03DD R                	CALL	EOSCHK		;Syntax Error if not end-of-statement 
 0640  53                       	PUSH	BX		;Text pointer 
 0641  E8 0000 E                	CALL	FRCSNG		;Make Single Precision 
 0644  BB 0000 E                	MOV	BX,OFFSET FAC	;Point at Exponent 
 0647  80 3F 00                 	CMP	BYTE PTR 0[BX],LOW 0	;Will turn sound off if 0. 
 064A  75 04                    	JNZ	SOUNL4		; Brif not, start new sound. 
 064C  5B                       	POP	BX		;Text pointer 
 064D  5A                       	POP	DX		;Frequency (not used) 
 064E  EB B5                    	JMP	SHORT SNDRST	;Turn off sound, initialize the queue 
                                 
 0650                           SOUNL4: 
 0650  80 3F 91                 	CMP	BYTE PTR 0[BX],LOW 221O	;Duration .gt. 65535? 
 0653  73 30                    	JNB	SNDFCE		;Brif so, too big for *32 
 0655  53                       	PUSH	BX		;Save FAC address 
 0656  FF 36 0000 E             	PUSH	WORD PTR $FACM1	;Push FAC on the stack 
 065A  FF 36 0000 E             	PUSH	WORD PTR $FACLO 
 065E  BB 0016                  	MOV	BX,22D		;Mult by ^D22 
 0661  E8 0000 E                	CALL	MAKINT 
 0664  E8 0000 E                	CALL	FRCSNG		;Get s.p. ^D22 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-33
PLAY/SOUND statements                                       

 0667  5A                       	POP	DX		;Get low mantissa bits 
 0668  5B                       	POP	BX		;Exp sign and high mantissa bits 
 0669  E8 0000 E                	CALL	$FMULS		;MULTIPLY 
 066C  5B                       	POP	BX		;FAC address 
 066D  80 3F 91                 	CMP	BYTE PTR 0[BX],LOW 221O	;Overflow? 
 0670  72 0A                    	JB	SOUNL5		;Brif not 
 0672  C7 47 FF 907F            	MOV	WORD PTR -1[BX],110177O	; else 
 0677  C7 47 FD FF00            	MOV	WORD PTR -3[BX],177400O	; force to 65535 
 067C                           SOUNL5: 
 067C  E8 0000 E                	CALL	FRQINT		;Convert back to Integer 
 067F  8B D3                    	MOV	DX,BX		; in [DX] 
 0681  5B                       	POP	BX		;Text pointer 
 0682  59                       	POP	CX		;[CX]=Frequency, [DX]=Duration 
 0683  EB 9A                    	JMP	SHORT DOSND	;play the note 
 0685                           SNDFCE: 
 0685  E9 0000 E                	JMP	FCERR		; Complain 
                                 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-34
PLAY/SOUND statements                                       

                                	PAGE 
                                	SUBTTL General Event Trapping Code 
                                 
                                	PUBLIC	ONGOTP,SETGSB 
                                	EXTRN	STPTRP:NEAR,ONTRP:NEAR,OFFTRP:NEAR,REQTRP:NEAR,FRETRP:NEAR 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	$ON:WORD,$OFF:WORD,$STOP:WORD 
 0000                           DSEG	ENDS 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	TRPTBL:WORD 
 0000                           DSEG	ENDS 
                                 
                                ;Event flags can have one or more of the following bits set: 
                                ; They are defined in BIMISC.MAC 
                                ; 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	T_ON:WORD	;1 event trapping on 
 0000                           DSEG	ENDS 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	T_STOP:WORD	;2 event trapping stopped (remembers but doesn't report) 
 0000                           DSEG	ENDS 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	T_REQ:WORD	;4 event trap requested (this event has happend) 
 0000                           DSEG	ENDS 
                                 
                                ;To support EVENT TRAPPING, The following switches should be defined 
                                ; in the machine dependant Switch File: 
                                ; 
                                ;       NMKEYT = number of soft keys 
                                ;       NMCOMT = number of COMmunications ports 
                                ;       NMPENT = number of light pens (0 or 1) 
                                ;       NMSTRT = number of joysticks 
                                ;       NUMTRP = total of all of the above 
                                ;       ONGOSB should be 1 
                                ; 
                                 
                                ;To support EVENT TRAPPING, The following variables should be defined 
                                ; in the machine dependant RAM module: 
                                ; 
                                ;       ONGSBF: BLOCK   1       ;some-event happend flag (see NEWSTT) 
                                ;       TRPTBL: BLOCK   3*NUMTRP 
                                ;                               ;event flags and GOSUB line ptrs 
                                ; 
                                 
 = 0000                         	PENOFF=0		;offset for PEN event id's 
 = 0001                         	KEYOFF=PENOFF+NMPENT	;offset for KEY event id's 
 = 000F                         	COMOFF=KEYOFF+NMKEYT	;offset for COM event id's 
 = 0011                         	STROFF=COMOFF+NMCOMT	;offset for STRIG event id's 
                                 
                                	PUBLIC	CHKINT 
                                	EXTRN	POLKEY:NEAR,POLLEV:NEAR 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	AUTFLG:WORD,SEMFLG:WORD,SAVTXT:WORD,SAVSTK:WORD,CURLIN:WORD 
 0000                           DSEG	ENDS 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-35
General Event Trapping Code                                 

                                 
                                ;CHKINT is called from BASIC's NEWSTT loop to see if any trappable 
                                ; condition has occured.  It traps active function keys, COM input, 
                                ; light pen interrupts, joystick triggers, CTL-C, CTL-S, and 
                                ; it queues vanilla keys for CHSNS.  For efficiency, it calls POLLEV 
                                ; which looks at flag which gets set by BIOS when some interrupt occurs. 
                                ; This routine would not be necessary in a stand-alone environment since 
                                ; BASIC would manage its own interrupts. 
                                ; 
 0688                           CHKINT: 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	MSDCCF:WORD	;MSDOS Ctl-C flag 
 0000                           DSEG	ENDS 
 0688  F6 06 0000 E FF          	TEST	BYTE PTR MSDCCF,LOW 255D	;Test for MSDOS-received Ctl-C 
 068D  75 05                    	JNZ	CHKIN1 
 068F  E8 0000 E                	CALL	POLLEV		;Test for occurance of trapable events 
 0692  74 12                    	JZ	CHKINX		;Exit - no trapable event 
 0694  53                       CHKIN1:	PUSH	BX 
 0695  51                       	PUSH	CX 
 0696  52                       	PUSH	DX 
 0697  E8 0000 E                	CALL	POLKEY		;trap Function keys, CTL-C, CTL-S 
                                	EXTRN	POLCOM:NEAR 
 069A  E8 0000 E                	CALL	POLCOM		;trap COM interrupts 
 069D                           NOACOM: 
 069D  E8 0A07 R                	CALL	POLPEN		;trap PEN interrupts 
 06A0  E8 0A83 R                	CALL	POLSTR		;trap STRIG interrupts 
 06A3  5A                       	POP	DX 
 06A4  59                       	POP	CX 
 06A5  5B                       	POP	BX 
 06A6  C3                       CHKINX:	RET 
                                 
                                ;SEVSTT - Set Event Status 
                                ; Common code for parsing event-id ON/OFF/STOP 
                                ; Entry - [CL]=number of legal events for device 
                                ;         [CH]=event-id offset for device 
                                ; 
 06A7  51                       SEVSTT:	PUSH	CX		;save maximum and offset for class 
 06A8  E8 0000 E                	CALL	SYNCHR 
 06AB  28                       	DB	OFFSET "(" 
 06AC  E8 0000 E                	CALL	GETBYT		;[AL]=class-relative event-id 
 06AF  50                       	PUSH	AX		;save it 
 06B0  E8 0000 E                	CALL	SYNCHR 
 06B3  29                       	DB	OFFSET ")" 
 06B4  50                       	PUSH	AX		;save [AL]=$ON, $OFF, or $STOP 
 06B5  E8 03DE R                	CALL	EOSCH1		;skip past $ON, $OFF, or $STOP 
                                				;error if not end of statement 
 06B8  5A                       	POP	DX		;restore $ON, $OFF, or $STOP 
 06B9  58                       	POP	AX		;[AL]=class-relative event-id 
 06BA  59                       	POP	CX		;restore maximum, offset for class 
 06BB  80 FD 11                 	CMP	CH,LOW OFFSET STROFF	;Special check for STRIG(x) 
 06BE  75 04                    	JNZ	SEVST1		;Brif not 
 06C0  D0 C8                    	ROR	AL,1		;Divide by 2 so get 0,1,2 or 3 
 06C2  EB 06                    	JMP	SHORT SEVST2 
 06C4                           SEVST1: 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-36
General Event Trapping Code                                 

 06C4  0A C0                    	OR	AL,AL 
 06C6  74 17                    	JZ	SEVALL		;branch if parm was 0 
 06C8  FE C8                    	DEC	AL		;make parm 0-relative 
 06CA                           SEVST2: 
 06CA  52                       	PUSH	DX		;save $ON, $OFF, or $STOP 
 06CB  3A C1                    	CMP	AL,CL		;compare with maximum 
 06CD  7D 0A                    	JGE	FCERR1		;branch if not in range 
 06CF  02 C5                    	ADD	AL,CH		;add in offset to get event id 
 06D1  E8 0715 R                	CALL	EVADR		;[DX]=adr of event flag 
 06D4  58                       	POP	AX		;[AL]=ON, OFF, or STOP 
                                				;fall into SET1EV 
                                 
                                ;SET1EV - Set One Event 
                                ; Entry - [DX]=adr of event flag 
                                ;         [AL]=$ON, $OFF, or $STOP 
                                ; 
 06D5  E8 06F1 R                SET1EV:	CALL	EVSET		;set event flags to ON, OFF, or STOP 
 06D8  C3                       	RET 
                                 
 06D9  E9 0000 E                FCERR1:	JMP	FCERR 
 06DC  E9 0000 E                SNERR1:	JMP	SNERR 
                                 
                                ;Set status for all events of a class 
                                ; Entry - [DL]=$ON, $OFF, or $STOP token 
                                ;         [CH]=class event-id offset 
                                ;         [CL]=number of events in class 
                                ; 
 06DF  52                       SEVALL:	PUSH	DX		;save $ON, $OFF, or $STOP 
 06E0  8A C5                    	MOV	AL,CH		;[AL]=class offset 
 06E2  32 ED                    	XOR	CH,CH		;[CX]=number of entries in class 
 06E4  E8 0715 R                	CALL	EVADR		;[DX] points to 1st event flag 
 06E7  58                       	POP	AX		;[AL]=ON, OFF, or STOP 
 06E8  E8 06F1 R                SEVAL1:	CALL	EVSET		;set event for key 9-[B] 
 06EB  83 C2 03                 	ADD	DX,3		;[DX] points to next entry 
 06EE  E0 F8                    	LOOPNE	SEVAL1 
 06F0  C3                       	RET 
                                 
                                ;EVSET changes the status of 1 event. 
                                ; Entry - [AL]=$ON, $OFF, or $STOP 
                                ;         [DX] points to event flag 
                                ; Exit -  All registers preserved. 
                                ; 
 06F1  52                       EVSET:	PUSH	DX		;save caller's registers 
 06F2  51                       	PUSH	CX 
 06F3  53                       	PUSH	BX 
 06F4  50                       	PUSH	AX 
 06F5  8B DA                    	MOV	BX,DX		;[BX]=adr of event flag 
 06F7  3C 00 E                  	CMP	AL,LOW OFFSET $ON 
 06F9  74 0D                    	JZ	EVON 
 06FB  3C 00 E                  	CMP	AL,LOW OFFSET $OFF 
 06FD  74 0E                    	JZ	EVOFF 
 06FF  3C 00 E                  	CMP	AL,LOW OFFSET $STOP 
 0701  75 D9                    	JNZ	SNERR1 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-37
General Event Trapping Code                                 

 0703  E8 0000 E                EVSTP:	CALL	STPTRP		;stop event pointed to by [BX] 
 0706  EB 08                    	JMP	SHORT EVONX 
 0708  E8 0000 E                EVON:	CALL	ONTRP		;enable event pointed to by [BX] 
 070B  EB 03                    	JMP	SHORT EVONX 
 070D  E8 0000 E                EVOFF:	CALL	OFFTRP		;disable event pointed to by [BX] 
 0710  58                       EVONX:	POP	AX		;restore all caller's registers 
 0711  5B                       	POP	BX 
 0712  59                       	POP	CX 
 0713  5A                       	POP	DX 
 0714  C3                       	RET 
                                 
                                ;EVADR transforms event-id to event-flag-pointer. 
                                ; Entry - [AL] = event id 
                                ; Exit  - [DX]=adr of event flag, [AX] is used, all other regs preserved 
                                ; 
 0715  32 E4                    EVADR:	XOR	AH,AH		;[AX] = event id 
 0717  8B D0                    	MOV	DX,AX 
 0719  03 C0                    	ADD	AX,AX 
 071B  03 C2                    	ADD	AX,DX		;[AX] = 3*event id 
 071D  05 0000 E                	ADD	AX,OFFSET TRPTBL 
 0720  8B D0                    	MOV	DX,AX 
 0722  C3                       	RET 
                                 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	$KEY2B:WORD,$PEN2B:WORD,$STR2B:WORD,$COM2B:WORD 
 0000                           DSEG	ENDS 
                                	EXTRN	DERDNA:NEAR 
                                 
                                ;ONGOTP routine is called from ON GOTO code within BINTRP 
                                ;       Do syntax checks for event traps and return. 
                                ;       Carry set indicates it was not a trap gosub definition. 
                                ;       else carry is clear 
                                ; 
                                ; Syntax:       ON [Event] GOSUB line no. 
                                ; 
                                ;       WHERE:  Event is one of following: 
                                ;               COM(x) 
                                ;               PEN 
                                ;               STRIG(x) x = 0 for Trigger A, or 2 for Trigger B. 
                                ;               KEY(x)   x = 1..NMKEYT-1 
                                ; 
                                ;       If one of the Event verbs does not follow the ON 
                                ;       keyword, then go back to Level 1 "ONGOTO" to 
                                ;       process ON ### GOSUB... or GOTO. 
                                ; 
 0723  53                       ONGOTP:	PUSH	BX		;Text pointer in case not us. 
 0724  32 ED                    	XOR	CH,CH		;Assume one byte token 
 0726  3C FD                    	CMP	AL,LOW 375O	;check for 2-byte token 
 0728  72 07                    	JB	NT2BTK		;branch if not FF, FE or FD 
 072A  8A E8                    	MOV	CH,AL		;[CH] = 1st byte 
 072C  E8 0000 E                	CALL	CHRGTR		;[AL] = 2nd byte of 2-byte token 
 072F  8A E5                    	MOV	AH,CH		;[AH] = 1st byte 
 0731                           NT2BTK: 
 0731  3D 0000 E                	CMP	AX,OFFSET $KEY2B 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-38
General Event Trapping Code                                 

 0734  B9 010E                  	MOV	CX,OFFSET (400O*KEYOFF)+NMKEYT 
 0737  74 27                    	JZ	ONFUN		;Brif ON KEY... 
 0739  3D 0000 E                	CMP	AX,OFFSET $COM2B 
 073C  B9 0F02                  	MOV	CX,OFFSET (400O*COMOFF)+NMCOMT 
 073F  74 1F                    	JZ	ONFUN		;Brif ON COM... 
 0741  3D 0000 E                	CMP	AX,OFFSET $PEN2B 
 0744  B9 0000                  	MOV	CX,OFFSET 400O*PENOFF 
 0747  75 05                    	JNZ	NTONPN		;BRIF not ON PEN... 
 0749  E8 0000 E                	CALL	CHRGTR		;get next token 
 074C  EB 26                    	JMP	SHORT ONSTM	;Brif ON PEN... 
 074E                           NTONPN: 
 074E  3D 0000 E                	CMP	AX,OFFSET $STR2B 
 0751  B9 1104                  	MOV	CX,OFFSET (400O*STROFF)+NMSTRT 
 0754  74 0A                    	JZ	ONFUN 
 0756  F9                       	STC			;set carry - indicates not event 
 0757  5B                       	POP	BX		;Restore Entry Text pointer 
 0758  EB 22                    	JMP	SHORT ONGOTX 
                                 
 075A  E9 0000 E                FCERR2:	JMP	FCERR 
                                 
 075D  E9 0000 E                JERDNA:	JMP	DERDNA		;Device unavailable error if PEN 
                                 
 0760                           ONFUN: 
 0760  E8 077F R                	CALL	GETSUB		;Get Event no. in (x). 
 0763  FE C8                    	DEC	AL		;Want base 0. (If not STRIG(x)) 
 0765  80 FD 11                 	CMP	CH,LOW OFFSET STROFF	;Special check for STRIG(x) 
 0768  75 04                    	JNZ	ONFUN1		;Brif not 
 076A  FE C0                    	INC	AL		;Restore STRIG # 
 076C  D0 C8                    	ROR	AL,1		;Divide by 2 so get 0,1,2 or 3 
 076E                           ONFUN1: 
 076E  3A C1                    	CMP	AL,CL		;Value [AL] .gt. MAX [CL]? 
 0770  73 E8                    	JNB	FCERR2		;If so, then Ill fun error. 
 0772  8A C8                    	MOV	CL,AL		;Save Event index in [CL] 
 0774                           ONSTM: 
 0774  02 E9                    	ADD	CH,CL		;[CH]=event-id 
 0776  B1 01                    	MOV	CL,LOW 1	;[CL]=maximum number of line#'s in gosub 
 0778  5A                       	POP	DX		;discard saved text pointer 
 0779  4B                       	DEC	BX		;backup for CHRGET 
 077A  0A C0                    	OR	AL,AL		;clear carry - indicates it was event 
 077C  8A 07                    ONGOTX:	MOV	AL,BYTE PTR 0[BX]	;Restore Token 
 077E  C3                       	RET 
                                 
 077F  51                       GETSUB:	PUSH	CX 
 0780  E8 0000 E                	CALL	CHRGTR		;skip current token 
 0783  E8 0000 E                GETSU2:	CALL	SYNCHR 
 0786  28                       	DB	OFFSET "(" 
 0787  E8 0000 E                	CALL	GETBYT		;get event-class index 
 078A  50                       	PUSH	AX		;save it 
 078B  E8 0000 E                	CALL	SYNCHR 
 078E  29                       	DB	OFFSET ")" 
 078F  58                       	POP	AX 
 0790  59                       	POP	CX 
 0791  C3                       	RET 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-39
General Event Trapping Code                                 

                                ;Set gosub entry 
                                ; Entry - [AL]=trap id, [DX]=line pointer 
                                ; Exit  - [AX], [FLAGS] used, All other registers preserved. 
                                ; 
 0792  56                       SETGSB:	PUSH	SI 
 0793  52                       	PUSH	DX		;save gosub line pointer 
 0794  E8 0715 R                	CALL	EVADR		;[DX] points to event flag 
 0797  8B F2                    	MOV	SI,DX		;[SI] points to event flags 
 0799  5A                       	POP	DX		;restore GOSUB line pointer 
 079A  46                       	INC	SI		;[SI] points to gosub line ptr entry 
 079B  89 14                    	MOV	WORD PTR 0[SI],DX	;put trap adr in table for this entry 
 079D  5E                       	POP	SI 
 079E  C3                       	RET 
                                 
                                ;EVTRP is called to signal that an event has occured. 
                                ; Entry - [AL] = event id 
                                ; Exit  - If NZ, the event is not being trapped (not ON) 
                                ;         AX is used.  All other registers are preserved. 
                                ; 
 079F  52                       EVTRP:	PUSH	DX 
 07A0  51                       	PUSH	CX 
 07A1  53                       	PUSH	BX 
 07A2  8B 1E 0000 E             	MOV	BX,WORD PTR CURLIN 
 07A6  43                       	INC	BX 
 07A7  74 10                    	JZ	NOT_ON		;branch if in direct mode (no event trapping) 
 07A9  E8 0715 R                	CALL	EVADR		;[DX] points to event flag 
 07AC  8B DA                    	MOV	BX,DX		;[BX] points to event flag 
 07AE  8A 07                    	MOV	AL,BYTE PTR 0[BX]	;[AL]=event flag 
 07B0  24 00 E                  	AND	AL,LOW OFFSET T_ON	;NZ if trapping enabled for key 
 07B2  74 05                    	JZ	NOT_ON		;branch if event is not on 
 07B4  9C                       	PUSHF 
 07B5  E8 0000 E                	CALL	REQTRP		;Trap enabled, Issue Request 
 07B8  9D                       	POPF 
 07B9  5B                       NOT_ON:	POP	BX 
 07BA  59                       	POP	CX 
 07BB  5A                       	POP	DX 
 07BC  C3                       	RET 
                                 
                                ;EVCLR is called to reset an event 
                                ; Entry - [AL] = event id 
                                ; Exit  - Flags, AX are used.  All other registers are preserved. 
                                ; 
 07BD  52                       EVCLR:	PUSH	DX 
 07BE  51                       	PUSH	CX 
 07BF  53                       	PUSH	BX 
 07C0  E8 0715 R                	CALL	EVADR		;[DX] points to event flag 
 07C3  8B DA                    	MOV	BX,DX		;[BX] points to event flag 
 07C5  E8 0000 E                	CALL	FRETRP		;Reset Trap Request 
 07C8  EB EF                    	JMP	SHORT NOT_ON 
                                 
                                ;TSTCEV is called to Test-and-Clear an event. 
                                ; Entry - [AL] = 0-relative event index 
                                ; Exit  - [BX] = -1 if event had occured 
                                ;              =  0 if event had not occured 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-40
General Event Trapping Code                                 

                                ;         bit T.REQ of TRPTBL+3*index is cleared 
                                ; 
 07CA                           TSTCEV: 
 07CA  E8 0715 R                	CALL	EVADR		;[DX] [points to event flag 
 07CD  8B DA                    	MOV	BX,DX		;[BX] points to event flag 
 07CF  8A 07                    	MOV	AL,BYTE PTR 0[BX]	;[AL] = current event state 
 07D1  50                       	PUSH	AX 
 07D2  E8 0000 E                	CALL	FRETRP		;Reset Trap Request (clear T.REQ) 
 07D5  58                       	POP	AX 
 07D6  33 DB                    	XOR	BX,BX		;prepare to return negative result 
 07D8  24 00 E                  	AND	AL,LOW OFFSET T_REQ 
 07DA  74 01                    	JE	TSTEVX 
 07DC  4B                       	DEC	BX		;[BX]=-1 (indicates event has occured) 
 07DD  C3                       TSTEVX:	RET 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-41
General Event Trapping Code                                 

                                	PAGE 
                                	SUBTTL COM Statement and Event Trapping 
                                 
                                	PUBLIC	COMS 
                                	PUBLIC	COMTRP 
                                 
                                ;COM statement 
                                ; 
 07DE  B9 0F02                  COMS:	MOV	CX,OFFSET (400O*COMOFF)+NMCOMT 
 07E1  E9 06A7 R                	JMP	SEVSTT		;branch to common code 
                                 
                                ;COMTRP is called by COM interrupt service routine to signal trapping. 
                                ; Entry - [AL]=0-relative com channel id. 
                                ; Exit  - NZ is true if key trapping is enabled. 
                                ;         All other regs preserved. 
                                ; 
 07E4  50                       COMTRP:	PUSH	AX 
 07E5  04 0F                    	ADD	AL,LOW OFFSET COMOFF	;[AL]=event id 
 07E7  E8 079F R                	CALL	EVTRP		;Signal the occurance of a COM EVENT 
 07EA  58                       	POP	AX 
 07EB  C3                       	RET 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-42
COM Statement and Event Trapping                            

                                	PAGE 
                                	SUBTTL SOFT KEY Statement and Event Trapping 
                                 
                                	PUBLIC	KEYS 
                                	EXTRN	LINPRT:NEAR,OUTDO:NEAR 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	$ON:WORD,$OFF:WORD,$LIST:WORD 
 0000                           DSEG	ENDS 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	STRTAB:WORD,KEYSW:WORD,FKCNUM:WORD 
 0000                           DSEG	ENDS 
                                	EXTRN	SCROUT:NEAR,CLREOL:NEAR 
                                	PUBLIC	KEYTRP 
                                	EXTRN	MAKINT:NEAR 
                                 
                                ;SET KEY STATUS - KEY(n) (status) 
                                ; 
 07EC  B9 010E                  KEYSTT:	MOV	CX,OFFSET (400O*KEYOFF)+NMKEYT 
 07EF  E9 06A7 R                	JMP	SEVSTT		;branch to common code 
                                 
                                 
                                 
                                ;KEYTRP is called whenever CHGET receives a SOFTKEY from the keyboard. 
                                ; Entry - [AL] = Soft key id (0..NMKEYT-1) 
                                ; Exit  - If NZ, key was trapped and should not be expanded. 
                                ;         Otherwise, CHGET should expand key. 
                                ;         All other registers are preserved. 
                                ; 
 07F2  50                       KEYTRP:	PUSH	AX 
 07F3  04 01                    	ADD	AL,LOW OFFSET KEYOFF	;[AL] = 0-relative event id 
 07F5  E8 079F R                	CALL	EVTRP		;Signal the occurance of a KEY EVENT 
 07F8  58                       	POP	AX 
 07F9  C3                       	RET 
                                 
                                	EXTRN	FKYADV:NEAR 
                                 
                                ;KEY Statement 
                                ; 
 07FA                           KEYS: 
 07FA  3C 28                    	CMP	AL,LOW "(" 
 07FC  74 EE                    	JZ	KEYSTT		;set key status 
 07FE  3C 00 E                  	CMP	AL,LOW OFFSET $ON 
 0800  74 53                    	JZ	KEYON		;Brif Enable Soft Key Display Line. 
 0802  3C 00 E                  	CMP	AL,LOW OFFSET $OFF 
 0804  74 54                    	JZ	KEYOF		;Brif Disable Soft Key Display line. 
 0806  3C 00 E                  	CMP	AL,LOW OFFSET $LIST 
 0808  74 49                    	JZ	KEYLSI		;Brif LIST Soft Keys. 
 080A  E8 0000 E                	CALL	GETBYT		; else Key defn, get key number. 
 080D  0A C0                    	OR	AL,AL 
 080F  74 3F                    	JZ	KEYFCE 
 0811  2C 01                    	SUB	AL,LOW OFFSET STKEYF	;Get zero relative key number 
 0813  3C 0A                    	CMP	AL,LOW OFFSET NMKEYF 
 0815  73 39                    	JNB	KEYFCE		;Must be STKEYF - NMKEYF+STKEYF, else error. 
 0817  BA 0010                  	MOV	DX,16D 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-43
SOFT KEY Statement and Event Trapping                       

 081A  F6 E2                    	MUL	DL		; (16 * Key number). 
 081C  8B D0                    	MOV	DX,AX 
 081E  81 C2 0000 E             	ADD	DX,OFFSET STRTAB	;Index into Soft Key table 
 0822  52                       	PUSH	DX		;Save addr 
 0823  E8 0000 E                	CALL	SYNCHR 
 0826  2C                       	DB	OFFSET "," 
 0827  E8 0000 E                	CALL	FRMEVL 
 082A  53                       	PUSH	BX		;Save Text pntr. 
 082B  E8 0000 E                	CALL	FRESTR		;Get String Descriptor 
 082E  8A 0F                    	MOV	CL,BYTE PTR 0[BX] 
 0830  80 F9 0F                 	CMP	CL,LOW 15D 
 0833  72 02                    	JB	KEY1 
 0835  B1 0F                    	MOV	CL,LOW 15D	;String may be 0 to 15 chars. 
 0837                           KEY1: 
 0837  43                       	INC	BX 
 0838  8B 37                    	MOV	SI,WORD PTR 0[BX]	;Get addr of string 
 083A  5B                       	POP	BX		;Text pntr 
 083B  5F                       	POP	DI		;STRTAB addr 
 083C  53                       	PUSH	BX 
 083D  B5 00                    	MOV	CH,LOW 0 
 083F  FC                       	CLD 
                                                     ;Move new softkey 
 0840  F3/ A4                    REP	MOVSB			;to Softkey table 
 0842  88 2D                    	MOV	BYTE PTR 0[DI],CH	;Terminate entry with 0. 
 0844  A0 0000 E                	MOV	AL,BYTE PTR KEYSW	;Are the key definitions being 
 0847  0A C0                    	OR	AL,AL		;displayed? 
 0849  74 03                    	JZ	NODSPK		;No, don't call DSPKEY since it would 
                                				;erase the bottom line of the screen. 
 084B  E8 08D2 R                	CALL	KEYDSP		;Yes, update the display. 
 084E  5B                       NODSPK:	POP	BX		;Text pntr 
 084F  C3                       	RET 
 0850                           KEYFCE: 
 0850  E9 0000 E                	JMP	FCERR		;complain.. 
 0853  EB 2B                    KEYLSI:	JMP	SHORT KEYLST 
                                 
 0855  E8 0865 R                KEYON:	CALL	SKEYON 
 0858  EB 07                    	JMP	SHORT KEYOXX	;non-zero = ON 
                                 
 085A  B4 01                    KEYOF:	MOV	AH,LOW 1D	;Prepare to inc scroll limit 
 085C  B0 00                    	MOV	AL,LOW 0	;zero = OFF 
 085E  E8 0869 R                	CALL	KEYOX 
 0861  E8 0000 E                KEYOXX:	CALL	CHRGTR		;over ON/OFF token. 
 0864  C3                       	RET 
                                 
                                PUBLIC	SKEYON 
 0865  B4 FF                    SKEYON:	MOV	AH,LOW -1D	;Prepare to dec scroll limit 
 0867  B0 FF                    	MOV	AL,LOW 377O 
 0869                           KEYOX:				;AH=scroll limit diff., AL=new KEYSW 
 0869  3A 06 0000 E             	CMP	AL,BYTE PTR KEYSW	;State change? 
 086D  A2 0000 E                	MOV	BYTE PTR KEYSW,AL 
 0870  74 0D                    	JZ	KEYXX		;Brif same, do nothing 
 0872  80 3E 0000 E FF          	CMP	BYTE PTR KEYSW,LOW 255D	;Test if change to ON 
 0877  75 03                    	JNZ	KEYOX1		;Change is to OFF - do not call FKYADV 
 0879  E8 0000 E                	CALL	FKYADV 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-44
SOFT KEY Statement and Event Trapping                       

 087C                           KEYOX1: 
 087C  E8 08D2 R                	CALL	KEYDSP		;On, Display on 25th line. 
 087F  C3                       KEYXX:	RET 
                                 
                                ;List Function Keys 
                                ; 
 0880                           KEYLST: 
 0880  53                       	PUSH	BX 
 0881  BE 0000 E                	MOV	SI,OFFSET STRTAB	;List 10 Special Function 
 0884  B9 010A                  	MOV	CX,OFFSET NMKEYF+(STKEYF*400O) 
 0887                           KEYLS0: 
 0887  56                       	PUSH	SI 
 0888  B0 46                    	MOV	AL,LOW "F" 
 088A  E8 0000 E                	CALL	OUTDO 
 088D  51                       	PUSH	CX 
 088E  8A DD                    	MOV	BL,CH 
 0890  B7 00                    	MOV	BH,LOW 0 
 0892  E8 0000 E                	CALL	LINPRT		;Display the Key number. 
 0895  B0 20                    	MOV	AL,LOW " " 
 0897  E8 0000 E                	CALL	OUTDO 
 089A  59                       	POP	CX 
 089B  5E                       	POP	SI 
 089C  56                       	PUSH	SI 
 089D  51                       	PUSH	CX 
 089E                           KEYLS1: 
 089E  FC                       	CLD 
 089F  AC                       	LODSB 
 08A0  0A C0                    	OR	AL,AL 
 08A2  74 05                    	JZ	KEYLS2		;Brif end of String. 
 08A4  E8 08C1 R                	CALL	KEYLSP 
 08A7  EB F5                    	JMP	SHORT KEYLS1 
 08A9                           KEYLS2: 
 08A9  B0 0D                    	MOV	AL,LOW 13D	;Output carriage return 
 08AB  E8 0000 E                	CALL	OUTDO 
 08AE  B0 0A                    	MOV	AL,LOW 10D	;Output a line feed 
 08B0  E8 0000 E                	CALL	OUTDO 
 08B3  59                       	POP	CX 
 08B4  5E                       	POP	SI 
 08B5  83 C6 10                 	ADD	SI,16D		;Next key address 
 08B8  FE C5                    	INC	CH		;Next key number 
 08BA  FE C9                    	DEC	CL 
 08BC  75 C9                    	JNZ	KEYLS0 
 08BE  5B                       	POP	BX 
 08BF  EB A0                    	JMP	KEYOXX 
                                 
 08C1                           KEYLSP: 
 08C1  56                       	PUSH	SI 
 08C2  3C 0D                    	CMP	AL,LOW 13D	;check for Carriage-Return 
 08C4  75 02                    	JNZ	KEYLSQ 
 08C6  B0 1B                    	MOV	AL,LOW 33O 
 08C8  E8 0000 E                KEYLSQ:	CALL	OUTDO 
 08CB  5E                       	POP	SI 
 08CC  C3                       	RET 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-45
SOFT KEY Statement and Event Trapping                       

                                	PAGE 
                                	SUBTTL  KEYON,  KEYOFF, and KEYDSP 
                                 
                                	PUBLIC	KEYDSP,TKEYOF 
                                	EXTRN	FKYFMT:NEAR 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	FKCNUM:WORD 
 0000                           DSEG	ENDS 
                                 
                                ;TKEYOF is called to turn function key display off 
                                ; 
 08CD  C6 06 0000 E 00          TKEYOF:	MOV	BYTE PTR KEYSW,LOW 0	;turn function key display switch off 
                                 
                                ; KEYDSP -      Display Softkeys on last line of Screen. 
                                 
 = 0001                         	REVNMS=1		;Key Numbers are normal video, contents are rev-video 
 08D2  52                       KEYDSP:	PUSH	DX 
 08D3  B6 01                    	MOV	DH,LOW 1D	;Set for col = 1 
 08D5  8A 16 0000 E             	MOV	DL,BYTE PTR LINCNT	;Set for last line 
 08D9  A0 0000 E                	MOV	AL,BYTE PTR KEYSW 
 08DC  0A C0                    	OR	AL,AL		;Key on or off? 
 08DE  75 05                    	JNZ	KEYDS0		;Softkey display switch on 
 08E0  E8 0000 E                	CALL	CLREOL		;Clear from (DH,DL) to EOL 
 08E3  5A                       	POP	DX 
 08E4  C3                       	RET 
                                 
                                 
 08E5                           KEYDS0: 
                                	EXTRN	SETCSR:NEAR 
 08E5  C6 06 0000 E 00          	MOV	BYTE PTR CSRTYP,LOW 0D	;Set off mode cursor 
 08EA  E8 0000 E                	CALL	SETCSR		;Turn the cursor off 
 08ED  53                       	PUSH	BX 
 08EE  E8 095D R                KEYDS1:	CALL	GETFMT		;Get function key display format 
 08F1  50                       KNXTST:	PUSH	AX		;Save Key disp no. 
 08F2  80 FC 30                 	CMP	AH,LOW "0"	;Single digit case? 
 08F5  74 07                    	JZ	SINDIG		;Print only one digit 
 08F7  86 E0                    	XCHG	AH,AL 
 08F9  E8 093D R                	CALL	KEYDCH		;Display first digit 
 08FC  86 E0                    	XCHG	AH,AL 
 08FE  E8 093D R                SINDIG:	CALL	KEYDCH		;Display last digit 
 0901  56                       	PUSH	SI 
 0902  8A 0E 0000 E             	MOV	CL,BYTE PTR FKCNUM	;Count of chars per fun. key (set by GETFMT 
 0906  E8 09BB R                	CALL	XFGBG		;Swap Forground & background colors 
 0909                           KNXTCH:				;Write the next key character 
 0909  51                       	PUSH	CX 
 090A  FC                       	CLD 
 090B  AC                       	LODSB 
 090C  0A C0                    	OR	AL,AL		;End of string? 
 090E  9C                       	PUSHF 
 090F  56                       	PUSH	SI 
 0910  75 02                    	JNZ	KEYDS4		;No, Display char 
 0912  32 C0                    	XOR	AL,AL		;else blank 
 0914                           KEYDS4: 
 0914  E8 093D R                	CALL	KEYDCH		;Display char, adv cursor 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-46
KEYON,  KEYOFF, and KEYDSP                                  

 0917  5E                       	POP	SI 
 0918  9D                       	POPF 
 0919  75 01                    	JNZ	KEYDS5		;Brif not EOS 
 091B  4E                       	DEC	SI 
 091C                           KEYDS5: 
 091C  59                       	POP	CX 
 091D  FE C9                    	DEC	CL 
 091F  75 E8                    	JNZ	KNXTCH		;Loop for next character 
 0921  E8 09BB R                	CALL	XFGBG		;Swap Forground & background colors 
 0924  E8 093B R                	CALL	KEYDB		;Follow with blank 
 0927  5E                       	POP	SI 
 0928  58                       	POP	AX 
 0929  E8 0999 R                	CALL	KEYADV		;Advance to next key 
 092C  FE CD                    	DEC	CH 
 092E  75 C1                    	JNZ	KNXTST		;Loop for next key string 
 0930  5B                       KEYDSX:	POP	BX		;Retrieve cursor position 
 0931  5A                       	POP	DX 
 0932  C6 06 0000 E 03          	MOV	BYTE PTR CSRTYP,LOW 3D	;Set user mode cursor 
 0937  E8 0000 E                	CALL	SETCSR		;Turn on cursor 
 093A  C3                       	RET 
                                 
 093B  32 C0                    KEYDB:	XOR	AL,AL		;For Blank at end of Key field 
 093D                           KEYDCH: 
 093D  50                       	PUSH	AX 
 093E  53                       	PUSH	BX 
 093F  0A C0                    	OR	AL,AL		;Separating keys? 
 0941  75 02                    	JNZ	KEYDC1		;Brif not. 
 0943  B0 20                    	MOV	AL,LOW " "	;else write space 
 0945  3C 0D                    KEYDC1:	CMP	AL,LOW OFFSET CR	;CR? 
 0947  75 02                    	JNZ	KEYNCR		;Not CR. 
 0949  B0 1B                    	MOV	AL,LOW OFFSET FKEYCR	;Subs Greater-Than-Sign 
 094B  3C 0A                    KEYNCR:	CMP	AL,LOW OFFSET LF	;Line feed? 
 094D  75 02                    	JNZ	KEYNLF		;Not line feed 
 094F  B0 3C                    	MOV	AL,LOW 74O	;Substitute Greater-Than-Sign 
 0951  51                       KEYNLF:	PUSH	CX 
 0952  B4 00                    	MOV	AH,LOW 0 
 0954  E8 0000 E                	CALL	SCROUT		;Write the character at (DH,DL) 
 0957  FE C6                    	INC	DH 
 0959  59                       	POP	CX 
 095A  5B                       	POP	BX 
 095B  58                       	POP	AX		;Restore key number 
 095C  C3                       	RET 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-47
KEYON,  KEYOFF, and KEYDSP                                  

                                	PAGE 
                                ;Get function key display format 
                                ; 
 095D  53                       GETFMT:	PUSH	BX 
 095E  E8 0000 E                	CALL	FKYFMT		;OEM routine 
 0961  8B 0F                    	MOV	CX,WORD PTR 0[BX]	;CH=key count, CL=Chrs/key 
 0963  51                       	PUSH	CX 
 0964  88 0E 0000 E             	MOV	BYTE PTR FKCNUM,CL 
 0968  BE 0000 E                	MOV	SI,OFFSET STRTAB	;SI=address of first fkey in table 
 096B  8A 47 02                 	MOV	AL,BYTE PTR 2[BX] 
 096E  98                       	CBW 
 096F  50                       	PUSH	AX		;Save number of first function key 
 0970  FE C8                    	DEC	AL		;Set to zero relative 
 0972  B1 04                    	MOV	CL,LOW 4D	;Multiply by 16 (bytes/key) 
 0974  D3 E0                    	SHL	AX,CL		;AX = index of first display key 
 0976  03 F0                    	ADD	SI,AX 
 0978  58                       	POP	AX 
 0979  E8 098B R                	CALL	INTOCH		;Get key number to character code 
 097C  80 FC 30                 	CMP	AH,LOW "0" 
 097F  74 04                    	JZ	ONEDIG		;Only one digit 
 0981  FE 0E 0000 E             	DEC	BYTE PTR FKCNUM	;Adjust function key format for two digits 
 0985  E8 09A4 R                ONEDIG:	CALL	KADNRM		;Normalize key address 
 0988  59                       	POP	CX 
 0989  5B                       	POP	BX 
 098A  C3                       	RET 
                                ;INTOCH: Translate integer AL to characters in AX. 
                                ;        Integers must be in the range (100,0]. 
                                ;        Radix is 10. 
                                ;USES -  none 
                                ; 
 098B  51                       INTOCH:	PUSH	CX 
 098C  32 E4                    	XOR	AH,AH 
 098E  B1 0A                    	MOV	CL,LOW 10D	;Load radix 
 0990  F6 F1                    	DIV	CL 
 0992  05 3030                  	ADD	AX,30060O	;3030H forms character codes 
 0995  86 E0                    	XCHG	AH,AL		;AH represents significant digit 
 0997  59                       	POP	CX 
 0998  C3                       	RET 
                                ;KEYADV - Advance to next key 
                                ;Entry - AX = key number characters 
                                ;        SI = index into STRTAB (key code table) 
                                ; 
 0999  83 C6 10                 KEYADV:	ADD	SI,16D		;Move to next key table entry 
 099C  FE C0                    	INC	AL 
 099E  3C 39                    	CMP	AL,LOW "9" 
 09A0  7E 02                    	JLE	KADNRM 
 09A2  B0 30                    	MOV	AL,LOW "0" 
 09A4                           KADNRM: 
 09A4  81 FE 00A0 E             	CMP	SI,OFFSET STRTAB+NMKEYF*16D 
 09A8  72 10                    	JB	KADNMX 
 09AA  BE 0000 E                	MOV	SI,OFFSET STRTAB	;Wrap around to the first function key 
                                				;Print function key 10 number as 0 
                                				; except when it is the first key 
 09AD  80 FC 31                 	CMP	AH,LOW "1"	;Only true if 1st function key is key 10 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-48
KEYON,  KEYOFF, and KEYDSP                                  

 09B0  75 08                    	JNZ	KADNMX		; all other wraps are for 1 digit only 
 09B2  B4 30                    	MOV	AH,LOW "0" 
 09B4  B0 31                    	MOV	AL,LOW "1" 
 09B6  FE 06 0000 E             	INC	BYTE PTR FKCNUM	;Re-adjust format 
 09BA  C3                       KADNMX:	RET 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-49
KEYON,  KEYOFF, and KEYDSP                                  

                                	PAGE 
                                	SUBTTL  Swap Forground & Background Colors 
                                 
                                ;Swap Forground & Background Colors (Toggle Reverse Video Mode) 
                                ; 
                                	EXTRN	GETFBC:NEAR,SETFBC:NEAR	;Get and set forground/background attributes 
                                 
 09BB  F8                       XFGBG:	CLC			;Signal text attributes 
 09BC  E8 0000 E                	CALL	GETFBC		;Get forground/background attributes 
 09BF  93                       	XCHG	AX,BX 
 09C0  E8 0000 E                	CALL	SETFBC		;Set forground/background attributes 
 09C3  C3                       	RET 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-50
Swap Forground & Background Colors                          

                                	PAGE 
                                	SUBTTL PEN Statement and Event Trapping 
                                 
                                	PUBLIC	PENS,PENF 
                                	EXTRN	MAKINT:NEAR 
                                 
                                ; Dispatch PEN statement depending upon following clauses: 
                                ; 
                                ; PEN   ON      Enable  PEN Trapping. 
                                ; PEN   OFF     Disable PEN Trapping. 
                                ; PEN   STOP    Suspend PEN Trapping. 
                                ; 
                                ;               Attempts to read Light pen when off 
                                ;               result in "Illegal Function Call" Error. 
                                ; 
 09C4                           PENS: 
 09C4  74 1E                    	JZ	SNERR2		;Syntax error if end-of-statement 
 09C6  50                       	PUSH	AX		;save $ON/$OFF/$STOP 
 09C7  E8 03DE R                	CALL	EOSCH1		;Syntax Error if not End-Of-Statement 
 09CA  BA 0000 E                	MOV	DX,OFFSET TRPTBL+(3*PENOFF)	;[DX]=adr of event flag 
 09CD  58                       	POP	AX		;[AL]=$ON, $OFF, or $STOP 
 09CE  3C 00 E                  	CMP	AL,LOW OFFSET $STOP 
 09D0  74 0F                    	JE	NTONOF		;branch if not ON/OFF 
 09D2  50                       	PUSH	AX 
 09D3  2C 00 E                  	SUB	AL,LOW OFFSET $ON 
 09D5  74 02                    	JE	PENS1		;branch if "PEN ON" 
 09D7  B0 01                    	MOV	AL,LOW 1	;better be OFF 
 09D9  2C 02                    PENS1:	SUB	AL,LOW 2	;Map (ON, OFF) to (254, 255) 
 09DB  53                       	PUSH	BX		;preserve text pointer (destroyed by RDPEN) 
 09DC  E8 0000 E                	CALL	RDPEN		;enable/disable light pen interrupts 
 09DF  5B                       	POP	BX 
 09E0  58                       	POP	AX		;restore [AL] = $ON/$OFF 
 09E1                           NTONOF: 
 09E1  E9 06D5 R                	JMP	SET1EV		;Set Event Flag 
                                 
 09E4  E9 0000 E                SNERR2:	JMP	SNERR 
 09E7  E9 0000 E                FCERR3:	JMP	FCERR 
                                 
                                ;PEN Function: 
                                ; Syntax: x=PEN(n) 
                                ;         n=0: Return -1 if pen was down since last poll, else 0. 
                                ;         n=1: Return X Graphics Coordinate where pen was last activated. 
                                ;         n=2: Return Y Graphics Coordinate where pen was last activated. 
                                ;         n=3: Return -1 if pen is currently down, 0 if currently up. 
                                ;         n=4: Return last known valid X Graphics Coordinate. 
                                ;         n=5: Return last known valid Y Graphics Coordinate. 
                                ;         n=6: Return character row where pen was last activated. 
                                ;         n=7: Return character column where pen was last activated. 
                                ;         n=8: Return last known character row. 
                                ;         n=9: Return last known character column. 
                                ; 
                                	EXTRN	RDPEN:NEAR 
 09EA                           PENF: 
 09EA  E8 0A16 R                	CALL	ONESUB		;[AL] = pen function 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-51
PEN Statement and Event Trapping                            

 09ED  53                       	PUSH	BX		;save text pointer 
 09EE  3C 0A                    	CMP	AL,LOW 10 
 09F0  72 02                    	JB	PENOK 
 09F2  EB F3                    	JMP	FCERR3		;Error if Parm exceeds 9 
 09F4                           PENOK: 
 09F4  0A C0                    	OR	AL,AL 
 09F6  75 07                    	JNE	NPEN0		;branch if not PEN(0) 
                                 
                                ;Whenever a PEN interrupt occurs, it is detected by POLPEN (called by CHKINT). 
                                ; PEN(0) tells whether a PEN event has occured since the last PEN(0). 
                                ; It determines this by testing-and-clearing the bit set by POLPEN. 
                                ; NOTE: PEN(0) always returns false when event trapping has been enabled 
                                ;       (by PEN ON statement) 
                                ; 
 09F8  B0 00                    	MOV	AL,LOW OFFSET PENOFF 
 09FA  E8 07CA R                	CALL	TSTCEV		;test and clear event [AL] 
 09FD  EB 03                    	JMP	SHORT PENRET	;return -1 in BX if event has occured 
 09FF                           NPEN0: 
 09FF  E8 0000 E                	CALL	RDPEN 
 0A02  E8 0000 E                PENRET:	CALL	MAKINT		;Return [BX] as signed integer 
 0A05  5B                       	POP	BX		;restore text pointer 
 0A06  C3                       	RET 
                                 
                                ;POLPEN is called by CHKINT at beginning of every BASIC statement (NEWSTT). 
                                ; If a PEN interrupt has occured, it sets the appropriate bit in TRPTBL 
                                ; which will cause the BASIC program's pen service routine (ON PEN GOSUB) 
                                ; to be invoked. 
                                ; Exit - AX, BX, CX, DX can be used (restored by CHKINT). 
                                ;        All other registers are preserved. 
                                ; 
 0A07                           POLPEN: 
 0A07  32 C0                    	XOR	AL,AL		;See if lightpen has interrupted 
 0A09  E8 0000 E                	CALL	RDPEN 
 0A0C  0B DB                    	OR	BX,BX 
 0A0E  74 05                    	JE	NOPENI		;branch if no lightpen interrupt 
 0A10  B0 00                    	MOV	AL,LOW OFFSET PENOFF 
 0A12  E8 079F R                	CALL	EVTRP		;Signal the occurance of a PEN EVENT 
 0A15  C3                       NOPENI:	RET 
                                ;Parse "(n)" and return n in [AL] 
 0A16                           ONESUB: 
                                ;In non-IBMTOK versions, EVAL doesn't parse the argument 
                                	EXTRN	INTFR2:NEAR 
 0A16  52                       	PUSH	DX 
 0A17  E8 0000 E                	CALL	INTFR2		;[DX] = function to be performed (argument) 
 0A1A  75 2D                    	JNE	FCERRI		;branch if [DX] is not [0..255] 
 0A1C  8A C2                    	MOV	AL,DL		;return argument in [AL] 
 0A1E  5A                       	POP	DX		;restore caller's [DX] 
 0A1F  C3                       	RET 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-52
PEN Statement and Event Trapping                            

                                	PAGE 
                                	SUBTTL STRIG Statement and Event Trapping 
                                 
                                	PUBLIC	STRIGS,STRIGF,STICKF 
                                	EXTRN	RDSTIK:NEAR,RDTRIG:NEAR 
                                 
                                ;STRIG statement 
                                ; 
                                ; Syntax: 
                                ; 
                                ;   In IBM BASIC, STRIG ON enables trigger trapping while STRIG OFF 
                                ;     disables trigger event trapping. 
                                ;   It is parsed in GW-BASIC for syntax compatibility only. 
                                ; 
                                ;   STRIG(n)      ON      Enable  STRIG(n) Trapping. 
                                ;   STRIG(n)      OFF     Disable STRIG(n) Trapping. 
                                ;   STRIG(n)      STOP    Suspend STRIG(n) Trapping. 
                                ; 
                                ;       WHERE: 
                                ;               (n) is Trigger 0 for joystick trigger #1, 
                                ;                              2 for joystick trigger #2, 
                                ;                              4 for joystick trigger #3, etc. 
                                ; 
 0A20                           STRIGS: 
 0A20  3C 28                    	CMP	AL,LOW "(" 
 0A22  75 06                    	JNE	STRIG1		;branch if STRIG ON or STRIG OFF 
 0A24  B9 1104                  	MOV	CX,OFFSET (400O*STROFF)+NMSTRT 
 0A27  E9 06A7 R                	JMP	SEVSTT		;branch to common code 
 0A2A                           STRIG1: 
 0A2A  3C 00 E                  	CMP	AL,LOW OFFSET $ON 
 0A2C  74 07                    	JE	STROK 
 0A2E  3C 00 E                  	CMP	AL,LOW OFFSET $OFF 
 0A30  74 03                    	JE	STROK 
 0A32  E9 0000 E                	JMP	SNERR		;SYNTAX ERROR if not $ON or $OFF or (n) 
 0A35  E9 03DE R                STROK:	JMP	EOSCH1		;SYNTAX ERROR if not end-of-statement 
                                 
                                ;STRIG Function: 
                                ; 
                                ; Syntax: 
                                ; 
                                ;  x=STRIG(n) 
                                ;    n=0: return -1 if button 1 was pressed since last STRIG(0), else 0. 
                                ;    n=1: return -1 if button 1 is currently pressed, else 0. 
                                ;    n=2: return -1 if button 2 was pressed since last STRIG(0), else 0. 
                                ;    n=3: return -1 if button 2 is currently pressed, else 0. 
                                ;         etc. 
                                ; 
 0A38                           STRIGF: 
 0A38  E8 0A16 R                	CALL	ONESUB		;Parse "(n)", [AL] = n 
 0A3B  53                       	PUSH	BX		;save text pointer 
 0A3C  8A E0                    	MOV	AH,AL		;Map AL to AH: (0,1,2,...) to (1,0,1,...) 
 0A3E  FE C4                    	INC	AH 
 0A40  80 E4 01                 	AND	AH,LOW 1	;[AH] = 1 for latched, 0 for current 
 0A43  D0 E8                    	SHR	AL,1		;[AL] = 0 relative joystick trigger id 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-53
STRIG Statement and Event Trapping                          

 0A45  3C 04                    	CMP	AL,LOW OFFSET NMSTRT 
 0A47  72 03                    	JB	STRGOK 
 0A49  E9 0000 E                FCERRI:	JMP	FCERR		;branch if illegal trigger id 
 0A4C                           STRGOK: 
 0A4C  0A E4                    	OR	AH,AH 
 0A4E  74 15                    	JE	NSTR0		;brif current (not latched) was requested 
 0A50  50                       	PUSH	AX 
 0A51  04 11                    	ADD	AL,LOW OFFSET STROFF	;see if STRIG(n) ON has been executed 
 0A53  E8 0715 R                	CALL	EVADR		;if not, POLSTR will not call RDTRIG for 
 0A56  8B DA                    	MOV	BX,DX		; this trigger, so we must call it directly 
 0A58  F6 07 00 E               	TEST	BYTE PTR 0[BX],LOW OFFSET T_ON 
 0A5B  58                       	POP	AX 
 0A5C  74 07                    	JE	NSTR0		;branch if event is not enabled 
                                 
                                ;Whenever a STRIG interrupt occurs, it is detected by POLSTR (called by CHKINT). 
                                ; STRIG(0) tells whether a STRIG event has occured since the last STRIG(0). 
                                ; It determines this by testing-and-clearing the bit set by POLSTR. 
                                ; NOTE: STRIG(0) always returns false when event trapping has been enabled 
                                ;       (by STRIG(n) ON statement) 
                                ; 
 0A5E  04 11                    	ADD	AL,LOW OFFSET STROFF	;[AL]=0 relative event index 
 0A60  E8 07CA R                	CALL	TSTCEV		;test and clear event [AL] 
 0A63  EB 08                    	JMP	SHORT STRRET	;return -1 in BX if event has occured 
 0A65  E8 0000 E                NSTR0:	CALL	RDTRIG		;[AL] = 0/1 for not-pressed/pressed 
 0A68  98                       	CBW			;[AX] = 0/1 for not-pressed/pressed 
 0A69  F7 D8                    	NEG	AX		;[AX] = 0/-1 for not-pressed/pressed 
 0A6B  8B D8                    	MOV	BX,AX 
 0A6D  E8 0000 E                STRRET:	CALL	MAKINT		;return [BX] as signed integer 
 0A70  5B                       	POP	BX		;restore text pointer 
 0A71  C3                       	RET 
                                 
                                ;STICK Function: 
                                ; 
                                ; Syntax: 
                                ; 
                                ;  x=STICK(n) 
                                ;    n=0:    return x coordinate for joystick 1. 
                                ;    n=1:    return y coordinate for joystick 1. 
                                ;    n=2:    return x coordinate for joystick 2. 
                                ;    n=3:    return y coordinate for joystick 2. 
                                ;            etc. 
                                ; 
 0A72                           STICKF: 
 0A72  E8 0A16 R                	CALL	ONESUB		;AL=stick id 
 0A75  53                       	PUSH	BX		;save text pointer 
 0A76  E8 0000 E                	CALL	RDSTIK		;[BX] = stick coordinate 
 0A79  73 03                    	JAE	STKOK 
 0A7B  E9 0000 E                	JMP	FCERR		;branch if bad parameter 
 0A7E                           STKOK: 
 0A7E  E8 0000 E                	CALL	MAKINT		;return [BX] as signed integer 
 0A81  5B                       	POP	BX		;restore text pointer 
 0A82  C3                       	RET 
                                 
                                ;POLSTR is called by CHKINT at beginning of every BASIC statement (NEWSTT). 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-54
STRIG Statement and Event Trapping                          

                                ; If a STRIG interrupt has occured, it sets the appropriate bit in TRPTBL 
                                ; which will cause the BASIC program's pen service routine (ON STRIG(N) GOSUB) 
                                ; to be invoked. 
                                ; Exit - AX, BX, CX, DX can be used (restored by CHKINT). 
                                ;        All other registers are preserved. 
                                ; 
 0A83                           POLSTR: 
 0A83  33 C0                    	XOR	AX,AX		;[AL] = joystick trigger #0 (for RDTRIG) 
 0A85  FE C4                    	INC	AH		;[AH] = latched (not current) flag 
 0A87                           STRILP: 
 0A87  50                       	PUSH	AX		;save current trigger id 
 0A88  04 11                    	ADD	AL,LOW OFFSET STROFF 
 0A8A  E8 0715 R                	CALL	EVADR		;[DX] points to event mask 
 0A8D  8B DA                    	MOV	BX,DX		;[BX] points to event mask 
 0A8F  F6 07 00 E               	TEST	BYTE PTR 0[BX],LOW OFFSET T_ON	;see if STRIG(n) ON has been done 
 0A92  58                       	POP	AX 
 0A93  50                       	PUSH	AX 
 0A94  74 0E                    	JE	STRI1		;don't call RDTRIG if event not enabled 
 0A96  E8 0000 E                	CALL	RDTRIG		;[AL]=0/1 if trig is not-pressed/pressed 
 0A99  0A C0                    	OR	AL,AL 
 0A9B  74 07                    	JE	STRI1		;brif this trigger has not interrupted 
 0A9D  58                       	POP	AX		;restore [AL] = joystick trigger id 
 0A9E  50                       	PUSH	AX 
 0A9F  04 11                    	ADD	AL,LOW OFFSET STROFF	;[AL] = global event id 
 0AA1  E8 079F R                	CALL	EVTRP		;Signal the occurance of a TRIGGER EVENT 
 0AA4  58                       STRI1:	POP	AX 
 0AA5  FE C0                    	INC	AL 
 0AA7  3C 04                    	CMP	AL,LOW OFFSET NMSTRT 
 0AA9  72 DC                    	JB	STRILP		;brif there are more triggers to poll 
 0AAB  C3                       	RET 
                                 
                                	SUBTTL DATE - Get/Set Date. 
                                 
                                	PUBLIC	DATES,DATEF 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	DAYSPM:WORD 
 0000                           DSEG	ENDS 
                                 
                                ;DATE$="[M]M/[D]D/[YY]YY" or "[M]M-[D]D-[YY]YY"USA Date format 
                                ; 
 0AAC  E8 0B01 R                DATES:	CALL	PRSDAT		;CX=year, DH=month, DL=day 
 0AAF  E9 0B94 R                	JMP	SETDAT		;set system date 
                                 
                                ;X$=DATE$ returns "YYYY-MM-DD" if KANABS&KANADT else "MM-DD-YYYY" 
                                ; 
 0AB2                           DATEF: 
 0AB2  E8 0000 E                	CALL	CHRGTR		;skip DATE$ 
 0AB5  53                       	PUSH	BX		;Save Text pointer 
 0AB6  B0 0A                    	MOV	AL,LOW 10D 
 0AB8  E8 0000 E                	CALL	STRINI		;Get space for 10 char string 
 0ABB  52                       	PUSH	DX		;save adr of string 
 0ABC  E8 0B9F R                	CALL	GETDAT		;CX=year, DH=month, DL=day 
 0ABF  5B                       	POP	BX		;[BX]=adr of string 
 0AC0  81 E9 076C               	SUB	CX,1900D	;Reduce year by two digits 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-55
DATE - Get/Set Date.                                        

 0AC4  80 F9 64                 	CMP	CL,LOW 100D	;See if in 20th century 
 0AC7  B5 13                    	MOV	CH,LOW 19D	;Setup 20th century in case 
 0AC9  72 05                    	JB	DATEF2		;Brif so. 
 0ACB  80 E9 64                 	SUB	CL,LOW 100D	;subtract into next century 
 0ACE  FE C5                    	INC	CH		;21st century 
 0AD0                           DATEF2: 
 0AD0  8A C6                    	MOV	AL,DH 
 0AD2  E8 0AF1 R                	CALL	PUTCHR		;Store ascii month 
 0AD5  B0 2D                    	MOV	AL,LOW "-" 
 0AD7  E8 0AFD R                	CALL	PUTCH2		;put separater 
 0ADA  8A C2                    	MOV	AL,DL 
 0ADC  E8 0AF1 R                	CALL	PUTCHR		;Store ascii day 
 0ADF  B0 2D                    	MOV	AL,LOW "-" 
 0AE1  E8 0AFD R                	CALL	PUTCH2		;put separater 
 0AE4  8A C5                    	MOV	AL,CH 
 0AE6  E8 0AF1 R                	CALL	PUTCHR		;Store ascii century 
 0AE9  8A C1                    	MOV	AL,CL 
 0AEB  E8 0AF1 R                	CALL	PUTCHR		;Store ascii year. 
 0AEE  E9 0000 E                	JMP	PUTNEW		;Put result and ret (Txt ptr on stack). 
                                 
 0AF1                           PUTCHR: 
 0AF1  D4 0A                    	AAM			;Convert to unpacked BCD 
 0AF3  86 C4                    	XCHG	AL,AH 
 0AF5  0D 3030                  	OR	AX,30060O	;Add "0" bias to both digits. 
 0AF8  E8 0AFD R                	CALL	PUTCH2 
 0AFB  8A C4                    	MOV	AL,AH 
 0AFD                           PUTCH2: 
 0AFD  88 07                    	MOV	BYTE PTR 0[BX],AL	;store char in string 
 0AFF  43                       	INC	BX 
 0B00  C3                       	RET 
                                 
                                 
                                ;PRSDAT parses a string containing 
                                ;   "[YY]YY/MM/DD" if KANABS&KANADT else "MM/DD/[YY]YY" 
                                ; Exit - CX=year, DH=month, DL=day, 
                                ;         [BX]=new text pointer.  All other regs preserved. 
                                ; 
 0B01                           PRSDAT: 
 0B01  E8 0000 E                	CALL	SYNCHR 
 0B04  00 E                     	DB	OFFSET EQULTK	;Must be DATE$ = string 
 0B05  E8 0000 E                	CALL	FRMEVL 
 0B08  53                       	PUSH	BX		;Save Text pointer 
 0B09  E8 0000 E                	CALL	FRESTR 
 0B0C  8A 0F                    	MOV	CL,BYTE PTR 0[BX]	;Save string len in [CL] 
 0B0E  80 F9 01                 	CMP	CL,LOW 1	;String must not be null 
 0B11  72 7E                    	JB	DATERR		;Brif null str 
 0B13  8B 77 01                 	MOV	SI,WORD PTR 1[BX]	;[SI] has addr of string. 
 0B16  8A D9                    	MOV	BL,CL		;Working reg for string len. 
 0B18  E8 0B59 R                	CALL	GNUM8		;[AX]=month 
 0B1B  8A F0                    	MOV	DH,AL		;[DH] = month 
 0B1D  E8 0B49 R                	CALL	DATSEP		;skip / or - 
 0B20  E8 0B59 R                	CALL	GNUM8		;[AL]=day of month 
 0B23  8A D0                    	MOV	DL,AL		;[DL] = day 
 0B25  E8 0B49 R                	CALL	DATSEP		;skip / or - 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-56
DATE - Get/Set Date.                                        

 0B28  E8 0B61 R                	CALL	GNUM16		;[AX]=year (16 BITS) 
 0B2B  3D 07BA                  	CMP	AX,1978D 
 0B2E  73 10                    	JNB	DATE2		;branch if .GE. 1978 
 0B30  3D 0064                  	CMP	AX,100D 
 0B33  73 5C                    	JNB	DATERR		;error if between 100 and 1977 
 0B35  3D 004E                  	CMP	AX,78D 
 0B38  73 03                    	JNB	DATE1		;add 1900 if .GE. 78 
 0B3A  05 0064                  	ADD	AX,100D		;add 2000 if .LE. 77 
 0B3D  05 076C                  DATE1:	ADD	AX,1900D 
 0B40                           DATE2: 
 0B40  3D 0834                  	CMP	AX,2100D 
 0B43  73 4C                    	JNB	DATERR		;branch if year too large 
 0B45  8B C8                    	MOV	CX,AX		;CX=year 
 0B47  5B                       	POP	BX		;Text pointer 
 0B48  C3                       	RET			;Exit. 
                                 
                                ;DATSEP checks for a date separator (- or /) and returns if found. 
                                ; 
 0B49                           DATSEP: 
 0B49  0A DB                    	OR	BL,BL 
 0B4B  74 44                    	JZ	DATERR		;Error if string empty. 
 0B4D  8A 04                    	MOV	AL,BYTE PTR 0[SI] 
 0B4F  3C 2F                    	CMP	AL,LOW "/" 
 0B51  74 3A                    	JZ	DIGITX 
 0B53  3C 2D                    	CMP	AL,LOW "-" 
 0B55  74 36                    	JZ	DIGITX		;branch if found 
 0B57  EB 38                    	JMP	SHORT DATERR 
                                 
 0B59  E8 0B61 R                GNUM8:	CALL	GNUM16		;[AX]=16-bit number 
 0B5C  0A E4                    	OR	AH,AH 
 0B5E  75 31                    	JNZ	DATERR		;error if larger than 255 
 0B60  C3                       	RET 
                                 
 0B61  51                       GNUM16:	PUSH	CX		;save caller's [CX], [DX] 
 0B62  52                       	PUSH	DX 
 0B63  B8 0000                  	MOV	AX,0		;initialize accumulator 
 0B66  E8 0B79 R                GNUML:	CALL	DIGIT		;[CX]=0..9 
 0B69  72 0B                    	JB	GNUMX		;branch if not legal digit 
 0B6B  BA 000A                  	MOV	DX,10D 
 0B6E  F7 E2                    	MUL	DX		;[AX]=[AX]*10 
 0B70  70 1F                    	JO	DATERR		;branch if overflow 
 0B72  03 C1                    	ADD	AX,CX		;add in new digit 
 0B74  EB F0                    	JMP	SHORT GNUML 
 0B76  5A                       GNUMX:	POP	DX 
 0B77  59                       	POP	CX 
 0B78  C3                       RET2:	RET 
                                 
 0B79  80 FB 01                 DIGIT:	CMP	BL,LOW 1	;End-of-string? 
 0B7C  72 FA                    	JB	RET2		;Brif END-OF-STRING 
 0B7E  8A 0C                    	MOV	CL,BYTE PTR 0[SI] 
 0B80  80 E9 30                 	SUB	CL,LOW "0" 
 0B83  72 F3                    	JB	RET2		;branch if illegal digit 
 0B85  80 F9 0A                 	CMP	CL,LOW 10D 
 0B88  F5                       	CMC 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-57
DATE - Get/Set Date.                                        

 0B89  72 ED                    	JB	RET2		;branch if illegal digit 
 0B8B  B5 00                    	MOV	CH,LOW 0	;[CX]=digit 
 0B8D  FE CB                    DIGITX:	DEC	BL		;Length -1 
 0B8F  46                       	INC	SI		;[SI] points to next byte in string 
 0B90  C3                       	RET 
                                 
 0B91  E9 0000 E                DATERR:	JMP	FCERR 
                                 
                                ENDIF 
                                 
                                ENDIF 
 0B94  53                       SETDAT:	PUSH	BX 
                                	DOSIO	SDAT		;Give Date to MS-DOS. 
 0B99  0A C0                    	OR	AL,AL		;Date OK? 
 0B9B  75 F4                    	JNZ	DATERR		;Brif not. 
 0B9D  5B                       	POP	BX 
 0B9E  C3                       	RET 
                                 
                                ;GETDAT returns with [CX]=year, DH=month, DL=day-of-month. 
                                ; Exit - BX, AX are used. 
                                ; 
 0B9F                           GETDAT:	DOSIO	GDAT		;Get Date from MS-DOS 
 0BA3  C3                       	RET 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-58
DATE - Get/Set Date.                                        

                                	PAGE 
                                	SUBTTL TIME - Get/Set Time. 
                                 
                                	PUBLIC	TIMES,TIMEF 
                                	EXTRN	STRINI:NEAR,PUTNEW:NEAR,FCERR:NEAR 
                                	EXTRN	CHRGTR:NEAR,SYNCHR:NEAR,GETYPR:NEAR,FRMEVL:NEAR,FRESTR:NEAR 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	DATIME:WORD,EQULTK:WORD 
 0000                           DSEG	ENDS 
                                 
                                ; TIME$=[H]H[:[M]M[:[S]S[:[T]T]]] 
                                ; 
 0BA4  E8 0BD4 R                TIMES:	CALL	PRSTIM		;CH=hour, CL=min, DH=sec, DL=.01sec 
 0BA7  E9 0C2E R                	JMP	SETTIM		;set system time 
                                 
                                ;X$=TIME$ returns "HH:MM:SS" 
                                ; 
 0BAA                           TIMEF: 
 0BAA  E8 0000 E                	CALL	CHRGTR		;skip TIME$ (it was CPI'ed in FRMEVL) 
 0BAD  53                       	PUSH	BX		;Save Text pointer 
 0BAE  B0 08                    	MOV	AL,LOW 8D 
 0BB0  E8 0000 E                	CALL	STRINI		;Get space for 8 char string 
 0BB3  52                       	PUSH	DX		;Save addr of string 
 0BB4  E8 0C39 R                	CALL	GETTIM		;CH=hour, CL=min, DH=sec 
 0BB7  5B                       	POP	BX		;Restore addr of String 
 0BB8  8A C5                    	MOV	AL,CH 
 0BBA  E8 0AF1 R                	CALL	PUTCHR		;Store ascii hours 
 0BBD  B0 3A                    	MOV	AL,LOW ":" 
 0BBF  E8 0AFD R                	CALL	PUTCH2 
 0BC2  8A C1                    	MOV	AL,CL 
 0BC4  E8 0AF1 R                	CALL	PUTCHR		;Store ascii minutes 
 0BC7  B0 3A                    	MOV	AL,LOW ":" 
 0BC9  E8 0AFD R                	CALL	PUTCH2 
 0BCC  8A C6                    	MOV	AL,DH 
 0BCE  E8 0AF1 R                	CALL	PUTCHR		;Store ascii seconds. 
 0BD1  E9 0000 E                	JMP	PUTNEW		;Put result and ret (Txt ptr on stack). 
                                 
                                	EXTRN	FMULT:NEAR,CONIA:NEAR,FRCSNG:NEAR,FADD:NEAR,PUSHF:NEAR 
                                 
                                 
                                ;PRSTIM parses a string containing "HH[:MM[:SS[.TT]]] 
                                ; Exit - CH=hours, CL=minutes, DH=seconds, DL=.01 secs, 
                                ;         [BX]=new text pointer.  All other regs preserved. 
                                ; 
 0BD4                           PRSTIM: 
 0BD4  E8 0000 E                	CALL	SYNCHR 
 0BD7  00 E                     	DB	OFFSET EQULTK	;Must be TIME$ = string 
 0BD8  E8 0000 E                	CALL	FRMEVL 
 0BDB  53                       	PUSH	BX		;Save Text pointer 
 0BDC  E8 0000 E                	CALL	FRESTR 
 0BDF  8A 0F                    	MOV	CL,BYTE PTR 0[BX]	;Save string len in [CL] 
 0BE1  80 F9 01                 	CMP	CL,LOW 1	;String must not be null 
 0BE4  72 45                    	JB	TIMERR		;Brif null str 
 0BE6  8B 77 01                 	MOV	SI,WORD PTR 1[BX]	;[SI] has addr of string. 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-59
TIME - Get/Set Time.                                        

 0BE9  8A D9                    	MOV	BL,CL		;Working reg for string len. 
 0BEB  E8 0B59 R                	CALL	GNUM8		;[AX]=hours 
 0BEE  3C 18                    	CMP	AL,LOW 24D 
 0BF0  73 39                    	JNB	TIMERR 
 0BF2  8A E8                    	MOV	CH,AL		;[CH] = hours 
 0BF4  E8 0C1A R                	CALL	TIMSEP 
 0BF7  E8 0B59 R                	CALL	GNUM8 
 0BFA  3C 3C                    	CMP	AL,LOW 60D 
 0BFC  73 2D                    	JNB	TIMERR 
 0BFE  8A C8                    	MOV	CL,AL		;[CL] = minutes 
 0C00  E8 0C1A R                	CALL	TIMSEP 
 0C03  E8 0B59 R                	CALL	GNUM8 
 0C06  3C 3C                    	CMP	AL,LOW 60D 
 0C08  73 21                    	JNB	TIMERR 
 0C0A  8A F0                    	MOV	DH,AL		;[DH] = seconds. 
 0C0C  E8 0C1A R                	CALL	TIMSEP 
 0C0F  E8 0B59 R                	CALL	GNUM8 
 0C12  3C 64                    	CMP	AL,LOW 100D 
 0C14  73 15                    	JNB	TIMERR 
 0C16  8A D4                    	MOV	DL,AH		;[DL] = 100ths. 
 0C18  5B                       	POP	BX		;Text pointer 
 0C19  C3                       	RET			;Exit. 
                                 
 0C1A                           TIMSEP: 
 0C1A  0A DB                    	OR	BL,BL 
 0C1C  74 0C                    	JZ	TIMSXX 
 0C1E  FE CB                    	DEC	BL 
 0C20  FC                       	CLD			;Set to increment 
 0C21  AC                       	LODSB 
 0C22  3C 3A                    	CMP	AL,LOW ":" 
 0C24  74 04                    	JZ	TIMSXX 
 0C26  3C 2E                    	CMP	AL,LOW "." 
 0C28  75 01                    	JNZ	TIMERR 
 0C2A                           TIMSXX: 
 0C2A  C3                       	RET 
                                 
 0C2B  E9 0000 E                TIMERR:	JMP	FCERR 
                                 
                                 
                                ENDIF 
 0C2E  53                       SETTIM:	PUSH	BX 
                                	DOSIO	STIM		;Give Time to MS-DOS. 
 0C33  0A C0                    	OR	AL,AL		;Date OK? 
 0C35  75 F4                    	JNZ	TIMERR		;Brif not. 
 0C37  5B                       	POP	BX 
 0C38  C3                       	RET 
                                 
 0C39                           GETTIM:	DOSIO	GTIM		;Get Time from MS-DOS 
 0C3D  C3                       	RET 
                                 
                                	SUBTTL  Error Handlers for Features not supported in a version 
                                 
                                	EXTRN	DERDNA:NEAR 
 0C3E  E9 0000 E                	JMP	DERDNA		;Device unavailable error 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Page     1-60
Error Handlers for Features not supported in a version      

                                 
                                PUBLIC	PALETE 
 0C41                           PALETE: 
 0C41  E9 0000 E                	JMP	SNERR 
                                 
                                 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	ERRADV:WORD 
 0000                           DSEG	ENDS 
                                	EXTRN	ERROR:NEAR 
                                 
                                PUBLIC	TIMER 
 0C44                           TIMER: 
                                PUBLIC	ERDEV 
 0C44                           ERDEV: 
                                PUBLIC	IOCTL 
 0C44                           IOCTL: 
                                PUBLIC	CHDIR 
 0C44                           CHDIR: 
                                PUBLIC	MKDIR 
 0C44                           MKDIR: 
                                PUBLIC	RMDIR 
 0C44                           RMDIR: 
                                PUBLIC	SHELL 
 0C44                           SHELL: 
                                PUBLIC	ENVIRON 
 0C44                           ENVIRON: 
                                PUBLIC	VIEW 
 0C44                           VIEW: 
                                PUBLIC	WINDOW 
 0C44                           WINDOW: 
                                PUBLIC	PMAP 
 0C44                           PMAP: 
 0C44                           ADVERR: 
 0C44  B2 00 E                  	MOV	DL,LOW OFFSET ERRADV 
 0C46  E9 0000 E                	JMP	ERROR 
                                 
 0C49                           CSEG	ENDS 
                                	END 

Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Symbols-1
                                                             

Macros:

		N a m e			Lines

ACRLF  . . . . . . . . . . . . .  	   2
ADR  . . . . . . . . . . . . . .  	   1
CALLOS . . . . . . . . . . . . .  	   1
CHRGET . . . . . . . . . . . . .  	   1
COMPAR . . . . . . . . . . . . .  	   2
DBGBRK . . . . . . . . . . . . .  	   1
DC . . . . . . . . . . . . . . .  	   6
DJNZ . . . . . . . . . . . . . .  	   2
DOSIO  . . . . . . . . . . . . .  	   2
FSIGN  . . . . . . . . . . . . .  	   1
GETYPE . . . . . . . . . . . . .  	   1
INS86  . . . . . . . . . . . . .  	  13
INST . . . . . . . . . . . . . .  	   1
LDDR . . . . . . . . . . . . . .  	   8
LDIR . . . . . . . . . . . . . .  	   8
MOVRI  . . . . . . . . . . . . .  	   6
OUTCHR . . . . . . . . . . . . .  	   1
POPR . . . . . . . . . . . . . .  	   2
PUSHM  . . . . . . . . . . . . .  	   5
PUSHR  . . . . . . . . . . . . .  	   2
SYNCHK . . . . . . . . . . . . .  	   2

Segments and Groups:

                N a m e         	Size	Align	Combine Class

CSEG . . . . . . . . . . . . . .  	0C49	PARA	PUBLIC	'CODESG'
DSEG . . . . . . . . . . . . . .  	0000	PARA	PUBLIC	'DATASG'

Symbols:            

                N a m e         	Type	Value	Attr         

ADVERR . . . . . . . . . . . . .  	L NEAR	0C44	CSEG
ALTAIR . . . . . . . . . . . . .  	Number	0000	
ANSI . . . . . . . . . . . . . .  	Number	0001	
AUTFLG . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External

BASDEB . . . . . . . . . . . . .  	Number	0000	
BEATS  . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
BEEP . . . . . . . . . . . . . .  	L NEAR	0615	CSEG	Global
BEEPS  . . . . . . . . . . . . .  	L NEAR	0615	CSEG	Global
BEEPSW . . . . . . . . . . . . .  	Number	0001	
BINCSW . . . . . . . . . . . . .  	Number	0000	
BKSPC  . . . . . . . . . . . . .  	Number	0008	
BLODSW . . . . . . . . . . . . .  	Number	0001	
BUF  . . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
BUFLEN . . . . . . . . . . . . .  	Number	00FF	

CASSW  . . . . . . . . . . . . .  	Number	0000	
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Symbols-2
                                                             

CHDIR  . . . . . . . . . . . . .  	L NEAR	0C44	CSEG	Global
CHKIN1 . . . . . . . . . . . . .  	L NEAR	0694	CSEG
CHKINT . . . . . . . . . . . . .  	L NEAR	0688	CSEG	Global
CHKINX . . . . . . . . . . . . .  	L NEAR	06A6	CSEG
CHRGTR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
CHSEAT . . . . . . . . . . . . .  	Number	0001	
CLMWID . . . . . . . . . . . . .  	Number	000E	
CLREOL . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
CLRFMT . . . . . . . . . . . . .  	Number	FFFF	
CLRSCN . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
CLS  . . . . . . . . . . . . . .  	L NEAR	01F4	CSEG	Global
CMPUTN . . . . . . . . . . . . .  	Number	0000	
COLOR  . . . . . . . . . . . . .  	L NEAR	02C3	CSEG	Global
COLOR1 . . . . . . . . . . . . .  	L NEAR	02C6	CSEG
COMMA  . . . . . . . . . . . . .  	Number	002C	
COMMNT . . . . . . . . . . . . .  	Number	0000	
COMOFF . . . . . . . . . . . . .  	Number	000F	
COMS . . . . . . . . . . . . . .  	L NEAR	07DE	CSEG	Global
COMTRP . . . . . . . . . . . . .  	L NEAR	07E4	CSEG	Global
CONIA  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
CONSSW . . . . . . . . . . . . .  	Number	0001	
CONTO  . . . . . . . . . . . . .  	Number	000F	
CONTRO . . . . . . . . . . . . .  	Number	0001	
CPAREN . . . . . . . . . . . . .  	Number	0029	
CPM  . . . . . . . . . . . . . .  	Number	0001	
CPM110 . . . . . . . . . . . . .  	Number	0000	
CPM2 . . . . . . . . . . . . . .  	Number	0001	
CPM86  . . . . . . . . . . . . .  	Number	0000	
CPMA75 . . . . . . . . . . . . .  	Number	0000	
CPMADD . . . . . . . . . . . . .  	Number	0000	
CPMCON . . . . . . . . . . . . .  	Number	0000	
CPMLIF . . . . . . . . . . . . .  	Number	0000	
CPMMDS . . . . . . . . . . . . .  	Number	0000	
CPMPER . . . . . . . . . . . . .  	Number	0000	
CPMRSH . . . . . . . . . . . . .  	Number	0000	
CPMSBC . . . . . . . . . . . . .  	Number	0000	
CPMSER . . . . . . . . . . . . .  	Number	0000	
CR . . . . . . . . . . . . . . .  	Number	000D	
CRONLY . . . . . . . . . . . . .  	Number	0000	
CSRATR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
CSRDSP . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
CSRTYP . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
CSRX . . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
CSRY . . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
CURLIN . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External

DATE1  . . . . . . . . . . . . .  	L NEAR	0B3D	CSEG
DATE2  . . . . . . . . . . . . .  	L NEAR	0B40	CSEG
DATEF  . . . . . . . . . . . . .  	L NEAR	0AB2	CSEG	Global
DATEF2 . . . . . . . . . . . . .  	L NEAR	0AD0	CSEG
DATERR . . . . . . . . . . . . .  	L NEAR	0B91	CSEG
DATES  . . . . . . . . . . . . .  	L NEAR	0AAC	CSEG	Global
DATIME . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
DATPSC . . . . . . . . . . . . .  	Number	0080	
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Symbols-3
                                                             

DATSEP . . . . . . . . . . . . .  	L NEAR	0B49	CSEG
DAYSPM . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
DBLCHR . . . . . . . . . . . . .  	Number	0000	
DBLTRN . . . . . . . . . . . . .  	Number	0000	
DEBUG  . . . . . . . . . . . . .  	Text  		
DECFET . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
DERDNA . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
DIGIT  . . . . . . . . . . . . .  	L NEAR	0B79	CSEG
DIGITX . . . . . . . . . . . . .  	L NEAR	0B8D	CSEG
DISK . . . . . . . . . . . . . .  	Number	0001	
DMC  . . . . . . . . . . . . . .  	Number	0000	
DNOTOK . . . . . . . . . . . . .  	L NEAR	062A	CSEG
DONOTE . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
DOS  . . . . . . . . . . . . . .  	Number	0000	
DOSND  . . . . . . . . . . . . .  	L NEAR	061F	CSEG
DPUTG  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
DRVPOS . . . . . . . . . . . . .  	Number	0000	
DSCPTR . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
DSKVER . . . . . . . . . . . . .  	L NEAR	03A9	CSEG
DUPONT . . . . . . . . . . . . .  	Number	0000	
DYNCOM . . . . . . . . . . . . .  	Number	0001	

EDIT80 . . . . . . . . . . . . .  	Number	0000	
ENVIRON  . . . . . . . . . . . .  	L NEAR	0C44	CSEG	Global
EOSCH1 . . . . . . . . . . . . .  	L NEAR	03DE	CSEG
EOSCHK . . . . . . . . . . . . .  	L NEAR	03DD	CSEG	Global
EOSCKX . . . . . . . . . . . . .  	L NEAR	03E6	CSEG
EQULTK . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
ERDEV  . . . . . . . . . . . . .  	L NEAR	0C44	CSEG	Global
ERRADV . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
ERROR  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ESCCTL . . . . . . . . . . . . .  	Number	0000	
EVADR  . . . . . . . . . . . . .  	L NEAR	0715	CSEG
EVCLR  . . . . . . . . . . . . .  	L NEAR	07BD	CSEG
EVOFF  . . . . . . . . . . . . .  	L NEAR	070D	CSEG
EVON . . . . . . . . . . . . . .  	L NEAR	0708	CSEG
EVONX  . . . . . . . . . . . . .  	L NEAR	0710	CSEG
EVSET  . . . . . . . . . . . . .  	L NEAR	06F1	CSEG
EVSTP  . . . . . . . . . . . . .  	L NEAR	0703	CSEG
EVTRP  . . . . . . . . . . . . .  	L NEAR	079F	CSEG
EXIDY  . . . . . . . . . . . . .  	Number	0000	

FAC  . . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
FADD . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FAST . . . . . . . . . . . . . .  	Number	0001	
FCERGO . . . . . . . . . . . . .  	L NEAR	033E	CSEG
FCERR  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FCERR1 . . . . . . . . . . . . .  	L NEAR	06D9	CSEG
FCERR2 . . . . . . . . . . . . .  	L NEAR	075A	CSEG
FCERR3 . . . . . . . . . . . . .  	L NEAR	09E7	CSEG
FCERRI . . . . . . . . . . . . .  	L NEAR	0A49	CSEG
FETCHR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FETCHZ . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FIVDSK . . . . . . . . . . . . .  	Number	0001	
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Symbols-4
                                                             

FIVEO  . . . . . . . . . . . . .  	Number	0001	
FIVLPT . . . . . . . . . . . . .  	Number	0001	
FIVMEM . . . . . . . . . . . . .  	Number	0001	
FKCNUM . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
FKEYCR . . . . . . . . . . . . .  	Number	001B	
FKEYON . . . . . . . . . . . . .  	Number	0001	
FKFSRL . . . . . . . . . . . . .  	Number	0000	
FKYADV . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FKYFMT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FMULT  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FRCSNG . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FRESTR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FRETRP . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FRMEVL . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FRQINT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

GDAT . . . . . . . . . . . . . .  	Number	002A	
GENBIN . . . . . . . . . . . . .  	Number	0001	
GENDSK . . . . . . . . . . . . .  	Number	0000	
GENIO  . . . . . . . . . . . . .  	Number	0001	
GESBC  . . . . . . . . . . . . .  	Number	0000	
GET  . . . . . . . . . . . . . .  	L NEAR	0398	CSEG	Global
GETBYT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
GETDAT . . . . . . . . . . . . .  	L NEAR	0B9F	CSEG
GETFBC . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
GETFMT . . . . . . . . . . . . .  	L NEAR	095D	CSEG
GETIN2 . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
GETLIN . . . . . . . . . . . . .  	L NEAR	02D0	CSEG	Global
GETLN0 . . . . . . . . . . . . .  	L NEAR	02F9	CSEG
GETSU2 . . . . . . . . . . . . .  	L NEAR	0783	CSEG
GETSUB . . . . . . . . . . . . .  	L NEAR	077F	CSEG
GETTIM . . . . . . . . . . . . .  	L NEAR	0C39	CSEG
GETYPR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
GFCERR . . . . . . . . . . . . .  	L NEAR	02AE	CSEG
GIO86  . . . . . . . . . . . . .  	Number	0001	
GNUM16 . . . . . . . . . . . . .  	L NEAR	0B61	CSEG
GNUM8  . . . . . . . . . . . . .  	L NEAR	0B59	CSEG
GNUML  . . . . . . . . . . . . .  	L NEAR	0B66	CSEG
GNUMX  . . . . . . . . . . . . .  	L NEAR	0B76	CSEG
GOFCER . . . . . . . . . . . . .  	L NEAR	0275	CSEG
GPUTG  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
GRPVER . . . . . . . . . . . . .  	L NEAR	03A4	CSEG
GTIM . . . . . . . . . . . . . .  	Number	002C	
GTLINE . . . . . . . . . . . . .  	L NEAR	02E0	CSEG
GTPRMS . . . . . . . . . . . . .  	L NEAR	0366	CSEG
GW . . . . . . . . . . . . . . .  	Number	0001	
GWCASS . . . . . . . . . . . . .  	Number	0000	
GWDBUG . . . . . . . . . . . . .  	Number	0000	
GWLEV2 . . . . . . . . . . . . .  	Number	0000	
GWWID  . . . . . . . . . . . . .  	L NEAR	0278	CSEG	Global
GWWIDX . . . . . . . . . . . . .  	L NEAR	02AC	CSEG

HEATH  . . . . . . . . . . . . .  	Number	0000	
HEXOCT . . . . . . . . . . . . .  	Number	0001	
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Symbols-5
                                                             

HGHBIT . . . . . . . . . . . . .  	Number	0001	

I8086  . . . . . . . . . . . . .  	Number	0001	
I8251  . . . . . . . . . . . . .  	Number	0000	
IBMCSR . . . . . . . . . . . . .  	Number	0001	
IBMLIK . . . . . . . . . . . . .  	Number	0001	
IBMTOK . . . . . . . . . . . . .  	Number	0001	
INKEYF . . . . . . . . . . . . .  	Number	0001	
INLADD . . . . . . . . . . . . .  	Number	0000	
INSTSW . . . . . . . . . . . . .  	Number	0000	
INTEL  . . . . . . . . . . . . .  	Number	0000	
INTFHW . . . . . . . . . . . . .  	Number	0000	
INTFR2 . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
INTFSW . . . . . . . . . . . . .  	Number	0000	
INTHND . . . . . . . . . . . . .  	Number	0001	
INTLEC . . . . . . . . . . . . .  	Number	0000	
INTOCH . . . . . . . . . . . . .  	L NEAR	098B	CSEG
INTROM . . . . . . . . . . . . .  	Number	0000	
INVLIN . . . . . . . . . . . . .  	Number	0001	
IOCTL  . . . . . . . . . . . . .  	L NEAR	0C44	CSEG	Global
ISC  . . . . . . . . . . . . . .  	Number	0000	
ISIS . . . . . . . . . . . . . .  	Number	0000	

JDNOTE . . . . . . . . . . . . .  	L NEAR	0622	CSEG
JERDNA . . . . . . . . . . . . .  	L NEAR	075D	CSEG
JISKTN . . . . . . . . . . . . .  	Number	0000	

KADNMX . . . . . . . . . . . . .  	L NEAR	09BA	CSEG
KADNRM . . . . . . . . . . . . .  	L NEAR	09A4	CSEG
KANABS . . . . . . . . . . . . .  	Number	0000	
KANADT . . . . . . . . . . . . .  	Number	0000	
KANJFN . . . . . . . . . . . . .  	Number	0000	
KEY1 . . . . . . . . . . . . . .  	L NEAR	0837	CSEG
KEYADV . . . . . . . . . . . . .  	L NEAR	0999	CSEG
KEYDB  . . . . . . . . . . . . .  	L NEAR	093B	CSEG
KEYDC1 . . . . . . . . . . . . .  	L NEAR	0945	CSEG
KEYDCH . . . . . . . . . . . . .  	L NEAR	093D	CSEG
KEYDS0 . . . . . . . . . . . . .  	L NEAR	08E5	CSEG
KEYDS1 . . . . . . . . . . . . .  	L NEAR	08EE	CSEG
KEYDS4 . . . . . . . . . . . . .  	L NEAR	0914	CSEG
KEYDS5 . . . . . . . . . . . . .  	L NEAR	091C	CSEG
KEYDSP . . . . . . . . . . . . .  	L NEAR	08D2	CSEG	Global
KEYDSX . . . . . . . . . . . . .  	L NEAR	0930	CSEG
KEYFCE . . . . . . . . . . . . .  	L NEAR	0850	CSEG
KEYFSW . . . . . . . . . . . . .  	Number	0000	
KEYLS0 . . . . . . . . . . . . .  	L NEAR	0887	CSEG
KEYLS1 . . . . . . . . . . . . .  	L NEAR	089E	CSEG
KEYLS2 . . . . . . . . . . . . .  	L NEAR	08A9	CSEG
KEYLSI . . . . . . . . . . . . .  	L NEAR	0853	CSEG
KEYLSP . . . . . . . . . . . . .  	L NEAR	08C1	CSEG
KEYLSQ . . . . . . . . . . . . .  	L NEAR	08C8	CSEG
KEYLST . . . . . . . . . . . . .  	L NEAR	0880	CSEG
KEYNCR . . . . . . . . . . . . .  	L NEAR	094B	CSEG
KEYNLF . . . . . . . . . . . . .  	L NEAR	0951	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Symbols-6
                                                             

KEYOF  . . . . . . . . . . . . .  	L NEAR	085A	CSEG
KEYOFF . . . . . . . . . . . . .  	Number	0001	
KEYON  . . . . . . . . . . . . .  	L NEAR	0855	CSEG
KEYOX  . . . . . . . . . . . . .  	L NEAR	0869	CSEG
KEYOX1 . . . . . . . . . . . . .  	L NEAR	087C	CSEG
KEYOXX . . . . . . . . . . . . .  	L NEAR	0861	CSEG
KEYS . . . . . . . . . . . . . .  	L NEAR	07FA	CSEG	Global
KEYSTA . . . . . . . . . . . . .  	Number	0000	
KEYSTT . . . . . . . . . . . . .  	L NEAR	07EC	CSEG
KEYSW  . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
KEYTRP . . . . . . . . . . . . .  	L NEAR	07F2	CSEG	Global
KEYXX  . . . . . . . . . . . . .  	L NEAR	087F	CSEG
KILLER . . . . . . . . . . . . .  	Number	0000	
KNXTCH . . . . . . . . . . . . .  	L NEAR	0909	CSEG
KNXTST . . . . . . . . . . . . .  	L NEAR	08F1	CSEG

LABKEY . . . . . . . . . . . . .  	Number	0001	
LCOPYS . . . . . . . . . . . . .  	L NEAR	02B1	CSEG	Global
LCPY . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
LEN2 . . . . . . . . . . . . . .  	Number	0001	
LEN3 . . . . . . . . . . . . . .  	Number	0001	
LENGTH . . . . . . . . . . . . .  	Number	0002	
LF . . . . . . . . . . . . . . .  	Number	000A	
LINCNT . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
LINLEN . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
LINLN  . . . . . . . . . . . . .  	Number	0050	
LINLOP . . . . . . . . . . . . .  	L NEAR	03FC	CSEG
LINLP3 . . . . . . . . . . . . .  	L NEAR	03E7	CSEG	Global
LINPRT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
LISTEN . . . . . . . . . . . . .  	Number	0001	
LNGVAR . . . . . . . . . . . . .  	Number	0001	
LOCATE . . . . . . . . . . . . .  	L NEAR	0205	CSEG	Global
LOCPR1 . . . . . . . . . . . . .  	L NEAR	023C	CSEG
LOCPR2 . . . . . . . . . . . . .  	L NEAR	0246	CSEG
LOCPR3 . . . . . . . . . . . . .  	L NEAR	0250	CSEG
LOKHED . . . . . . . . . . . . .  	Number	0000	
LONGI  . . . . . . . . . . . . .  	Number	0000	
LPT3 . . . . . . . . . . . . . .  	Number	0000	
LPTLEN . . . . . . . . . . . . .  	Number	0084	
LPTSW  . . . . . . . . . . . . .  	Number	0001	

MACLNG . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
MAKINT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
MAXDEL . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
MAXUPD . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
MCI  . . . . . . . . . . . . . .  	Number	0000	
MCLXEQ . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
MDS  . . . . . . . . . . . . . .  	Number	0000	
MDSISS . . . . . . . . . . . . .  	Number	0000	
MELCO  . . . . . . . . . . . . .  	Number	0000	
MEMIMG . . . . . . . . . . . . .  	Number	0001	
MINDEL . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
MINUPD . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
MKDIR  . . . . . . . . . . . . .  	L NEAR	0C44	CSEG	Global
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Symbols-7
                                                             

MMODE  . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
MOSTEK . . . . . . . . . . . . .  	Number	0000	
MSCALE . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
MSDCCF . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
MULSEG . . . . . . . . . . . . .  	Number	0001	

NAMLEN . . . . . . . . . . . . .  	Number	0028	
NASCOM . . . . . . . . . . . . .  	Number	0000	
NATROM . . . . . . . . . . . . .  	Number	0000	
NBANKS . . . . . . . . . . . . .  	Number	0001	
NCFCER . . . . . . . . . . . . .  	L NEAR	04A1	CSEG
NCRBAS . . . . . . . . . . . . .  	Number	0000	
NCRCAS . . . . . . . . . . . . .  	Number	0000	
NCRDEB . . . . . . . . . . . . .  	Number	0000	
NCRELS . . . . . . . . . . . . .  	Number	0000	
NCRLPT . . . . . . . . . . . . .  	Number	0001	
NECBAS . . . . . . . . . . . . .  	Number	0000	
NMCOMT . . . . . . . . . . . . .  	Number	0002	
NMKEYF . . . . . . . . . . . . .  	Number	000A	
NMKEYT . . . . . . . . . . . . .  	Number	000E	
NMLINE . . . . . . . . . . . . .  	Number	0019	
NMLPT  . . . . . . . . . . . . .  	Number	0003	
NMPENT . . . . . . . . . . . . .  	Number	0001	
NMSTRT . . . . . . . . . . . . .  	Number	0004	
NOACOM . . . . . . . . . . . . .  	L NEAR	069D	CSEG
NOATDL . . . . . . . . . . . . .  	Number	0000	
NOCTLA . . . . . . . . . . . . .  	Number	0000	
NODOT  . . . . . . . . . . . . .  	Number	0000	
NODSPK . . . . . . . . . . . . .  	L NEAR	084E	CSEG
NOEDIT . . . . . . . . . . . . .  	Number	0000	
NOIOS  . . . . . . . . . . . . .  	Number	0000	
NOMORE . . . . . . . . . . . . .  	L NEAR	03D7	CSEG
NONULL . . . . . . . . . . . . .  	Number	0000	
NOPARM . . . . . . . . . . . . .  	L NEAR	02B8	CSEG
NOPEKS . . . . . . . . . . . . .  	Number	0000	
NOPENI . . . . . . . . . . . . .  	L NEAR	0A15	CSEG
NOPRM  . . . . . . . . . . . . .  	L NEAR	038B	CSEG
NOROMP . . . . . . . . . . . . .  	Number	0000	
NORUBT . . . . . . . . . . . . .  	Number	0000	
NOTE1L . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
NOTELN . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
NOTTAB . . . . . . . . . . . . .  	L NEAR	046F	CSEG
NOTXLT . . . . . . . . . . . . .  	L NEAR	0460	CSEG
NOT_ON . . . . . . . . . . . . .  	L NEAR	07B9	CSEG
NOUSR  . . . . . . . . . . . . .  	Number	0000	
NOVARP . . . . . . . . . . . . .  	Number	0000	
NPEN0  . . . . . . . . . . . . .  	L NEAR	09FF	CSEG
NSTR0  . . . . . . . . . . . . .  	L NEAR	0A65	CSEG
NT2BTK . . . . . . . . . . . . .  	L NEAR	0731	CSEG
NTONOF . . . . . . . . . . . . .  	L NEAR	09E1	CSEG
NTONPN . . . . . . . . . . . . .  	L NEAR	074E	CSEG
NUMLEV . . . . . . . . . . . . .  	Number	006E	
NUMTMP . . . . . . . . . . . . .  	Number	000A	
NUMTRP . . . . . . . . . . . . .  	Number	0015	
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Symbols-8
                                                             


OCTAVE . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
OEMRAM . . . . . . . . . . . . .  	Number	0000	
OFFTRP . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
OMITD  . . . . . . . . . . . . .  	L NEAR	03D6	CSEG
ONEDIG . . . . . . . . . . . . .  	L NEAR	0985	CSEG
ONESUB . . . . . . . . . . . . .  	L NEAR	0A16	CSEG
ONFUN  . . . . . . . . . . . . .  	L NEAR	0760	CSEG
ONFUN1 . . . . . . . . . . . . .  	L NEAR	076E	CSEG
ONGOTP . . . . . . . . . . . . .  	L NEAR	0723	CSEG	Global
ONGOTX . . . . . . . . . . . . .  	L NEAR	077C	CSEG
ONSTM  . . . . . . . . . . . . .  	L NEAR	0774	CSEG
ONTEL  . . . . . . . . . . . . .  	Number	0000	
ONTRP  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
OPAREN . . . . . . . . . . . . .  	Number	0028	
OUTDO  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

PALETE . . . . . . . . . . . . .  	L NEAR	0C41	CSEG	Global
PALSIZ . . . . . . . . . . . . .  	Number	0000	
PANBAS . . . . . . . . . . . . .  	Number	0000	
PARSE  . . . . . . . . . . . . .  	L NEAR	039A	CSEG
PATCHG . . . . . . . . . . . . .  	L NEAR	0000	CSEG	Global
PCS  . . . . . . . . . . . . . .  	Number	0000	
PENF . . . . . . . . . . . . . .  	L NEAR	09EA	CSEG	Global
PENOFF . . . . . . . . . . . . .  	Number	0000	
PENOK  . . . . . . . . . . . . .  	L NEAR	09F4	CSEG
PENRET . . . . . . . . . . . . .  	L NEAR	0A02	CSEG
PENS . . . . . . . . . . . . . .  	L NEAR	09C4	CSEG	Global
PENS1  . . . . . . . . . . . . .  	L NEAR	09D9	CSEG
PLAYS  . . . . . . . . . . . . .  	L NEAR	042F	CSEG	Global
PLAYSW . . . . . . . . . . . . .  	Number	0001	
PLGOFC . . . . . . . . . . . . .  	L NEAR	04D9	CSEG
PLYDO2 . . . . . . . . . . . . .  	L NEAR	0575	CSEG
PLYDOT . . . . . . . . . . . . .  	L NEAR	055A	CSEG
PLYDOX . . . . . . . . . . . . .  	L NEAR	0578	CSEG
PLYDUR . . . . . . . . . . . . .  	L NEAR	05DE	CSEG
PLYFLT . . . . . . . . . . . . .  	L NEAR	04F7	CSEG
PLYLEN . . . . . . . . . . . . .  	L NEAR	0487	CSEG
PLYMER . . . . . . . . . . . . .  	L NEAR	05B5	CSEG
PLYMET . . . . . . . . . . . . .  	L NEAR	05B8	CSEG
PLYMOD . . . . . . . . . . . . .  	L NEAR	05D9	CSEG
PLYNO2 . . . . . . . . . . . . .  	L NEAR	04F9	CSEG
PLYNO3 . . . . . . . . . . . . .  	L NEAR	0506	CSEG
PLYNO4 . . . . . . . . . . . . .  	L NEAR	053E	CSEG
PLYNO6 . . . . . . . . . . . . .  	L NEAR	0596	CSEG
PLYNO7 . . . . . . . . . . . . .  	L NEAR	059F	CSEG
PLYNO8 . . . . . . . . . . . . .  	L NEAR	05B0	CSEG
PLYNO9 . . . . . . . . . . . . .  	L NEAR	05B1	CSEG
PLYNOT . . . . . . . . . . . . .  	L NEAR	04DC	CSEG
PLYNU3 . . . . . . . . . . . . .  	L NEAR	050A	CSEG
PLYNU4 . . . . . . . . . . . . .  	L NEAR	0527	CSEG
PLYNUM . . . . . . . . . . . . .  	L NEAR	04BD	CSEG
PLYRET . . . . . . . . . . . . .  	L NEAR	04BC	CSEG
PLYSHP . . . . . . . . . . . . .  	L NEAR	04FB	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Symbols-9
                                                             

PLYTAB . . . . . . . . . . . . .  	L NEAR	0435	CSEG
PMAP . . . . . . . . . . . . . .  	L NEAR	0C44	CSEG	Global
POCTAV . . . . . . . . . . . . .  	L NEAR	04B1	CSEG
POLCOM . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
POLKEY . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
POLLEV . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
POLPEN . . . . . . . . . . . . .  	L NEAR	0A07	CSEG
POLSTR . . . . . . . . . . . . .  	L NEAR	0A83	CSEG
PPAUS2 . . . . . . . . . . . . .  	L NEAR	0544	CSEG
PPAUSE . . . . . . . . . . . . .  	L NEAR	04A1	CSEG
PRMFND . . . . . . . . . . . . .  	L NEAR	037A	CSEG
PRSDAT . . . . . . . . . . . . .  	L NEAR	0B01	CSEG
PRSTIM . . . . . . . . . . . . .  	L NEAR	0BD4	CSEG
PTEMPO . . . . . . . . . . . . .  	L NEAR	0497	CSEG
PTRGTN . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
PURE . . . . . . . . . . . . . .  	Number	0001	
PUSHF  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
PUT  . . . . . . . . . . . . . .  	L NEAR	0392	CSEG	Global
PUTCH2 . . . . . . . . . . . . .  	L NEAR	0AFD	CSEG
PUTCHR . . . . . . . . . . . . .  	L NEAR	0AF1	CSEG
PUTNEW . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

QUEUE  . . . . . . . . . . . . .  	Number	0001	
QUOTE  . . . . . . . . . . . . .  	Number	0022	

RDPEN  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
RDSTIK . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
RDTRIG . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
REALIO . . . . . . . . . . . . .  	Number	0001	
REQTRP . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
RET2 . . . . . . . . . . . . . .  	L NEAR	0B78	CSEG
REVNMS . . . . . . . . . . . . .  	Number	0001	
RMDIR  . . . . . . . . . . . . .  	L NEAR	0C44	CSEG	Global
RMX  . . . . . . . . . . . . . .  	Number	0000	
RSHACK . . . . . . . . . . . . .  	Number	0000	
RSTLES . . . . . . . . . . . . .  	Number	0001	

SAVSTK . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
SAVTXT . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
SBC  . . . . . . . . . . . . . .  	Number	0000	
SBC86  . . . . . . . . . . . . .  	Number	0000	
SCNINT . . . . . . . . . . . . .  	L NEAR	03AE	CSEG	Global
SCNLOC . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SCNPOS . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SCP  . . . . . . . . . . . . . .  	Number	0001	
SCRATR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SCRCHR . . . . . . . . . . . . .  	L NEAR	0341	CSEG
SCREEN . . . . . . . . . . . . .  	L NEAR	0359	CSEG	Global
SCRENF . . . . . . . . . . . . .  	L NEAR	02FA	CSEG	Global
SCRENX . . . . . . . . . . . . .  	L NEAR	0350	CSEG
SCRINP . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SCRLOP . . . . . . . . . . . . .  	L NEAR	036C	CSEG
SCRN86 . . . . . . . . . . . . .  	Number	0001	
SCRNIO . . . . . . . . . . . . .  	Number	0001	
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Symbols-10
                                                             

SCROLT . . . . . . . . . . . . .  	Number	0001	
SCROUT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SCRSTT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SDAT . . . . . . . . . . . . . .  	Number	002B	
SEMFLG . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
SET1EV . . . . . . . . . . . . .  	L NEAR	06D5	CSEG
SETC . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SETCLR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SETCSR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SETDAT . . . . . . . . . . . . .  	L NEAR	0B94	CSEG
SETFBC . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SETGSB . . . . . . . . . . . . .  	L NEAR	0792	CSEG	Global
SETLOC . . . . . . . . . . . . .  	L NEAR	0260	CSEG
SETTIM . . . . . . . . . . . . .  	L NEAR	0C2E	CSEG
SEVAL1 . . . . . . . . . . . . .  	L NEAR	06E8	CSEG
SEVALL . . . . . . . . . . . . .  	L NEAR	06DF	CSEG
SEVST1 . . . . . . . . . . . . .  	L NEAR	06C4	CSEG
SEVST2 . . . . . . . . . . . . .  	L NEAR	06CA	CSEG
SEVSTT . . . . . . . . . . . . .  	L NEAR	06A7	CSEG
SGSATS . . . . . . . . . . . . .  	Number	0000	
SHELL  . . . . . . . . . . . . .  	L NEAR	0C44	CSEG	Global
SHORTJ . . . . . . . . . . . . .  	Number	0001	
SHTCHN . . . . . . . . . . . . .  	Number	0000	
SHTERR . . . . . . . . . . . . .  	Number	0000	
SHTINS . . . . . . . . . . . . .  	Number	0000	
SHTLHM . . . . . . . . . . . . .  	Number	0000	
SHTLIN . . . . . . . . . . . . .  	Number	0000	
SHTPRO . . . . . . . . . . . . .  	Number	0000	
SHTREN . . . . . . . . . . . . .  	Number	0000	
SINDIG . . . . . . . . . . . . .  	L NEAR	08FE	CSEG
SIXDIG . . . . . . . . . . . . .  	Number	0000	
SKEYON . . . . . . . . . . . . .  	L NEAR	0865	CSEG	Global
SMALL  . . . . . . . . . . . . .  	Number	0000	
SNDFCE . . . . . . . . . . . . .  	L NEAR	0685	CSEG
SNDINI . . . . . . . . . . . . .  	L NEAR	05E3	CSEG	Global
SNDRST . . . . . . . . . . . . .  	L NEAR	0605	CSEG	Global
SNERR  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SNERR1 . . . . . . . . . . . . .  	L NEAR	06DC	CSEG
SNERR2 . . . . . . . . . . . . .  	L NEAR	09E4	CSEG
SOUNDS . . . . . . . . . . . . .  	L NEAR	062D	CSEG	Global
SOUNL4 . . . . . . . . . . . . .  	L NEAR	0650	CSEG
SOUNL5 . . . . . . . . . . . . .  	L NEAR	067C	CSEG
SPCDSK . . . . . . . . . . . . .  	Number	0000	
SPCNDS . . . . . . . . . . . . .  	Number	0000	
STICKF . . . . . . . . . . . . .  	L NEAR	0A72	CSEG	Global
STIM . . . . . . . . . . . . . .  	Number	002D	
STKEYF . . . . . . . . . . . . .  	Number	0001	
STKOK  . . . . . . . . . . . . .  	L NEAR	0A7E	CSEG
STPTRP . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
STRGOK . . . . . . . . . . . . .  	L NEAR	0A4C	CSEG
STRI1  . . . . . . . . . . . . .  	L NEAR	0AA4	CSEG
STRIG1 . . . . . . . . . . . . .  	L NEAR	0A2A	CSEG
STRIGF . . . . . . . . . . . . .  	L NEAR	0A38	CSEG	Global
STRIGS . . . . . . . . . . . . .  	L NEAR	0A20	CSEG	Global
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Symbols-11
                                                             

STRILP . . . . . . . . . . . . .  	L NEAR	0A87	CSEG
STRING . . . . . . . . . . . . .  	Number	0001	
STRINI . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
STROFF . . . . . . . . . . . . .  	Number	0011	
STROK  . . . . . . . . . . . . .  	L NEAR	0A35	CSEG
STRRET . . . . . . . . . . . . .  	L NEAR	0A6D	CSEG
STRSIZ . . . . . . . . . . . . .  	Number	0003	
STRTAB . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
STTEND . . . . . . . . . . . . .  	L NEAR	0382	CSEG
SUPRSH . . . . . . . . . . . . .  	Number	0001	
SWAPSW . . . . . . . . . . . . .  	Number	0001	
SWIDTH . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SYNCHR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

TEK  . . . . . . . . . . . . . .  	Number	0000	
TETRA  . . . . . . . . . . . . .  	Number	0000	
TIMEF  . . . . . . . . . . . . .  	L NEAR	0BAA	CSEG	Global
TIMER  . . . . . . . . . . . . .  	L NEAR	0C44	CSEG	Global
TIMERR . . . . . . . . . . . . .  	L NEAR	0C2B	CSEG
TIMES  . . . . . . . . . . . . .  	L NEAR	0BA4	CSEG	Global
TIMSEP . . . . . . . . . . . . .  	L NEAR	0C1A	CSEG
TIMSHR . . . . . . . . . . . . .  	Number	0000	
TIMSXX . . . . . . . . . . . . .  	L NEAR	0C2A	CSEG
TKEYOF . . . . . . . . . . . . .  	L NEAR	08CD	CSEG	Global
TRMCOM . . . . . . . . . . . . .  	L NEAR	03CE	CSEG
TRMOK  . . . . . . . . . . . . .  	L NEAR	03CF	CSEG
TRNCHR . . . . . . . . . . . . .  	Number	0000	
TRPTBL . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
TRSER2 . . . . . . . . . . . . .  	Number	0000	
TRUANS . . . . . . . . . . . . .  	Number	0000	
TRUROM . . . . . . . . . . . . .  	Number	0001	
TSDISK . . . . . . . . . . . . .  	Number	0000	
TSLPT  . . . . . . . . . . . . .  	Number	0000	
TSTCEV . . . . . . . . . . . . .  	L NEAR	07CA	CSEG
TSTEVX . . . . . . . . . . . . .  	L NEAR	07DD	CSEG
T_ON . . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
T_REQ  . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
T_STOP . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External

USERR  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

VALSC2 . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
VALTYP . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
VARPT2 . . . . . . . . . . . . .  	L NEAR	0403	CSEG	Global
VARRT2 . . . . . . . . . . . . .  	L NEAR	0418	CSEG
VIEW . . . . . . . . . . . . . .  	L NEAR	0C44	CSEG	Global

WINDOW . . . . . . . . . . . . .  	L NEAR	0C44	CSEG	Global

XFGBG  . . . . . . . . . . . . .  	L NEAR	09BB	CSEG
XLCPRM . . . . . . . . . . . . .  	L NEAR	0228	CSEG
XPRAM  . . . . . . . . . . . . .  	L NEAR	0280	CSEG
XTNSYS . . . . . . . . . . . . .  	Number	0000	

Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:36:42
 
GWSTS - GW-BASIC Common Statement Support                   Symbols-12
                                                             

YLCPRM . . . . . . . . . . . . .  	L NEAR	020D	CSEG
YPRAM  . . . . . . . . . . . . .  	L NEAR	028A	CSEG

Z80  . . . . . . . . . . . . . .  	Number	0001	
Z80MAC . . . . . . . . . . . . .  	Number	0001	
ZENITH . . . . . . . . . . . . .  	Number	0000	

$COM2B . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
$FACLO . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
$FACM1 . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
$FMULS . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
$KEY2B . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
$LIST  . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
$OFF . . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
$ON  . . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
$PEN2B . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
$STOP  . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
$STR2B . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
?CSLAB . . . . . . . . . . . . .  	L NEAR	0500	CSEG


   2708 Source  Lines
   2717 Total   Lines
    596 Symbols

  31184 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
