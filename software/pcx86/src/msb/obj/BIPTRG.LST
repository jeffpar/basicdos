Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Page     1-1
                                                            

                                ; [ This translation created 10-Feb-83 by Versi
				on 4.3 ] 
                                 
 0008                           	.RADIX  8		; To be safe 
                                 
 0000                           CSEG	SEGMENT PUBLIC 'CODESG' 
                                	ASSUME  CS:CSEG 
                                 
                             C  INCLUDE	OEM.INC 
                             C  ; [ This translation created 10-Feb-83 by Versi
				on 4.3 ] 
                             C   
                             C  	PAGE	,132D 
                             C  	SUBTTL  Common file to produce 2-segment 8086 GW-CPM BASIC 
                             C   
                             C  	.SALL 
                             C   
 000A                        C  	.RADIX	10 
 = 0000                      C  	OEMRAM=0D 
                             C  ;Pascal program HFILE searches for the following line - DO NOT MODIFY 
                             C  ;** (VERSION SPECIFIC VALUES) ************************************************ 
 = 0019                      C  	NMLINE=25		;Max screen display text lines 
 = 0001                      C  	NBANKS=1		;Number of graphic planes 
 = 0000                      C  	PALSIZ=0		;Size of OEM color palette 
 = 0000                      C  	DBLCHR=0		;Editor support for KANJI chars 
 = 0000                      C  	KANABS=0		;Kana BASIC (Japanese JIS codes) 
 = 0000                      C  	KANJFN=0		;KANJI String Functions KPOS, KLEN .. 
 = 0000                      C  	JISKTN=0		;&K, &J constants (KANJI) 
 = 0001                      C  	SUPRSH=1		;1=super shift key feature 
 = 000A                      C  	NMKEYF=10		;number of function keys 
 = 000E                      C  	NMKEYT=14		;number of function key traps 
 = 0001                      C  	FKEYON=1		;yes=display function keys 
 = 0001                      C  	SCROLT=1		;Line 25 allocated for status only 
 = 0001                      C  	PLAYSW=1		;for PLAY statement 
 = 0001                      C  	BEEPSW=1		;for SOUND, BEEP statements 
 = 0003                      C  	NMLPT=3			;number of line printers 
 = 0001                      C  	CONSSW=1		;Device CONS: 
 = 0002                      C  	NMCOMT=2		;number of COMmunications ports 
 = 0001                      C  	NMPENT=1		;number of light pens 
 = 0004                      C  	NMSTRT=4		;number of joysticks 
 = 0000                      C  	GWCASS=0		;Cassette switch (CSAVE,CLOAD,MOTOR) 
 = 0001                      C  	IBMLIK=1		;IBM compatibility package 
 = 0001                      C  	IBMTOK=1		;IBM token compatibility 
 = 0001                      C  	DYNCOM=1		;Dynamic communication buffers 
                             C  ;** (END OF VERSION SPECIFIC VALUES) ***************************************** 
                             C  ;Pascal program HFILE searches for the previous line - DO NOT MODIFY 
                             C  ; 
 = 0015                      C  	NUMTRP=NMKEYT+NMCOMT+NMPENT+NMSTRT 
 = 0001                      C  	GW=1			;GW BASIC 
 = 0000                      C  	ESCCTL=0		;Escape Sequence processing in SCROUT 
 = 0000                      C  	GWDBUG=0		;DEBUG statement (TEST VERSIONS ONLY) 
                             C  				; Support is in BINTRP.MAC and GWSTS.MAC 
 = 0000                      C  	SIXDIG=0		;# of digits of accuracy assumed when formatting 
                             C  				;single precision numbers for output. 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Page     1-2
Common file to produce 2-segment 8086 GW-CPM BASIC          

                             C  				; 0 := 7 digits 
                             C  				; 1 := 6 digits 
 = 0000                      C  	CASSW=0			;CASSETTE SWITCH 
 = 0001                      C  	LABKEY=1		;^T (LABEL) key capability 
 = 0001                      C  	HGHBIT=1		;8-bit characters (ASCII & Graphics) 
 = 0001                      C  	QUEUE=1			;Queued painting algorithm (vs. stack) 
 = 0001                      C  	GIO86=1			;BASIC-86 Generalized I/O 
 = 0001                      C  	SCRNIO=1		;Screen editor 
 = 0001                      C  	SCRN86=1		;8086 Screen editor 
 = 0001                      C  	I8086=1			;CROSS ASSEMBLING FOR 8086 
 = 0001                      C  	MULSEG=1		;MULTI-SEGMENT 8086 BASIC 
 = 0000                      C  	SMALL=0			;"SMALL" VERSION OF 8086 BASIC IF SET 
 = 0001                      C  	TRUROM=1 
 = 0000                      C  	SBC86=0			;SBC 86/02 BOARD? 
 = 0001                      C  	SHORTJ=1		;USE INTRA-SEGMENT SHORT JUMPS 
                             C  				;IN 8086 CODE 
 = 0001                      C  	LNGVAR=1		;LONG VARIABLE NAME SUPPORT (EXTENDED ONLY) 
 = 0000                      C  	SHTERR=0		;SHORT (2 CHAR) ERROR MESSAGES 
 = 0000                      C  	SHTINS=0		;INSTR IN NON-FAST LEN2 VERSIONS 
 = 0000                      C  	SHTLHM=0		;LEFT HAND SIDE MID IN NON FAST LEN2 VERSIONS 
 = 0000                      C  	SHTCHN=0		;ALLOW CHAIN IN NON-5.0 
 = 0000                      C  	SHTPRO=0		;ALLOW PROTECTED FILES IN NON-FIVDSK 
 = 0000                      C  	SHTLIN=0		;ALLOW LINE INPUT IN NON-EXTENDED NON-FAST 
 = 0000                      C  	SHTREN=0		;ALLOW RENUM IN NON-FST VERSIONS 
 = 0001                      C  	INKEYF=1		;ADDS INKEY$ FUNCTION 
 = 0000                      C  	NOIOS=0			;NO I/O STATMENTS (INP,OUT, WAIT) 
 = 0000                      C  	NOPEKS=0		;NO PEEK, POKE 
 = 0000                      C  	NOUSR=0			;NO USR 
 = 0000                      C  	NOCTLA=0		;NO CONTROL-A IN EXTENDED 
 = 0000                      C  	NORUBT=0		;NO RUBOUT 
 = 0000                      C  	NOROMP=0		;NO ROM PROGRAM FEATURE 
 = 0000                      C  	NOATDL=0		;NO AUTO DELETE IN NON-FAST EXTENDED 
 = 0000                      C  	NODOT=0			;NO DOT IN LEN2 
 = 0000                      C  	NOEDIT=0		;NO EDIT COMMAND 
 = 0000                      C  	CRONLY=0		;ONLY PUT OUT CR, NOT CRLF TO TERMINAL 
                             C  				;AND FILES 
 = 0000                      C  	NONULL=0		;NO NULL COMMAND, PUT OUT NULLS IN CRDO & OUTCH1 
 = 0000                      C  	NOVARP=0		;NO VARPTR FUNCTION 
 = 0001                      C  	FIVEO=1			;GENERATE VERSION WITH RELEASE 5.0 FEATURES 
 = 0001                      C  	FIVMEM=1 
 = 0001                      C  	ANSI=1 
 = 0001                      C  	FIVDSK=1		;5.0 NEW DSK CODE 
 = 0001                      C  	FIVLPT=1		;WIDTH LPRINT AND 255 FEATURE 
 = 0001                      C  	HEXOCT=1		;&H..., HEX$, &O..., OCT$ 
 = 0000                      C  	BINCSW=0		;&B..., BIN$ 
 = 0001                      C  	BLODSW=1		;BLOAD, BSAVE COMMANDS 
 = 0001                      C  	MEMIMG=1		;MEMORY IMAGE FILES 
 = 0001                      C  	GENBIN=1 
                             C   
 = 0000                      C  	TRUANS=0		;TRUE ANSI VERSION (STATIC SCAN, ON ERROR) 
 = 0000                      C  	COMMNT=0		;DONT WANT BIG COMMENT 
 = 0000                      C  	INTEL=0			;INTEL PROPRIETARY 
 = 0000                      C  	INTFSW=0		;INTEL FLOATING POINT 
 = 0000                      C  	INTFHW=0 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Page     1-3
Common file to produce 2-segment 8086 GW-CPM BASIC          

 = 0000                      C  	RMX=0			;INTEL RMX VERSION 
 = 0000                      C  	EDIT80=0		;FOR EDIT80 I/O ROUTINES 
 = 0000                      C  	RSHACK=0 
 = 0000                      C  	INTLEC=0 
 = 0002                      C  	LENGTH=2		;  1 MEANS 8K, 2 MEANS 12K 
 = 0000                      C  	BASDEB=0		;WHETHER DBG WILL BE LOADED WITH BASIC 
 = 0001                      C  	RSTLES=1		;WHETHER BASIC WILL USE RST LOCATIONS 
                             C  				;TO MAKE ITSELF SMALLER & QUICKER 
 = 0001                      C  	REALIO=1		;WHETHER SIMULATE (=0) OR ON MACHINE (=1) 
 = 0001                      C  	GENIO=1			;USE G/P ROUTINES 
 = 0001                      C  	CHSEAT=1		;CHSNS eats chars 
 = 0000                      C  	GENDSK=0		;USE G/P DSK CODE 
 = 0000                      C  	LONGI=0			;WHETHER WE ASK "TERMINAL WIDTH?" 
                             C  				;AND WANT SIN-TAN-COS-ATN? 
 = 0000                      C  	INSTSW=0		;FOR INSTR INSTRUCTION 
 = 0001                      C  	SWAPSW=1		;FOR SWAP STATEMENT 
 = 0000                      C  	MDS=0			;FOR INTEL MDS SYSTEMS 
 = 0000                      C  	SBC=0			;FOR INTEL SINGLE BOARD COMPUTER 
                             C  				;1=SBC 80/10, 2=SBC 80/20 
 = 0001                      C  	PURE=1			;ON FOR PURE CODE 
 = 0000                      C  	KILLER=0		;FOR ROM VERSION THAT WONT RUN IN RAM 
 = 0000                      C  	INTROM=0 
 = 0001                      C  	LPTSW=1 
 = 0001                      C  	NCRLPT=1 
 = 0000                      C  	NCRCAS=0 
 = 0000                      C  	ISC=0			;FOR ISC VERSION 
 = 0000                      C  	LPT3=0			;THREE LPT DRIVER VERSION(QUME,OKIA,CENT) 
 = 0000                      C  	TSLPT=0 
                             C   
 = 0000                      C  	DOS=0			;ON TO GEN ROUTINES FOR DOS 
 = 0001                      C  	DISK=1			;FILE I/O FEATURES 
 = 0000                      C  	TIMSHR=0		;NO TIME-SHARING DISK 
 = 0000                      C  	TSDISK=0		;NO TIME-SHARING DISK FOR US 
 = 0000                      C  	SPCDSK=0		;MAY HAVE MM'S DISK CODE 
 = 0000                      C  	SPCNDS=0 
 = 0001                      C  	FAST=1			;CONSTANT COMPRESSION, RENUM & FRIENDS 
 = 0000                      C  	KEYSTA=0 
 = 0000                      C  	ISIS=0			;FOR VERSION TO RUN UNDER INTEL'S ISIS II DOS 
 = 0000                      C  	MDSISS=0		;FOR MDS VERSION THAT RUNS UNDER ISIS-II 
 = 0001                      C  	CPM=1			;FOR CPM compatible operating systems 
 = 0001                      C  	CPM2=1			;VERSION 2. CPM 
 = 0000                      C  	CPM86=0			;FOR CP/M-86 operating system 
 = 0001                      C  	SCP=1			;MS-DOS operating system 
 = 0000                      C  	CPMCON=0 
 = 0000                      C  	CPMSER=0		;CHECK CPM SERIAL #'S 
 = 0000                      C  	CPMADD=0		;FOR VERSION TO RUN ON ADDS CPM 
 = 0000                      C  	CPMA75=0		;FOR VERSION TO RUN ON ADDS SYSTEM 75 
                             C  				;CP/M 
 = 0000                      C  	CPMRSH=0		;FOR RADIO SHACK CPM/M 
 = 0000                      C  	CPM110=0		;FOR CP/M @1100 HEX (INTERALIA) 
 = 0000                      C  	CPMSBC=0		;FOR VERSION TO RUN ON SBC CP/M AT 4100H 
 = 0000                      C  	CPMPER=0		;FOR PERTEC VERSION OF CPM 
 = 0000                      C  	CPMLIF=0		;LIFEBOAT CP/M AT 4200H 
 = 0000                      C  	CPMMDS=0		;MOHAWK DATA SYSTEMS CP/M 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Page     1-4
Common file to produce 2-segment 8086 GW-CPM BASIC          

 = 0000                      C  	CPMCON=0 
 = 0000                      C  	Z80=0 
 = 0001                      C  	DISK=1 
 = 0001                      C  	NCRLPT=1 
 = 0001                      C  	RSTLES=1 
 = 0000                      C  	DRVPOS=CPMADD 
 = 0000                      C  	TRNCHR=CPMADD 
 = 0000                      C  	INLADD=CPMADD 
 = 0001                      C  	LISTEN=1		;ON MEANS LISTEN FOR ^C 
 = 0001                      C  	LISTEN=1 
 = 0000                      C  	LEN2=0 
 = 0001                      C  	LEN2=1 
 = 0001                      C  	HEXOCT=1 
 = 0002                      C  	LENGTH=2 
 = 0001                      C  	RSTLES=1 
 = 0001                      C  	FIVLPT=1 
 = 0000                      C  	I8251=0			;THIS SWITCH IS USED FOR ROSEMOUNT VERSION 
 = 0001                      C  	CONTRO=1		;ALLOW ^O 
 = 0001                      C  	LEN3=LEN2 OR CASSW 
                             C   
                             C   
                             C   
 = 0001                      C  	STRING=1 
 = 0001                      C  	NCRLPT=1 
                             C   
                             C  ; *** OEM Switches which need to be defaulted to 0 
                             C  ; 
 = 0000                      C  	CMPUTN=0 
 = 0000                      C  	DUPONT=0 
 = 0000                      C  	EXIDY=0 
 = 0000                      C  	GESBC=0 
 = 0000                      C  	HEATH=0 
 = 0000                      C  	LOKHED=0 
 = 0000                      C  	MOSTEK=0 
 = 0000                      C  	TEK=0 
 = 0000                      C  	TRSER2=0 
 = 0000                      C  	NASCOM=0 
 = 0000                      C  	NATROM=0 
 = 0000                      C  	NCRBAS=0 
 = 0000                      C  	NCRDEB=0 
 = 0000                      C  	NCRDEB=0 
 = 0000                      C  	NCRELS=0 
 = 0000                      C  	ONTEL=0 
 = 0000                      C  	PCS=0 
 = 0000                      C  	SGSATS=0 
 = 0000                      C  	ALTAIR=0 
 = 0000                      C  	DMC=0 
 = 0000                      C  	PANBAS=0 
 = 0000                      C  	XTNSYS=0 
 = 0000                      C  	NECBAS=0 
                             C  ;******************************************************************* 
                             C  ; Z80 related macros 
                             C  ;******************************************************************* 
 = 0001                      C  	Z80=1			;FOR VERSION THAT RUNS ON BOTH 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Page     1-5
Common file to produce 2-segment 8086 GW-CPM BASIC          

                             C  				;8080'S AND ZILOG Z-80'S 
 = 0001                      C  	Z80MAC=1		;USE 8080 MACROS INSTEAD OF Z80 INSTRUCTIONS 
 = 0000                      C  	Z80=0 
 = 0001                      C  	Z80=1 
                             C  LDIR	MACRO 
                             C  	MOV	WORD PTR A,WORD PTR M 
                             C  	STAX	D 
                             C  	INXF	H 
                             C  	INXF	D 
                             C  	DCXF	B 
                             C  	MOV	WORD PTR A,WORD PTR B 
                             C  	ORA	C 
                             C  	JNZ	_-8D 
                             C  ENDM 
                             C  LDDR	MACRO 
                             C  	MOV	WORD PTR A,WORD PTR M 
                             C  	STAX	D 
                             C  	DCXF	H 
                             C  	DCXF	D 
                             C  	DCXF	B 
                             C  	MOV	WORD PTR A,WORD PTR B 
                             C  	ORA	C 
                             C  	JNZ	_-8D 
                             C  ENDM 
                             C  DJNZ	MACRO	    DEST 
                             C  	DCR	B 
                             C  	JNZ	DEST 
                             C  ENDM 
                             C  ;******************************************************************* 
                             C  ; Define reset routines. 
                             C  ;******************************************************************* 
                             C  FSIGN	MACRO 
                             C  	CALL	SIGN 
                             C  ENDM 
                             C  PUSHM	MACRO 
                             C  	MOV	WORD PTR C,WORD PTR M 
                             C  	INX	H 
                             C  	MOV	WORD PTR B,WORD PTR M 
                             C  	INX	H 
                             C  	PUSH	WORD PTR B 
                             C  ENDM 
                             C  SYNCHK	MACRO	X 
                             C  	CALL	SYNCHR 
                             C  	DB	OFFSET X 
                             C  ENDM 
                             C  OUTCHR	MACRO 
                             C  	CALL	OUTDO 
                             C  ENDM 
                             C  CHRGET	MACRO 
                             C  	CALL	CHRGTR 
                             C  ENDM 
                             C  COMPAR	MACRO 
                             C  	CALL	DCOMPR 
                             C  ENDM 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Page     1-6
Common file to produce 2-segment 8086 GW-CPM BASIC          

                             C  GETYPE	MACRO 
                             C  	CALL	GETYPR 
                             C  ENDM 
                             C  COMPAR	MACRO 
                             C  	DB	73O 
                             C  	DB	332O 
                             C   ENDM 
                             C  ACRLF	MACRO 
                             C  	DB	13D 
                             C  	DB	10D 
                             C  ENDM 
                             C  PUSHR	MACRO 
                             C  	PUSH	WORD PTR D 
                             C  	PUSH	WORD PTR B 
                             C  ENDM 
                             C  POPR	MACRO 
                             C  	POP	WORD PTR B 
                             C  	POP	WORD PTR D 
                             C  ENDM 
                             C  MOVRI	MACRO	B,C,D,E 
                             C  	DB	1O		; "LXI  B" 
                             C  	DB	OFFSET C 
                             C  	DB	OFFSET B 
                             C  	DB	21O		; "LXI  D" 
                             C  	DB	OFFSET E 
                             C  	DB	OFFSET D 
                             C  ENDM 
                             C  INST	MACRO	X 
                             C  	DB	OX 
                             C  ENDM 
                             C   
                             C   
 = 000F                      C  	CONTO=15		;CHARACTER TO SUPRESS OUTPUT (USUALLY CONTROL-O) 
 = 0000                      C  	DBLTRN=0		;FOR DOUBLE PRECISION TRANSCENDENTALS 
                             C   
 = 000E                      C  	CLMWID=14D		;MAKE COMMA COLUMNS FOURTEEN CHARACTERS 
 = 0080                      C  	DATPSC=128D		;NUMBER OF DATA BYTES IN DISK SECTOR 
 = 0050                      C  	LINLN=80D		;TERMINAL LINE LENGTH 
 = 0084                      C  	LPTLEN=132D 
 = 00FF                      C  	BUFLEN=255		;LONG LINES 
 = 0028                      C  	NAMLEN=40D		;MAXIMUM LENGTH NAME -- 3 TO 127 
                             C   
 = 006E                      C  	NUMLEV=110D		;NUMBER OF STACK LEVELS RESERVED 
                             C  				;BY AN EXPLICIT CALL TO GETSTK 
 = 0004                      C  	STRSIZ=4 
 = 0003                      C  	STRSIZ=3 
 = 0003                      C  	NUMTMP=3		;NUMBER OF STRING TEMPORARIES 
 = 000A                      C  	NUMTMP=10 
                             C   
 0008                        C  	.RADIX	8 
                             C  ; 
                             C  ; Useful macros 
                             C  ; 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Page     1-7
Common file to produce 2-segment 8086 GW-CPM BASIC          

                             C  ACRLF   MACRO 
                             C          DB      13D 
                             C          DB      10D 
                             C  ENDM 
                             C   
                             C  INS86   MACRO   A,B,C,D 
                             C          DB      A&O 
                             C  IFNB    <B> 
                             C          DB      B&O 
                             C  ENDIF 
                             C  IFNB    <D> 
                             C          DB      C&O 
                             C          DB      D&O 
                             C  ENDIF 
                             C  IFB     <D> 
                             C   IFNB   <C> 
                             C          DW      C 
                             C    ENDIF 
                             C   ENDIF 
                             C  ENDM 
                             C   
                             C  CALLOS  MACRO 
                             C          CALL    CPMENT 
                             C  ENDM 
                             C   
                             C  POPR    MACRO 
                             C          POP     CX 
                             C          POP     DX 
                             C  ENDM 
                             C   
                             C  ADR     MACRO   X 
                             C          DW      X 
                             C  ENDM 
                             C   
                             C  DC      MACRO   ARG 
                             C          IRPC    ZZ,<ARG> 
                             C              IFDIF       <ZZ>,<">
                             C                  DB      "&ZZ&" 
                             C                  _A="&ZZ&" 
                             C              ENDIF 
                             C          ENDM 
                             C  ENDM 
                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Page     1-8
Common file to produce 2-segment 8086 GW-CPM BASIC          

                             C          PAGE 
                             C   
                             C  DBGBRK	MACRO 
                             C  	DB	0CDh,06h,0CCh 
                             C  	ENDM 
                                 
                                 
                                	TITLE   BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA 
                                 
 000A                           	.RADIX	10 
                                 
 = 0000                         PC8A=0 
 = 0000                         TRSHHC=0 
 = 0000                         NECPPC=0 
 = 0000                         OLVPPC=0 
                                 
                                	SUBTTL  DIMENSION & VARIABLE SEARCHING - PTRGET 
                                 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG'		; Data Segment 
                                	ASSUME DS:DSEG 
                                	EXTRN	ARYTA2:WORD,ARYTAB:WORD,DIMFLG:WORD,STREND:WORD 
                                	EXTRN	SUBFLG:WORD,TEMP2:WORD,TEMP3:WORD,VALTYP:WORD,VARTAB:WORD 
                                	EXTRN	DSEGZ:WORD 
                                	EXTRN	NAMBUF:WORD,NAMCNT:WORD,NAMTMP:WORD 
                                	EXTRN	OPTVAL:WORD 
                                	EXTRN	PARM1:WORD,PRMFLG:WORD,PRMLEN:WORD,DEFTBL:WORD,NOFUNS:WORD 
                                	EXTRN	FAC:WORD,FACLO:WORD 
 0000                           DSEG	ENDS			; End of data degment externals 
                                 
                                				; Code Segment ( terminated by END at bottom of file ) 
                                 
                                 
                                	EXTRN	BLTU:NEAR,ERRBS:NEAR,ERROR:NEAR,FCERR:NEAR 
                                	EXTRN	GETSTK:NEAR,INTIDX:NEAR,ISLET:NEAR,ISLET2:NEAR,OMERR:NEAR 
                                	EXTRN	REASON:NEAR,SNERR:NEAR 
                                	EXTRN	REDDY:NEAR,POPHRT:NEAR,ERRDD:NEAR,RETVAR:NEAR,UMULT:NEAR 
                                 
                                	EXTRN	CHRGTR:NEAR,DCOMPR:NEAR,SYNCHR:NEAR 
                                	EXTRN	GETYPR:NEAR 
                                	EXTRN	LOPFD1:NEAR,LOPFND:NEAR 
                                	PUBLIC	NOTFDD,NOTFNS 
                                 
                                	PUBLIC	PTRGET,BSERR,PTRGT2,DIM,NOARYS 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Page     1-9
DIMENSION & VARIABLE SEARCHING - PTRGET                     

                                	PAGE 
 0000  4B                       DIMCON:	DEC	BX		;SEE IF COMMA ENDED THIS VARIABLE 
 0001  E8 0000 E                	CALL	CHRGTR 
 0004  75 01                    	JNZ	SHORT $+3 
 0006  C3                       	RET			;IF TERMINATOR, GOOD BYE 
 0007  E8 0000 E                	CALL	SYNCHR 
 000A  2C                       	DB	OFFSET 44	;MUST BE COMMA 
                                ; 
                                ; THE "DIM" CODE SETS DIMFLG AND THEN FALLS INTO THE VARIABLE 
                                ; SEARCH ROUTINE. THE VARIABLE SEARCH ROUTINE LOOKS AT 
                                ; DIMFLG AT THREE DIFFERENT POINTS: 
                                ; 
                                ;       1) IF AN ENTRY IS FOUND, DIMFLG BEING ON INDICATES 
                                ;               A "DOUBLY DIMENSIONED" VARIABLE 
                                ;       2) WHEN A NEW ENTRY IS BEING BUILT DIMFLG'S BEING ON 
                                ;               INDICATES THE INDICES SHOULD BE USED FOR 
                                ;               THE SIZE OF EACH INDICE. OTHERWISE THE DEFAULT 
                                ;               OF TEN IS USED. 
                                ;       3) WHEN THE BUILD ENTRY CODE FINISHES, ONLY IF DIMFLG IS 
                                ;               OFF WILL INDEXING BE DONE 
                                ; 
 000B  B9 0000 R                DIM:	MOV	CX,OFFSET DIMCON	;PLACE TO COME BACK TO 
 000E  51                       	PUSH	CX 
 000F  B0 C8                    	MOV	AL,LOW 200 
 0011  EB 02                    	JMP	SHORT PTRGT1 
                                				;MUST TURN THE MSB ON 
                                ; 
                                ; ROUTINE TO READ THE VARIABLE NAME AT THE CURRENT TEXT POSITION 
                                ; AND PUT A POINTER TO ITS VALUE IN [D,E]. [H,L] IS UPDATED 
                                ; TO POINT TO THE CHARACTER AFTER THE VARIABLE NAME. 
                                ; VALTYP IS SETUP. NOTE THAT EVALUATING SUBSCRIPTS IN 
                                ; A VARIABLE NAME CAN CAUSE RECURSIVE CALLS TO PTRGET SO AT 
                                ; THAT POINT ALL VALUES MUST BE STORED ON THE STACK. 
                                ; ON RETURN, [A] DOES NOT REFLECT THE VALUE OF THE TERMINATING CHARACTER 
                                ; 
 0013  32 C0                    PTRGET:	XOR	AL,AL		;MAKE [A]=0 
 0015                           PTRGT1: 
 0015  A2 0000 E                	MOV	BYTE PTR DIMFLG,AL	;FLAG IT AS SUCH 
 0018  8A 0F                    	MOV	CL,BYTE PTR [BX]	;GET FIRST CHARACTER IN [C] 
 001A                           PTRGT2: 
 001A  E8 0000 E                	CALL	ISLET		;CHECK FOR LETTER 
 001D  73 03                    	JAE	SHORT ??L000 
 001F  E9 0000 E                	JMP	SNERR		;MUST HAVE A LETTER 
 0022                           ??L000: 
 0022  32 C0                    	XOR	AL,AL 
 0024  8A E8                    	MOV	CH,AL		;ASSUME NO SECOND CHARACTER 
 0026  A2 0000 E                	MOV	BYTE PTR NAMCNT,AL	;ZERO NAMCNT 
 0029  43                       	INC	BX		;INCRMENT TEXT POINTER 
 002A  8A 07                    	MOV	AL,BYTE PTR [BX]	;GET CHAR 
 002C  3C 2E                    	CMP	AL,LOW "."	;IS IT A DOT? 
 002E  72 42                    	JB	SHORT NOSEC	;TOO SMALL FOR ANYTHING REASONABLE 
 0030  74 0D                    	JZ	SHORT ISSEC	;"." IS VALID VAR CHAR 
 0032  3C 3A                    	CMP	AL,LOW OFFSET "9"+1	;TOO BIG FOR NUMERIC? 
 0034  73 04                    	JAE	SHORT PTRGT3	;YES 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Page     1-10
DIMENSION & VARIABLE SEARCHING - PTRGET                     

 0036  3C 30                    	CMP	AL,LOW "0"	;IN RIGHT RANGE? 
 0038  73 05                    	JAE	SHORT ISSEC	;YES, WAS NUMERIC 
 003A  E8 0000 E                PTRGT3:	CALL	ISLET2		;SET CARRY IF NOT ALPHABETIC 
 003D  72 33                    	JB	SHORT NOSEC	;ALLOW ALPHABETICS 
 003F  8A E8                    ISSEC:	MOV	CH,AL		;IT IS A NUMBER--SAVE IN B 
 0041  51                       	PUSH	CX		;SAVE [B,C] 
 0042  B5 FF                    	MOV	CH,LOW 255	;[B] COUNTS THE CHARACTERS PAST #2 
 0044  BA FFFF E                	MOV	DX,OFFSET NAMBUF-1	;THE PLACE TO PUT THE CHARACTERS 
 0047  0C 80                    VMORCH:	OR	AL,LOW 128D	;EXTRA CHARACTERS MUST HAVE THE HIGH BIT ON 
                                				;SO ERASE CAN SCAN BACKWARDS OVER THEM 
 0049  FE C5                    	INC	CH		;INCREASE THE CHACRACTER COUNT 
 004B  8B FA                    	MOV	DI,DX 
 004D  AA                       	STOSB			;AND STORE INTO THE BUFFER 
 004E  42                       	INC	DX		;AND UPDATE THE BUFFER POINTER 
 004F  43                       	INC	BX		;INCREMENT TEXT POINTER 
 0050  8A 07                    	MOV	AL,BYTE PTR [BX]	;GET CHAR 
 0052  3C 3A                    	CMP	AL,LOW OFFSET "9"+1	;TOO BIG? 
 0054  73 04                    	JAE	SHORT VMORC1	;YES 
 0056  3C 30                    	CMP	AL,LOW "0"	;IN RANGE FOR DIGIT 
 0058  73 ED                    	JAE	SHORT VMORCH	;YES, VALID CHAR 
 005A  E8 0000 E                VMORC1:	CALL	ISLET2		;AS ARE ALPHABETICS 
 005D  73 E8                    	JAE	SHORT VMORCH 
 005F  3C 2E                    	CMP	AL,LOW "."	;DOTS ALSO OK 
 0061  74 E4                    	JZ	SHORT VMORCH	;SO EAT IT 
 0063  8A C5                    	MOV	AL,CH		;CHECK FOR MAXIMUM COUNT 
 0065  3C 27                    	CMP	AL,LOW OFFSET NAMLEN-1	;LIMITED TO SIZE OF NAMBUF ONLY 
 0067  72 03                    	JNAE	SHORT ??L001 
 0069  E9 0000 E                	JMP	SNERR		;MUST BE BAD SYNTAX 
 006C                           ??L001: 
 006C  59                       	POP	CX		;GET BACK THE STORED [B,C] 
 006D  A2 0000 E                	MOV	BYTE PTR NAMCNT,AL	;ALWAYS SET UP COUNT OF EXTRAS 
 0070  8A 07                    	MOV	AL,BYTE PTR [BX]	;RESTORE TERMINATING CHAR 
 0072                           NOSEC: 
 0072  3C 26                    	CMP	AL,LOW OFFSET "%"+1	;NOT A TYPE INDICATOR 
 0074  73 21                    	JAE	SHORT TABTYP	;THEN DONT CHECK THEM 
 0076  BA 00A9 R                	MOV	DX,OFFSET HAVTYP	;SAVE JUMPS BY USING RETURN ADDRESS 
 0079  52                       	PUSH	DX 
 007A  B6 02                    	MOV	DH,LOW 2	;CHECK FOR INTEGER 
 007C  3C 25                    	CMP	AL,LOW "%" 
 007E  75 01                    	JNZ	SHORT $+3 
 0080  C3                       	RET 
 0081  FE C6                    	INC	DH		;CHECK FOR STRING 
 0083  3C 24                    	CMP	AL,LOW "$" 
 0085  75 01                    	JNZ	SHORT $+3 
 0087  C3                       	RET 
 0088  FE C6                    	INC	DH		;CHECK FOR SINGLE PRECISION 
 008A  3C 21                    	CMP	AL,LOW "!" 
 008C  75 01                    	JNZ	SHORT $+3 
 008E  C3                       	RET 
 008F  B6 08                    	MOV	DH,LOW 8	;ASSUME ITS DOUBLE PRECISION 
 0091  3C 23                    	CMP	AL,LOW "#"	;CHECK THE CHARACTER 
 0093  75 01                    	JNZ	SHORT $+3 
 0095  C3                       	RET			;WHEN WE MATCH, SETUP VALTYP 
 0096  58                       	POP	AX		;POP OFF NON-USED HAVTYP ADDRESS 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Page     1-11
DIMENSION & VARIABLE SEARCHING - PTRGET                     

 0097  8A C1                    TABTYP:	MOV	AL,CL		;GET THE STARTING CHARACTER 
 0099  24 7F                    	AND	AL,LOW 127	;GET RID OF THE USER-DEFINED 
                                				;FUNCTION BIT IN [C] 
 009B  8A D0                    	MOV	DL,AL		;BUILD A TWO BYTE OFFSET 
 009D  B6 00                    	MOV	DH,LOW 0 
 009F  53                       	PUSH	BX		;SAVE THE TEXT POINTER 
 00A0  BB FFBF E                	MOV	BX,OFFSET DEFTBL-"A"	;SEE WHAT THE DEFAULT IS 
 00A3  03 DA                    	ADD	BX,DX 
 00A5  8A 37                    	MOV	DH,BYTE PTR [BX]	;GET THE TYPE OUT OF THE TABLE 
 00A7  5B                       	POP	BX		;GET BACK THE TEXT POINTER 
 00A8  4B                       	DEC	BX		;NO MARKING CHARACTER 
 00A9  8A C6                    HAVTYP:	MOV	AL,DH		;SETUP VALTYP 
 00AB  A2 0000 E                	MOV	BYTE PTR VALTYP,AL 
 00AE  E8 0000 E                	CALL	CHRGTR		;READ PAST TYPE MARKER 
 00B1  A0 0000 E                	MOV	AL,BYTE PTR SUBFLG	;GET FLAG WHETHER TO ALLOW ARRAYS 
 00B4  FE C8                    	DEC	AL		;IF SUBFLG=1, "ERASE" HAS CALLED 
 00B6  75 03                    	JNZ	SHORT ??L002 
 00B8  E9 0233 R                	JMP	ERSFIN		;PTRGET, AND SPECIAL HANDLING MUST BE DONE 
 00BB                           ??L002: 
 00BB  78 03                    	JS	SHORT ??L003 
 00BD  EB 11 90                 	JMP	NOARYS		;NO ARRAYS ALLOWED 
 00C0                           ??L003: 
 00C0  8A 07                    	MOV	AL,BYTE PTR [BX]	;GET CHAR BACK 
 00C2  2C 28                    	SUB	AL,LOW "("	;ARRAY PERHAPS (IF SUBFLG SET NEVER WILL MATCH) 
 00C4  75 03                    	JNZ	SHORT ??L004 
 00C6  E9 018C R                	JMP	ISARY		;IT IS! 
 00C9                           ??L004: 
 00C9  2C 33                    	SUB	AL,LOW OFFSET "["-")"+1	;SEE IF LEFT BRACKET 
 00CB  75 03                    	JNZ	SHORT ??L005 
 00CD  E9 018C R                	JMP	ISARY		;IF SO, OK SUBSCRIPT 
 00D0                           ??L005: 
 00D0  32 C0                    NOARYS:	XOR	AL,AL		;ALLOW PARENS AGAIN 
 00D2  A2 0000 E                	MOV	BYTE PTR SUBFLG,AL	;SAVE IN FLAG LOCATION 
 00D5  53                       	PUSH	BX		;SAVE THE TEXT POINTER 
 00D6  A0 0000 E                	MOV	AL,BYTE PTR NOFUNS	;ARE FUNCTIONS ACTIVE? 
 00D9  0A C0                    	OR	AL,AL 
 00DB  A2 0000 E                	MOV	BYTE PTR PRMFLG,AL	;INDICATE IF PARM1 NEEDS SEARCHING 
 00DE  74 1E                    	JZ	SHORT SNFUNS	;NO FUNCTIONS SO NO SPECIAL SEARCH 
 00E0  8B 1E 0000 E             	MOV	BX,PRMLEN	;GET THE SIZE TO SEARCH 
 00E4  BA 0000 E                	MOV	DX,OFFSET PARM1	;GET THE BASE OF THE SEARCH 
 00E7  03 DA                    	ADD	BX,DX		;[H,L]= PLACE TO STOP SEARCHING 
 00E9  89 1E 0000 E             	MOV	ARYTA2,BX	;SET UP STOPPING POINT 
 00ED  87 DA                    	XCHG	BX,DX		;[H,L]=START [D,E]=END 
 00EF  E9 0000 E                	JMP	LOPFND 
 00F2  A0 0000 E                NOTFNS:	MOV	AL,BYTE PTR PRMFLG	;HAS PARM1 BEEN SEARCHED 
 00F5  0A C0                    	OR	AL,AL 
 00F7  74 24                    	JZ	SHORT SMKVAR	;IF SO, CREATE VARIABLE 
 00F9  32 C0                    	XOR	AL,AL		;FLAG PARM1 AS SEARCHED 
 00FB  A2 0000 E                	MOV	BYTE PTR PRMFLG,AL 
 00FE  8B 1E 0000 E             SNFUNS:	MOV	BX,ARYTAB	;STOPPING POINT IS [ARYTA2] 
 0102  89 1E 0000 E             	MOV	ARYTA2,BX 
 0106  8B 1E 0000 E             	MOV	BX,VARTAB	;SET UP STARTING POINT 
 010A  E9 0000 E                	JMP	LOPFND 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Page     1-12
DIMENSION & VARIABLE SEARCHING - PTRGET                     

                                ; THIS ENTRY POINT IS FOR THOSE CALLERS WHO WANT TO RETURN 
                                ; FROM PTRGET WITHOUT CREATING A SYMBOL TABLE ENTRY IF THE 
                                ; VARIABLE IS NOT FOUND IN THE SYMBOL TABLE. PTRGET THEN RETURNS 
                                ; THROUGH VARNOT AND RETURNS WITH [D,E]=0 AND [A]=0 
                                	PUBLIC	PTRGTN,PTRGTR 
 010D  E8 0013 R                PTRGTN:	CALL	PTRGET		;CALL PTRGET 
 0110  C3                       PTRGTR:	RET			;DONT CHANGE THIS SEQUENCE AS RETURN 
                                				;ADDRESS IS CHECKED FOR 
                                 
                                ; THIS IS EXIT FOR VARPTR AND OTHERS 
 0111                           VARNOT: 
 0111  32 C0                    	XOR	AL,AL		;MAKE SURE [AL]=0 
 0113  8A F0                    	MOV	DH,AL		;ZERO [D,E] 
 0115  8A D0                    	MOV	DL,AL 
 0117  59                       	POP	CX		;GET RID OF PUSHED [D,E] 
 0118  5E                       	POP	SI		;XTHL 
 0119  87 F3                    	XCHG	SI,BX 
 011B  56                       	PUSH	SI		;PUT RETURN ADDRESS BACK ON STACK 
 011C  C3                       	RET			;RETURN FROM PTRGET 
                                 
 011D  5B                       SMKVAR:	POP	BX		;[H,L]= TEXT POINTER 
 011E  5E                       	POP	SI		;XTHL 
 011F  87 F3                    	XCHG	SI,BX 
 0121  56                       	PUSH	SI		;[H,L]= RETURN ADDRESS 
 0122  52                       	PUSH	DX		;SAVE CURRENT VARIABLE TABLE POSITION 
 0123  BA 0110 R                	MOV	DX,OFFSET PTRGTR	;ARE WE RETURNING TO PTRGTN? 
 0126  3B DA                    	CMP	BX,DX		;COMPARE 
 0128  74 E7                    	JZ	SHORT VARNOT	;YES. 
 012A  BA 0000 E                	MOV	DX,OFFSET RETVAR	;DID EVAL CALL US? 
 012D  3B DA                    	CMP	BX,DX		;IF SO, DON'T MAKE A NEW VARIABLE 
 012F  5A                       	POP	DX		;RESTORE THE POSITION 
 0130  74 49                    	JZ	SHORT FINZER	;MAKE FAC ZERO (ALL TYPES) AND SKIP RETURN 
 0132  5E                       	POP	SI		;XTHL 
 0133  87 F3                    	XCHG	SI,BX 
 0135  56                       	PUSH	SI		;PUT RETURN ADDRESS BACK 
 0136  53                       	PUSH	BX		;PUT THE TEXT POINTER BACK 
 0137  51                       	PUSH	CX		;SAVE THE LOOKS 
 0138  A0 0000 E                	MOV	AL,BYTE PTR VALTYP	;GET LENGTH OF SYMBOL TABLE ENTRY 
 013B  8A E8                    	MOV	CH,AL		;[B]=VALTYP 
 013D  A0 0000 E                	MOV	AL,BYTE PTR NAMCNT	;INCLUDE EXTRA CHARACTERS IN SIZE 
 0140  02 C5                    	ADD	AL,CH 
 0142  FE C0                    	INC	AL		;AS WELL AS THE EXTRA CHARACTER COUNT 
 0144  8A C8                    	MOV	CL,AL		;[B,C]=LENGTH OF THIS VARIABLE 
 0146  51                       	PUSH	CX		;SAVE THE VALTYP ON THE STACK 
 0147  B5 00                    	MOV	CH,LOW 0	;[B]=0 
 0149  41                       	INC	CX		;MAKE THE LENGTH INCLUDE 
                                				;THE LOOKS TOO 
 014A  41                       	INC	CX 
 014B  41                       	INC	CX 
 014C  8B 1E 0000 E             	MOV	BX,STREND	;THE CURRENT END OF STORAGE 
 0150  53                       	PUSH	BX		;SAVE THIS # 
 0151  03 D9                    	ADD	BX,CX		;ADD ON THE AMOUNT OF SPACE 
                                				;EXTRA NOW BEING USED 
 0153  59                       	POP	CX		;POP OFF HIGH ADDRESS TO MOVE 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Page     1-13
DIMENSION & VARIABLE SEARCHING - PTRGET                     

 0154  53                       	PUSH	BX		;SAVE NEW CANDIDATE FOR STREND 
 0155  E8 0000 E                	CALL	BLTU		;BLOCK TRANSFER AND MAKE SURE 
                                				;WE ARE NOT OVERFLOWING THE 
                                				;STACK SPACE 
 0158  5B                       	POP	BX		;[H,L]=NEW STREND 
 0159  89 1E 0000 E             	MOV	STREND,BX	;STORE SINCE WAS OK 
                                				;THERE WAS ROOM, AND BLOCK TRANSFER 
                                				;WAS DONE, SO UPDATE POINTERS 
 015D  8B D9                    	MOV	BX,CX		;GET BACK [H,L] POINTING AT THE END 
                                				;OF THE NEW VARIABLE 
 015F  89 1E 0000 E             	MOV	ARYTAB,BX	;UPDATE THE ARRAY TABLE POINTER 
 0163  4B                       ZEROER:	DEC	BX		;[H,L] IS RETURNED POINTING TO THE 
 0164  C6 07 00                 	MOV	BYTE PTR [BX],LOW 0	;END OF THE VARIABLE SO WE 
 0167  3B DA                    	CMP	BX,DX		;ZERO BACKWARDS TO [D,E] WHICH 
 0169  75 F8                    	JNZ	SHORT ZEROER	;POINTS TO THE START OF THE VARIABLE 
 016B  5A                       	POP	DX		;[E]=VALTYP 
 016C  88 37                    	MOV	BYTE PTR [BX],DH	;VALTYP IS IN HIGH ORDER 
 016E  43                       	INC	BX 
 016F  5A                       	POP	DX 
 0170  89 17                    	MOV	[BX],DX 
 0172  43                       	INC	BX		;PUT DESCRIPTION OF THIS VARIABLE 
                                				;INTO MEMORY 
 0173  E8 0351 R                	CALL	NPUTSB		;SAVE THE EXTRA CHARACTERS IN THE NAME 
 0176  87 DA                    	XCHG	BX,DX		;POINTER AT VARIABLE INTO [D,E] 
 0178  42                       	INC	DX		;POINT AT THE VALUE 
 0179  5B                       	POP	BX		;RESTORE THE TEXT POINTER 
 017A  C3                       	RET 
                                ; 
                                ; MAKE ALL TYPES ZERO AND SKIP RETURN 
                                ; 
 017B                           FINZER: 
                                	EXTRN	$DZERO:NEAR 
 017B  E8 0000 E                	CALL	$DZERO		;Really clear the entire FAC since 
                                				;the 8086 math package doesn't 
                                				;treat a number as zero just because 
                                				;its exponent is zero like to 8080 
                                				;math package does. 
 017E  E8 0000 E                	CALL	GETYPR		;SEE IF ITS A STRING 
 0181  75 07                    	JNZ	SHORT POPHR2	;IF NOT, DONE 
 0183  BB 0000 E                	MOV	BX,OFFSET DSEGZ	;ZERO IN THE DATA SEGMENT 
 0186  89 1E 0000 E             	MOV	FACLO,BX	;POINTING AT A ZERO 
 018A  5B                       POPHR2:	POP	BX		;GET THE TEXT POINTER 
 018B  C3                       	RET			;RETURN FROM EVAL 
                                 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Page     1-14
DIMENSION & VARIABLE SEARCHING - PTRGET                     

                                	PAGE 
                                	SUBTTL  MULTIPLE DIMENSION CODE 
                                 
                                ; 
                                ; FORMAT OF ARRAYS IN CORE 
                                ; 
                                ; DESCRIPTOR 
                                ;       LOW BYTE = SECOND CHARCTER (200 BIT IS STRING FLAG) 
                                ;       HIGH BYTE = FIRST CHARACTER 
                                ; LENGTH OF ARRAY IN CORE IN BYTES (DOES NOT INCLUDE DESCRIPTOR) 
                                ; NUMBER OF DIMENSIONS 1 BYTE 
                                ; FOR EACH DIMENSION STARTING WITH THE FIRST A LIST 
                                ; (2 BYTES EACH) OF THE MAX INDICE+1 
                                ; THE VALUES 
                                ; 
 018C  53                       ISARY:	PUSH	BX		;SAVE DIMFLG AND VALTYP FOR RECURSION 
 018D  8B 1E 0000 E             	MOV	BX,DIMFLG 
 0191  5E                       	POP	SI		;XTHL 
 0192  87 F3                    	XCHG	SI,BX 
 0194  56                       	PUSH	SI		;TEXT POINTER BACK INTO [H,L] 
 0195  8A F0                    	MOV	DH,AL		;SET # DIMENSIONS =0 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	SARYFL:WORD 
 0000                           DSEG	ENDS 
 0197  FE C8                    	DEC	AL		;SARYFL=^O377 - tells CALL that array element 
 0199  A2 0000 E                	MOV	BYTE PTR SARYFL,AL	;has been scanned. 
 019C  52                       INDLOP:	PUSH	DX		;SAVE NUMBER OF DIMENSIONS 
 019D  51                       	PUSH	CX		;SAVE LOOKS 
 019E  BA 0000 E                	MOV	DX,OFFSET NAMCNT	;POINT AT THE AREA TO SAVE 
 01A1  8B F2                    	MOV	SI,DX 
 01A3  8A 04                    	MOV	AL,[SI]		;GET LENGTH 
 01A5  0A C0                    	OR	AL,AL		;IS IT ZERO? 
 01A7  74 3D                    	JZ	SHORT SHTNAM	;YES, SHORT NAME 
 01A9  87 DA                    	XCHG	BX,DX		;SAVE THE TEXT POINTER IN [D,E] 
 01AB  04 02                    	ADD	AL,LOW 2	;WE WANT SMALLEST INT .GE.(NAMCNT+1)/2 
 01AD  D0 D8                    	RCR	AL,1 
 01AF  8A C8                    	MOV	CL,AL		;SEE IF THERE IS ROOM TO SAVE THIS STUFF 
 01B1  E8 0000 E                	CALL	GETSTK 
 01B4  8A C1                    	MOV	AL,CL		;RESTORE COUNT OF PUSHES 
 01B6  8A 0F                    LPPSNM:	MOV	CL,BYTE PTR [BX]	;GET VALUES TO PUSH 
 01B8  43                       	INC	BX 
 01B9  8A 2F                    	MOV	CH,BYTE PTR [BX] 
 01BB  43                       	INC	BX 
 01BC  51                       	PUSH	CX		;AND DO THE SAVE 
 01BD  FE C8                    	DEC	AL		;[A] TIMES 
 01BF  75 F5                    	JNZ	SHORT LPPSNM 
 01C1  53                       	PUSH	BX		;SAVE THE ADDRESS TO STORE TO 
 01C2  A0 0000 E                	MOV	AL,BYTE PTR NAMCNT	;SAVE THE NUMBER OF BYTES FOR A COUNT 
 01C5  50                       	PUSH	AX 
 01C6  87 DA                    	XCHG	BX,DX		;RESTORE THE TEXT POINTER 
 01C8  E8 0000 E                	CALL	INTIDX		;EVALUATE INDICE INTO [D,E] 
 01CB  58                       	POP	AX		;COUNT TELLING HOW MUCH TO RESTORE 
 01CC  89 1E 0000 E             	MOV	NAMTMP,BX	;SAVE THE TEXT POINTER 
 01D0  5B                       	POP	BX		;THE PLACE TO RESTORE TO 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Page     1-15
MULTIPLE DIMENSION CODE                                     

 01D1  04 02                    	ADD	AL,LOW 2	;CALCULATE BYTE POPS AGAIN 
 01D3  D0 D8                    	RCR	AL,1 
 01D5  59                       LPLNAM:	POP	CX 
 01D6  4B                       	DEC	BX 
 01D7  88 2F                    	MOV	BYTE PTR [BX],CH 
 01D9  4B                       	DEC	BX 
 01DA  88 0F                    	MOV	BYTE PTR [BX],CL 
 01DC  FE C8                    	DEC	AL		;LOOP [A] TIMES POPING NAME BACK INTO NAMBUF 
 01DE  75 F5                    	JNZ	SHORT LPLNAM 
 01E0  8B 1E 0000 E             	MOV	BX,NAMTMP 
 01E4  EB 08                    	JMP	SHORT LNGNAM	;WAS LONG ONE 
 01E6  E8 0000 E                SHTNAM:	CALL	INTIDX		;EVALUATE IT 
 01E9  32 C0                    	XOR	AL,AL		;MAKE SURE NAMCNT=0 
 01EB  A2 0000 E                	MOV	BYTE PTR NAMCNT,AL 
 01EE                           LNGNAM: 
 01EE  A0 0000 E                	MOV	AL,BYTE PTR OPTVAL	;SEE WHAT THE OPTION BASE IS 
 01F1  0A C0                    	OR	AL,AL 
 01F3  74 08                    	JZ	SHORT OPTB0	;IF BASE 0 DO NOTHING 
 01F5  0B D2                    	OR	DX,DX		;CHECK FOR 0 SUBSCRIPT 
                                				;WHICH IS ILLEGAL IN BASE 1 
 01F7  75 03                    	JNZ	SHORT ??L006 
 01F9  EB 62 90                 	JMP	BSERR 
 01FC                           ??L006: 
 01FC  4A                       	DEC	DX		;ADJUST SUBSCRIPT 
 01FD                           OPTB0: 
 01FD  59                       	POP	CX		;POP OFF THE LOOKS 
 01FE  58                       	POP	AX		; POP PSW 
 01FF  86 C4                    	XCHG	AL,AH 
 0201  9E                       	SAHF			;[A] = NUMBER OF DIMENSIONS SO FAR 
 0202  87 DA                    	XCHG	BX,DX		;[D,E]=TEXT POINTER 
                                				;[H,L]=INDICE 
 0204  5E                       	POP	SI		;XTHL 
 0205  87 F3                    	XCHG	SI,BX 
 0207  56                       	PUSH	SI		;PUT THE INDICE ON THE STACK 
                                				;[H,L]=VALTYP & DIMFLG 
 0208  53                       	PUSH	BX		;RESAVE VALTYP AND DIMFLG 
 0209  87 DA                    	XCHG	BX,DX		;[H,L]=TEXT POINTER 
 020B  FE C0                    	INC	AL		;INCREMENT # OF DIMENSIONS 
 020D  8A F0                    	MOV	DH,AL		;[D]=NUMBER OF DIMENSIONS 
 020F  8A 07                    	MOV	AL,BYTE PTR [BX]	;GET TERMINATING CHARACTER 
 0211  3C 2C                    	CMP	AL,LOW 44	;A COMMA SO MORE INDICES FOLLOW? 
 0213  75 02                    	JNZ	SHORT ??L007 
 0215  EB 85                    	JMP	INDLOP		;IF SO, READ MORE 
 0217                           ??L007: 
 0217  3C 29                    	CMP	AL,LOW ")"	;EXPECTED TERMINATOR? 
 0219  74 07                    	JZ	SHORT DOCHRT	;DO CHRGET FOR NEXT ONE 
 021B  3C 5D                    	CMP	AL,LOW "]"	;BRACKET? 
 021D  74 03                    	JZ	SHORT ??L008 
 021F  E9 0000 E                	JMP	SNERR		;NO, GIVE ERROR 
 0222                           ??L008: 
 0222  E8 0000 E                DOCHRT:	CALL	CHRGTR 
 0225  89 1E 0000 E             SUBSOK:	MOV	TEMP2,BX	;SAVE THE TEXT POINTER 
 0229  5B                       	POP	BX		;[H,L]= VALTYP & DIMFLG 
 022A  89 1E 0000 E             	MOV	DIMFLG,BX	;SAVE VALTYP AND DIMFLG 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Page     1-16
MULTIPLE DIMENSION CODE                                     

 022E  B2 00                    	MOV	DL,LOW 0	;WHEN [D,E] IS POPED INTO PSW, WE 
                                				;DON'T WANT THE ZERO FLAG TO BE SET, SO 
                                				;"ERASE" WILL HAVE A UNIQUE CONDITION 
 0230  52                       	PUSH	DX		;SAVE NUMBER OF DIMENSIONS 
                                	PUBLIC	ERSFIN 
 0231  EB 07                    	JMP	SHORT LOPFD0 
 0233  53                       ERSFIN:	PUSH	BX		;SAVE THE TEXT POINTER 
 0234  9F                       	LAHF			; PUSH PSW 
 0235  86 C4                    	XCHG	AL,AH 
 0237  50                       	PUSH	AX 
 0238  86 C4                    	XCHG	AL,AH		;SAVE A DUMMY NUMBER OF DIMENSIONS 
                                				;WITH THE ZERO FLAG SET 
 023A                           LOPFD0: 
                                ; 
                                ; AT THIS POINT [B,C]=LOOKS. THE TEXT POINTER IS IN TEMP2. 
                                ; THE INDICES ARE ALL ON THE STACK, FOLLOWED BY THE NUMBER OF DIMENSIONS. 
                                ; 
 023A  8B 1E 0000 E             	MOV	BX,ARYTAB	;[H,L]=PLACE TO START THE SEARCH 
 023E  E9 0000 E                	JMP	LOPFD1 
                                	PUBLIC	ARYEXT 
 0241                           ARYEXT: 
                                				;AND TRY AGAIN 
 0241  A0 0000 E                	MOV	AL,BYTE PTR DIMFLG	;SEE IF CALLED BY "DIM" 
 0244  0A C0                    	OR	AL,AL		;ZERO MEANS NO 
                                	EXTRN	DDERR:NEAR 
 0246  74 03                    	JZ	SHORT ??L009 
 0248  E9 0000 E                	JMP	DDERR		;PRESERVE [D,E], AND DISPATCH TO 
 024B                           ??L009: 
                                				;"REDIMENSIONED VARIABLE" ERROR 
                                				;IF ITS "DIM" CALLING PTRGET 
                                ; 
                                ; TEMP2=THE TEXT POINTER 
                                ; WE HAVE LOCATED THE VARIABLE WE WERE LOOKING FOR 
                                ; AT THIS POINT [H,L] POINTS BEYOND THE SIZE TO THE NUMBER OF DIMENSIONS 
                                ; THE INDICES ARE ON THE STACK FOLLOWED BY THE NUMBER OF DIMENSIONS 
                                ; 
 024B  58                       	POP	AX		; POP PSW 
 024C  86 C4                    	XCHG	AL,AH 
 024E  9E                       	SAHF			;[A]=NUMBER OF DIMENSIONS 
 024F  8B CB                    	MOV	CX,BX		;SET [B,C] TO POINT AT NUMBER OF DIMENSIONS 
 0251  75 03                    	JNZ	SHORT ??L010 
 0253  E9 0000 E                	JMP	POPHRT		;"ERASE" IS DONE AT THIS POINT, SO RETURN 
 0256                           ??L010: 
                                				;TO DO THE ACTUAL ERASURE 
 0256  2A 07                    	SUB	AL,BYTE PTR [BX]	;MAKE SURE THE NUMBER GIVEN NOW AND 
                                				;AND WHEN THE ARRAY WAS SET UP ARE THE 
                                				;SAME 
 0258  75 03                    	JNZ	SHORT ??L011 
 025A  E9 02F5 R                	JMP	GETDEF		;JUMP OFF AND READ 
 025D                           ??L011: 
                                				;THE INDICES.... 
                                 
 025D  BA 0000 E                BSERR:	MOV	DX,OFFSET ERRBS	;"SUBSCRIPT OUT OF RANGE" 
 0260  E9 0000 E                	JMP	ERROR 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Page     1-17
MULTIPLE DIMENSION CODE                                     

                                ; 
                                ; HERE WHEN VARIABLE IS NOT FOUND IN THE ARRAY TABLE 
                                ; 
                                ; BUILDING AN ENTRY: 
                                ; 
                                ;       PUT DOWN THE DESCRIPTOR 
                                ;       SETUP NUMER OF DIMENSIONS 
                                ;       MAKE SURE THERE IS ROOM FOR THE NEW ENTRY 
                                ;       REMEMBER VARPTR 
                                ;       TALLY=4 (VALTYP FOR THE EXTENDED) 
                                ;       SKIP 2 LOCS FOR LATER FILL IN -- THE SIZE 
                                ; LOOP: GET AN INDICE 
                                ;       PUT NUMBER +1 DOWN AT VARPTR AND INCREMENT VARPTR 
                                ;       TALLY= TALLY * NUMBER+1 
                                ;       DECREMENT NUMBER-DIMS 
                                ;       JNZ     LOOP 
                                ;       CALL REASON WITH [H,L] REFLECTING LAST LOC OF VARIABLE 
                                ;       UPDATE STREND 
                                ;       ZERO BACKWARDS 
                                ;       MAKE TALLY INCLUDE MAXDIMS 
                                ;       PUT DOWN TALLY 
                                ;       IF CALLED BY DIMENSION, RETURN 
                                ;       OTHERWISE INDEX INTO THE VARIABLE AS IF IT 
                                ;       WERE FOUND ON THE INITIAL SEARCH 
                                ; 
 0263                           NOTFDD: 
 0263  A0 0000 E                	MOV	AL,BYTE PTR VALTYP	;GET VALTYP OF NEW VAR 
 0266  88 07                    	MOV	BYTE PTR [BX],AL	;PUT DOWN THE VARIABLE TYPE 
 0268  43                       	INC	BX 
 0269  8A D0                    	MOV	DL,AL 
 026B  B6 00                    	MOV	DH,LOW 0	;[D,E]=SIZE OF ONE VALUE (VALTYP) 
 026D  58                       	POP	AX		; POP PSW 
 026E  86 C4                    	XCHG	AL,AH 
 0270  9E                       	SAHF			;[A]=NUMBER OF DIMENSIONS 
 0271  75 03                    	JNZ	SHORT ??L012 
 0273  E9 0340 R                	JMP	PTRRNZ		;CALLED BY CHAIN, JUST RETURN NON-ZERO 
 0276                           ??L012: 
 0276  88 0F                    	MOV	BYTE PTR [BX],CL	;PUT DOWN THE DESCRIPTOR 
 0278  43                       	INC	BX 
 0279  88 2F                    	MOV	BYTE PTR [BX],CH 
 027B  E8 0351 R                	CALL	NPUTSB		;STORE THE EXTRA CHARACTERS IN THE TABLE 
 027E  43                       	INC	BX 
 027F  8A C8                    	MOV	CL,AL		;[C]=NUMBER OF TWO BYTE ENTRIES NEEDED 
                                				;TO STORE THE SIZE OF EACH DIMENSION 
 0281  E8 0000 E                	CALL	GETSTK		;GET SPACE FOR DIMENSION ENTRIES 
 0284  43                       	INC	BX		;SKIP OVER THE SIZE LOCATIONS 
 0285  43                       	INC	BX 
 0286  89 1E 0000 E             	MOV	TEMP3,BX	;SAVE THE LOCATION TO PUT THE SIZE 
                                				;IN -- POINTS AT THE NUMBER OF DIMENSIONS 
 028A  88 0F                    	MOV	BYTE PTR [BX],CL	;STORE THE NUMBER OF DIMENSIONS 
 028C  43                       	INC	BX 
 028D  A0 0000 E                	MOV	AL,BYTE PTR DIMFLG	;CALLED BY DIMENSION? 
 0290  D0 D0                    	RCL	AL,1		;SET CARRY IF SO 
 0292  8A C1                    	MOV	AL,CL		;[A]=NUMBER OF DIMENSIONS 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Page     1-18
MULTIPLE DIMENSION CODE                                     

 0294                           LOPPTA: 
 0294  72 0F                    	JB	SHORT POPDIM 
 0296  9F                       	LAHF 
 0297  50                       	PUSH	AX 
 0298  A0 0000 E                	MOV	AL,BYTE PTR OPTVAL	;GET THE OPTION BASE 
 029B  34 0B                    	XOR	AL,LOW 11	;MAP 0 TO 11 AND 1 TO 10 
 029D  8A C8                    	MOV	CL,AL		;[B,C]=DEFAULT DIMENSION 
 029F  B5 00                    	MOV	CH,LOW 0 
 02A1  58                       	POP	AX 
 02A2  9E                       	SAHF 
 02A3  73 04                    	JAE	SHORT NOTDIM	;DEFAULT DIMENSIONS TO TEN 
 02A5  59                       POPDIM:	POP	CX		;POP OFF AN INDICE INTO [B,C] 
 02A6  9F                       	LAHF 
 02A7  41                       	INC	CX		;ADD ONE TO IT FOR THE ZERO ENTRY 
 02A8  9E                       	SAHF 
 02A9  88 0F                    NOTDIM:	MOV	BYTE PTR [BX],CL	;PUT THE MAXIMUM DOWN 
 02AB  9F                       	LAHF 
 02AC  50                       	PUSH	AX		;SAVE THE NUMBER OF DIMENSIONS AND 
                                				;DIMFLG (CARRY) 
 02AD  43                       	INC	BX 
 02AE  88 2F                    	MOV	BYTE PTR [BX],CH 
 02B0  43                       	INC	BX 
 02B1  E8 0000 E                	CALL	UMULT		;MULTIPLY [B,C]=NEWMAX BY CURTOL=[D,E] 
 02B4  58                       	POP	AX 
 02B5  9E                       	SAHF			;GET THE NUMBER OF DIMENSIONS AND 
                                				;DIMFLG (CARRY) BACK 
 02B6  FE C8                    	DEC	AL		;DECREMENT THE NUMBER OF DIMENSIONS LEFT 
 02B8  75 DA                    	JNZ	SHORT LOPPTA	;HANDLE THE OTHER INDICES 
 02BA  9F                       	LAHF 
 02BB  50                       	PUSH	AX		;SAVE DIMFLG (CARRY) 
 02BC  8A EE                    	MOV	CH,DH		;[B,C]=SIZE 
 02BE  8A CA                    	MOV	CL,DL 
 02C0  87 DA                    	XCHG	BX,DX		;[D,E]=START OF VALUES 
 02C2  03 DA                    	ADD	BX,DX		;[H,L]=END OF VALUES 
 02C4  73 03                    	JAE	SHORT ??L013 
 02C6  E9 0000 E                	JMP	OMERR		;OUT OF MEMORY POINTER BEING GENERATED? 
 02C9                           ??L013: 
 02C9  E8 0000 E                	CALL	REASON		;SEE IF THERE IS ROOM FOR THE VALUES 
 02CC  89 1E 0000 E             	MOV	STREND,BX	;UPDATE THE END OF STORAGE 
 02D0  4B                       ZERITA:	DEC	BX		;ZERO THE NEW ARRAY 
 02D1  C6 07 00                 	MOV	BYTE PTR [BX],LOW 0 
 02D4  3B DA                    	CMP	BX,DX		;BACK AT THE BEGINNING? 
 02D6  75 F8                    	JNZ	SHORT ZERITA	;NO, ZERO MORE 
 02D8  32 C0                    	XOR	AL,AL		;MAKE SURE [AL]=0 
 02DA  41                       	INC	CX		;ADD ONE TO THE SIZE TO INCLUDE 
                                				;THE BYTE FOR THE NUMBER OF DIMENSIONS 
 02DB  8A F0                    	MOV	DH,AL		;[D]=ZERO 
 02DD  8B 1E 0000 E             	MOV	BX,TEMP3	;GET A POINTER AT THE NUMBER OF DIMENSIONS 
 02E1  8A 17                    	MOV	DL,BYTE PTR [BX]	;[E]=NUMBER OF DIMENSIONS 
 02E3  87 DA                    	XCHG	BX,DX		;[H,L]=NUMBER OF DIMENSIONS 
 02E5  03 DB                    	ADD	BX,BX		;[H,L]=NUMBER OF DIMENSIONS TIMES TWO 
 02E7  03 D9                    	ADD	BX,CX		;ADD ON THE SIZE 
                                				;TO GET THE TOTAL NUMBER OF BYTES USED 
 02E9  87 DA                    	XCHG	BX,DX		;[D,E]=TOTAL SIZE 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Page     1-19
MULTIPLE DIMENSION CODE                                     

 02EB  4B                       	DEC	BX		;BACK UP TO POINT TO LOCATION TO PUT 
 02EC  4B                       	DEC	BX		;THE SIZE OF THE ARRAY IN BYTES IN. 
 02ED  89 17                    	MOV	[BX],DX 
 02EF  43                       	INC	BX 
 02F0  43                       	INC	BX		;PUT DOWN THE SIZE 
 02F1  58                       	POP	AX 
 02F2  9E                       	SAHF			;GET BACK DIMFLG (CARRY) AND SET [A]=0 
 02F3  72 46                    	JB	SHORT FINNOW 
                                ; 
                                ; AT THIS POINT [H,L] POINTS BEYOND THE SIZE TO THE NUMBER OF DIMENSIONS 
                                ; STRATEGY: 
                                ;       NUMDIM=NUMBER OF DIMENSIONS 
                                ;       CURTOL=0 
                                ; INLPNM:GET A NEW INDICE 
                                ;       POP NEW MAX INTO CURMAX 
                                ;       MAKE SURE INDICE IS NOT TOO BIG 
                                ;       MUTLIPLY CURTOL BY CURMAX 
                                ;       ADD INDICE TO CURTOL 
                                ;       NUMDIM=NUMDIM-1 
                                ;       JNZ     INLPNM 
                                ;       USE CURTOL*4 (VALTYP FOR EXTENDED) AS OFFSET 
                                ; 
 02F5  8A E8                    GETDEF:	MOV	CH,AL		;[B,C]=CURTOL=ZERO 
 02F7  8A C8                    	MOV	CL,AL 
 02F9  8A 07                    	MOV	AL,BYTE PTR [BX]	;[A]=NUMBER OF DIMENSIONS 
 02FB  43                       	INC	BX		;POINT PAST THE NUMBER OF DIMENSIONS 
 02FC  B6                       	DB	266O	; SKIP	;"MVI D," AROUND THE NEXT BYTE 
 02FD  5B                       INLPNM:	POP	BX		;[H,L]= POINTER INTO VARIABLE ENTRY 
 02FE  8B 17                    	MOV	DX,[BX]		;[D,E]=MAXIMUM FOR THE CURRENT INDICE 
 0300  43                       	INC	BX 
 0301  43                       	INC	BX 
 0302  5E                       	POP	SI		;XTHL 
 0303  87 F3                    	XCHG	SI,BX 
 0305  56                       	PUSH	SI		;[H,L]=CURRENT INDICE 
                                				;POINTER INTO THE VARIABLE GOES ON THE STACK 
 0306  50                       	PUSH	AX		;SAVE THE NUMBER OF DIMENSIONS 
 0307  3B DA                    	CMP	BX,DX		;SEE IF THE CURRENT INDICE IS TOO BIG 
 0309  72 03                    	JNAE	SHORT ??L014 
 030B  E9 025D R                	JMP	BSERR		;IF SO "BAD SUBSCRIPT" ERROR 
 030E                           ??L014: 
 030E  E8 0000 E                	CALL	UMULT		;CURTOL=CURTOL*CURRENT MAXIMUM 
 0311  03 DA                    	ADD	BX,DX		;ADD THE INDICE TO CURTOL 
 0313  58                       	POP	AX		;GET THE NUMBER OF DIMENSIONS IN [A] 
 0314  FE C8                    	DEC	AL		;SEE IF ALL THE INDICES HAVE BEEN PROCESSED 
 0316  8B CB                    	MOV	CX,BX		;[B,C]=CURTOL IN CASE WE LOOP BACK 
 0318  75 E3                    	JNZ	SHORT INLPNM	;PROCESS THE REST OF THE INDICES 
 031A  A0 0000 E                	MOV	AL,BYTE PTR VALTYP	;SEE HOW BIG THE VALUES ARE 
                                				;AND MULTIPLY BY THAT SIZE 
 031D  8B CB                    	MOV	CX,BX		;SAVE THE ORIGINAL VALUE FOR MULTIPLYING 
                                				;BY THREE 
 031F  03 DB                    	ADD	BX,BX		;MULTIPLY BY TWO AT LEAST 
 0321  2C 04                    	SUB	AL,LOW 4	;FOR INTEGERS AND STRINGS 
                                				;NO MORE MULTIPLYING BY TWO 
 0323  72 08                    	JB	SHORT SMLVAL 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Page     1-20
MULTIPLE DIMENSION CODE                                     

 0325  03 DB                    	ADD	BX,BX		;NOW MULTIPLIED BY FOUR 
 0327  0A C0                    	OR	AL,AL		;RE-GEN CONDITION CODES 
 0329  74 0B                    	JZ	SHORT DONMUL	;IF SINGLE ALL DONE 
 032B  03 DB                    	ADD	BX,BX		;BY EIGHT FOR DOUBLES 
 032D                           SMLVAL: 
 032D  0A C0                    	OR	AL,AL		;FIX CC'S FOR Z-80 
 032F  7A 03                    	JP	SHORT ??L015 
 0331  EB 03 90                 	JMP	DONMUL		;FOR STRINGS 
 0334                           ??L015: 
 0334  03 D9                    	ADD	BX,CX		;ADD IN THE ORIGINAL 
 0336                           DONMUL: 
 0336  59                       	POP	CX		;POP OFF THE ADDRESS OF WHERE THE VALUES 
                                				;BEGIN 
 0337  03 D9                    	ADD	BX,CX		;ADD IT ONTO CURTOL TO GET THE 
                                				;PLACE THE VALUE IS STORED 
 0339  87 DA                    	XCHG	BX,DX		;RETURN THE POINTER IN [D,E] 
 033B  8B 1E 0000 E             FINNOW:	MOV	BX,TEMP2	;REGET THE TEXT POINTER 
 033F  C3                       	RET 
 0340  F9                       PTRRNZ:	STC			;RETURN WITH NON-ZERO IN [A] 
 0341  1A C0                    	SBB	AL,AL		;AND CONDITION CODES SET 
 0343  5B                       	POP	BX		;RESTORE TEST POINTER 
 0344  C3                       	RET 
                                 
                                ; 
                                ; LONG VARIABLE NAME SUBROUTINES. AFTER THE NORMAL 2 CHARACTER NAME 
                                ; THE COUNT OF ADDITIONAL CHARACTERS IS STORED. FOLLOWING THIS 
                                ; COMES THE CHARACTFRS IN ORDER WITH THE HIGH BIT TURNED ON SO A BACKWARD 
                                ; SCAN IS POSSIBLE 
                                ; 
                                	PUBLIC	IADAHL 
 0345  8A 07                    IADAHL:	MOV	AL,BYTE PTR [BX]	;GET THE CHARACTER COUNT 
 0347  43                       	INC	BX 
 0348  51                       ADDAHL:	PUSH	CX		;ADD [A] TO [H,L] 
 0349  B5 00                    	MOV	CH,LOW 0 
 034B  8A C8                    	MOV	CL,AL 
 034D  03 D9                    	ADD	BX,CX 
 034F  59                       	POP	CX		;RESTORE THE SAVED [B,C] 
 0350  C3                       	RET 
 0351  51                       NPUTSB:	PUSH	CX		;THIS ROUTINE STORE THE "LONG" NAME AT [H,L] 
 0352  52                       	PUSH	DX 
 0353  9F                       	LAHF 
 0354  50                       	PUSH	AX 
 0355  BA 0000 E                	MOV	DX,OFFSET NAMCNT	;POINT AT DATA TO SAVE 
 0358  8B F2                    	MOV	SI,DX 
 035A  8A 04                    	MOV	AL,[SI]		;GET THE COUNT 
 035C  8A E8                    	MOV	CH,AL 
 035E  FE C5                    	INC	CH		;[B]= NUMBER OF BYTES TO SAVE 
 0360  8B F2                    SLPLNG:	MOV	SI,DX 
 0362  8A 04                    	MOV	AL,[SI]		;FETCH STORE VALUE 
 0364  42                       	INC	DX 
 0365  43                       	INC	BX		;MOVE UP TO STORE NAME INTO TABLE 
 0366  88 07                    	MOV	BYTE PTR [BX],AL	;DO THE STORE 
 0368  FE CD                    	DEC	CH		;AND REPEAT [B] TIMES 
 036A  75 F4                    	JNZ	SHORT SLPLNG	;FOR THE COUNT AND DATA 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Page     1-21
MULTIPLE DIMENSION CODE                                     

 036C  58                       	POP	AX 
 036D  9E                       	SAHF 
 036E  5A                       	POP	DX 
 036F  59                       	POP	CX 
 0370  C3                       	RET 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Page     1-22
MULTIPLE DIMENSION CODE                                     

                                	PAGE 
 0371                           CSEG	ENDS 
                                	END 

Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Symbols-1
                                                             

Macros:

		N a m e			Lines

ACRLF  . . . . . . . . . . . . .  	   2
ADR  . . . . . . . . . . . . . .  	   1
CALLOS . . . . . . . . . . . . .  	   1
CHRGET . . . . . . . . . . . . .  	   1
COMPAR . . . . . . . . . . . . .  	   2
DBGBRK . . . . . . . . . . . . .  	   1
DC . . . . . . . . . . . . . . .  	   6
DJNZ . . . . . . . . . . . . . .  	   2
FSIGN  . . . . . . . . . . . . .  	   1
GETYPE . . . . . . . . . . . . .  	   1
INS86  . . . . . . . . . . . . .  	  13
INST . . . . . . . . . . . . . .  	   1
LDDR . . . . . . . . . . . . . .  	   8
LDIR . . . . . . . . . . . . . .  	   8
MOVRI  . . . . . . . . . . . . .  	   6
OUTCHR . . . . . . . . . . . . .  	   1
POPR . . . . . . . . . . . . . .  	   2
PUSHM  . . . . . . . . . . . . .  	   5
PUSHR  . . . . . . . . . . . . .  	   2
SYNCHK . . . . . . . . . . . . .  	   2

Segments and Groups:

                N a m e         	Size	Align	Combine Class

CSEG . . . . . . . . . . . . . .  	0371	PARA	PUBLIC	'CODESG'
DSEG . . . . . . . . . . . . . .  	0000	PARA	PUBLIC	'DATASG'

Symbols:            

                N a m e         	Type	Value	Attr         

ADDAHL . . . . . . . . . . . . .  	L NEAR	0348	CSEG
ALTAIR . . . . . . . . . . . . .  	Number	0000	
ANSI . . . . . . . . . . . . . .  	Number	0001	
ARYEXT . . . . . . . . . . . . .  	L NEAR	0241	CSEG	Global
ARYTA2 . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
ARYTAB . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External

BASDEB . . . . . . . . . . . . .  	Number	0000	
BEEPSW . . . . . . . . . . . . .  	Number	0001	
BINCSW . . . . . . . . . . . . .  	Number	0000	
BLODSW . . . . . . . . . . . . .  	Number	0001	
BLTU . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
BSERR  . . . . . . . . . . . . .  	L NEAR	025D	CSEG	Global
BUFLEN . . . . . . . . . . . . .  	Number	00FF	

CASSW  . . . . . . . . . . . . .  	Number	0000	
CHRGTR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
CHSEAT . . . . . . . . . . . . .  	Number	0001	
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Symbols-2
                                                             

CLMWID . . . . . . . . . . . . .  	Number	000E	
CMPUTN . . . . . . . . . . . . .  	Number	0000	
COMMNT . . . . . . . . . . . . .  	Number	0000	
CONSSW . . . . . . . . . . . . .  	Number	0001	
CONTO  . . . . . . . . . . . . .  	Number	000F	
CONTRO . . . . . . . . . . . . .  	Number	0001	
CPM  . . . . . . . . . . . . . .  	Number	0001	
CPM110 . . . . . . . . . . . . .  	Number	0000	
CPM2 . . . . . . . . . . . . . .  	Number	0001	
CPM86  . . . . . . . . . . . . .  	Number	0000	
CPMA75 . . . . . . . . . . . . .  	Number	0000	
CPMADD . . . . . . . . . . . . .  	Number	0000	
CPMCON . . . . . . . . . . . . .  	Number	0000	
CPMLIF . . . . . . . . . . . . .  	Number	0000	
CPMMDS . . . . . . . . . . . . .  	Number	0000	
CPMPER . . . . . . . . . . . . .  	Number	0000	
CPMRSH . . . . . . . . . . . . .  	Number	0000	
CPMSBC . . . . . . . . . . . . .  	Number	0000	
CPMSER . . . . . . . . . . . . .  	Number	0000	
CRONLY . . . . . . . . . . . . .  	Number	0000	

DATPSC . . . . . . . . . . . . .  	Number	0080	
DBLCHR . . . . . . . . . . . . .  	Number	0000	
DBLTRN . . . . . . . . . . . . .  	Number	0000	
DCOMPR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
DDERR  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
DEBUG  . . . . . . . . . . . . .  	Text  		
DEFTBL . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
DIM  . . . . . . . . . . . . . .  	L NEAR	000B	CSEG	Global
DIMCON . . . . . . . . . . . . .  	L NEAR	0000	CSEG
DIMFLG . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
DISK . . . . . . . . . . . . . .  	Number	0001	
DMC  . . . . . . . . . . . . . .  	Number	0000	
DOCHRT . . . . . . . . . . . . .  	L NEAR	0222	CSEG
DONMUL . . . . . . . . . . . . .  	L NEAR	0336	CSEG
DOS  . . . . . . . . . . . . . .  	Number	0000	
DRVPOS . . . . . . . . . . . . .  	Number	0000	
DSEGZ  . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
DUPONT . . . . . . . . . . . . .  	Number	0000	
DYNCOM . . . . . . . . . . . . .  	Number	0001	

EDIT80 . . . . . . . . . . . . .  	Number	0000	
ERRBS  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRDD  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERROR  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERSFIN . . . . . . . . . . . . .  	L NEAR	0233	CSEG	Global
ESCCTL . . . . . . . . . . . . .  	Number	0000	
EXIDY  . . . . . . . . . . . . .  	Number	0000	

FAC  . . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
FACLO  . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
FAST . . . . . . . . . . . . . .  	Number	0001	
FCERR  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FINNOW . . . . . . . . . . . . .  	L NEAR	033B	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Symbols-3
                                                             

FINZER . . . . . . . . . . . . .  	L NEAR	017B	CSEG
FIVDSK . . . . . . . . . . . . .  	Number	0001	
FIVEO  . . . . . . . . . . . . .  	Number	0001	
FIVLPT . . . . . . . . . . . . .  	Number	0001	
FIVMEM . . . . . . . . . . . . .  	Number	0001	
FKEYON . . . . . . . . . . . . .  	Number	0001	

GENBIN . . . . . . . . . . . . .  	Number	0001	
GENDSK . . . . . . . . . . . . .  	Number	0000	
GENIO  . . . . . . . . . . . . .  	Number	0001	
GESBC  . . . . . . . . . . . . .  	Number	0000	
GETDEF . . . . . . . . . . . . .  	L NEAR	02F5	CSEG
GETSTK . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
GETYPR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
GIO86  . . . . . . . . . . . . .  	Number	0001	
GW . . . . . . . . . . . . . . .  	Number	0001	
GWCASS . . . . . . . . . . . . .  	Number	0000	
GWDBUG . . . . . . . . . . . . .  	Number	0000	

HAVTYP . . . . . . . . . . . . .  	L NEAR	00A9	CSEG
HEATH  . . . . . . . . . . . . .  	Number	0000	
HEXOCT . . . . . . . . . . . . .  	Number	0001	
HGHBIT . . . . . . . . . . . . .  	Number	0001	

I8086  . . . . . . . . . . . . .  	Number	0001	
I8251  . . . . . . . . . . . . .  	Number	0000	
IADAHL . . . . . . . . . . . . .  	L NEAR	0345	CSEG	Global
IBMLIK . . . . . . . . . . . . .  	Number	0001	
IBMTOK . . . . . . . . . . . . .  	Number	0001	
INDLOP . . . . . . . . . . . . .  	L NEAR	019C	CSEG
INKEYF . . . . . . . . . . . . .  	Number	0001	
INLADD . . . . . . . . . . . . .  	Number	0000	
INLPNM . . . . . . . . . . . . .  	L NEAR	02FD	CSEG
INSTSW . . . . . . . . . . . . .  	Number	0000	
INTEL  . . . . . . . . . . . . .  	Number	0000	
INTFHW . . . . . . . . . . . . .  	Number	0000	
INTFSW . . . . . . . . . . . . .  	Number	0000	
INTIDX . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
INTLEC . . . . . . . . . . . . .  	Number	0000	
INTROM . . . . . . . . . . . . .  	Number	0000	
ISARY  . . . . . . . . . . . . .  	L NEAR	018C	CSEG
ISC  . . . . . . . . . . . . . .  	Number	0000	
ISIS . . . . . . . . . . . . . .  	Number	0000	
ISLET  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ISLET2 . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ISSEC  . . . . . . . . . . . . .  	L NEAR	003F	CSEG

JISKTN . . . . . . . . . . . . .  	Number	0000	

KANABS . . . . . . . . . . . . .  	Number	0000	
KANJFN . . . . . . . . . . . . .  	Number	0000	
KEYSTA . . . . . . . . . . . . .  	Number	0000	
KILLER . . . . . . . . . . . . .  	Number	0000	

Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Symbols-4
                                                             

LABKEY . . . . . . . . . . . . .  	Number	0001	
LEN2 . . . . . . . . . . . . . .  	Number	0001	
LEN3 . . . . . . . . . . . . . .  	Number	0001	
LENGTH . . . . . . . . . . . . .  	Number	0002	
LINLN  . . . . . . . . . . . . .  	Number	0050	
LISTEN . . . . . . . . . . . . .  	Number	0001	
LNGNAM . . . . . . . . . . . . .  	L NEAR	01EE	CSEG
LNGVAR . . . . . . . . . . . . .  	Number	0001	
LOKHED . . . . . . . . . . . . .  	Number	0000	
LONGI  . . . . . . . . . . . . .  	Number	0000	
LOPFD0 . . . . . . . . . . . . .  	L NEAR	023A	CSEG
LOPFD1 . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
LOPFND . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
LOPPTA . . . . . . . . . . . . .  	L NEAR	0294	CSEG
LPLNAM . . . . . . . . . . . . .  	L NEAR	01D5	CSEG
LPPSNM . . . . . . . . . . . . .  	L NEAR	01B6	CSEG
LPT3 . . . . . . . . . . . . . .  	Number	0000	
LPTLEN . . . . . . . . . . . . .  	Number	0084	
LPTSW  . . . . . . . . . . . . .  	Number	0001	

MDS  . . . . . . . . . . . . . .  	Number	0000	
MDSISS . . . . . . . . . . . . .  	Number	0000	
MEMIMG . . . . . . . . . . . . .  	Number	0001	
MOSTEK . . . . . . . . . . . . .  	Number	0000	
MULSEG . . . . . . . . . . . . .  	Number	0001	

NAMBUF . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
NAMCNT . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
NAMLEN . . . . . . . . . . . . .  	Number	0028	
NAMTMP . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
NASCOM . . . . . . . . . . . . .  	Number	0000	
NATROM . . . . . . . . . . . . .  	Number	0000	
NBANKS . . . . . . . . . . . . .  	Number	0001	
NCRBAS . . . . . . . . . . . . .  	Number	0000	
NCRCAS . . . . . . . . . . . . .  	Number	0000	
NCRDEB . . . . . . . . . . . . .  	Number	0000	
NCRELS . . . . . . . . . . . . .  	Number	0000	
NCRLPT . . . . . . . . . . . . .  	Number	0001	
NECBAS . . . . . . . . . . . . .  	Number	0000	
NECPPC . . . . . . . . . . . . .  	Number	0000	
NMCOMT . . . . . . . . . . . . .  	Number	0002	
NMKEYF . . . . . . . . . . . . .  	Number	000A	
NMKEYT . . . . . . . . . . . . .  	Number	000E	
NMLINE . . . . . . . . . . . . .  	Number	0019	
NMLPT  . . . . . . . . . . . . .  	Number	0003	
NMPENT . . . . . . . . . . . . .  	Number	0001	
NMSTRT . . . . . . . . . . . . .  	Number	0004	
NOARYS . . . . . . . . . . . . .  	L NEAR	00D0	CSEG	Global
NOATDL . . . . . . . . . . . . .  	Number	0000	
NOCTLA . . . . . . . . . . . . .  	Number	0000	
NODOT  . . . . . . . . . . . . .  	Number	0000	
NOEDIT . . . . . . . . . . . . .  	Number	0000	
NOFUNS . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
NOIOS  . . . . . . . . . . . . .  	Number	0000	
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Symbols-5
                                                             

NONULL . . . . . . . . . . . . .  	Number	0000	
NOPEKS . . . . . . . . . . . . .  	Number	0000	
NOROMP . . . . . . . . . . . . .  	Number	0000	
NORUBT . . . . . . . . . . . . .  	Number	0000	
NOSEC  . . . . . . . . . . . . .  	L NEAR	0072	CSEG
NOTDIM . . . . . . . . . . . . .  	L NEAR	02A9	CSEG
NOTFDD . . . . . . . . . . . . .  	L NEAR	0263	CSEG	Global
NOTFNS . . . . . . . . . . . . .  	L NEAR	00F2	CSEG	Global
NOUSR  . . . . . . . . . . . . .  	Number	0000	
NOVARP . . . . . . . . . . . . .  	Number	0000	
NPUTSB . . . . . . . . . . . . .  	L NEAR	0351	CSEG
NUMLEV . . . . . . . . . . . . .  	Number	006E	
NUMTMP . . . . . . . . . . . . .  	Number	000A	
NUMTRP . . . . . . . . . . . . .  	Number	0015	

OEMRAM . . . . . . . . . . . . .  	Number	0000	
OLVPPC . . . . . . . . . . . . .  	Number	0000	
OMERR  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ONTEL  . . . . . . . . . . . . .  	Number	0000	
OPTB0  . . . . . . . . . . . . .  	L NEAR	01FD	CSEG
OPTVAL . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External

PALSIZ . . . . . . . . . . . . .  	Number	0000	
PANBAS . . . . . . . . . . . . .  	Number	0000	
PARM1  . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
PC8A . . . . . . . . . . . . . .  	Number	0000	
PCS  . . . . . . . . . . . . . .  	Number	0000	
PLAYSW . . . . . . . . . . . . .  	Number	0001	
POPDIM . . . . . . . . . . . . .  	L NEAR	02A5	CSEG
POPHR2 . . . . . . . . . . . . .  	L NEAR	018A	CSEG
POPHRT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
PRMFLG . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
PRMLEN . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
PTRGET . . . . . . . . . . . . .  	L NEAR	0013	CSEG	Global
PTRGT1 . . . . . . . . . . . . .  	L NEAR	0015	CSEG
PTRGT2 . . . . . . . . . . . . .  	L NEAR	001A	CSEG	Global
PTRGT3 . . . . . . . . . . . . .  	L NEAR	003A	CSEG
PTRGTN . . . . . . . . . . . . .  	L NEAR	010D	CSEG	Global
PTRGTR . . . . . . . . . . . . .  	L NEAR	0110	CSEG	Global
PTRRNZ . . . . . . . . . . . . .  	L NEAR	0340	CSEG
PURE . . . . . . . . . . . . . .  	Number	0001	

QUEUE  . . . . . . . . . . . . .  	Number	0001	

REALIO . . . . . . . . . . . . .  	Number	0001	
REASON . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
REDDY  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
RETVAR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
RMX  . . . . . . . . . . . . . .  	Number	0000	
RSHACK . . . . . . . . . . . . .  	Number	0000	
RSTLES . . . . . . . . . . . . .  	Number	0001	

SARYFL . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
SBC  . . . . . . . . . . . . . .  	Number	0000	
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Symbols-6
                                                             

SBC86  . . . . . . . . . . . . .  	Number	0000	
SCP  . . . . . . . . . . . . . .  	Number	0001	
SCRN86 . . . . . . . . . . . . .  	Number	0001	
SCRNIO . . . . . . . . . . . . .  	Number	0001	
SCROLT . . . . . . . . . . . . .  	Number	0001	
SGSATS . . . . . . . . . . . . .  	Number	0000	
SHORTJ . . . . . . . . . . . . .  	Number	0001	
SHTCHN . . . . . . . . . . . . .  	Number	0000	
SHTERR . . . . . . . . . . . . .  	Number	0000	
SHTINS . . . . . . . . . . . . .  	Number	0000	
SHTLHM . . . . . . . . . . . . .  	Number	0000	
SHTLIN . . . . . . . . . . . . .  	Number	0000	
SHTNAM . . . . . . . . . . . . .  	L NEAR	01E6	CSEG
SHTPRO . . . . . . . . . . . . .  	Number	0000	
SHTREN . . . . . . . . . . . . .  	Number	0000	
SIXDIG . . . . . . . . . . . . .  	Number	0000	
SLPLNG . . . . . . . . . . . . .  	L NEAR	0360	CSEG
SMALL  . . . . . . . . . . . . .  	Number	0000	
SMKVAR . . . . . . . . . . . . .  	L NEAR	011D	CSEG
SMLVAL . . . . . . . . . . . . .  	L NEAR	032D	CSEG
SNERR  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SNFUNS . . . . . . . . . . . . .  	L NEAR	00FE	CSEG
SPCDSK . . . . . . . . . . . . .  	Number	0000	
SPCNDS . . . . . . . . . . . . .  	Number	0000	
STREND . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
STRING . . . . . . . . . . . . .  	Number	0001	
STRSIZ . . . . . . . . . . . . .  	Number	0003	
SUBFLG . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
SUBSOK . . . . . . . . . . . . .  	L NEAR	0225	CSEG
SUPRSH . . . . . . . . . . . . .  	Number	0001	
SWAPSW . . . . . . . . . . . . .  	Number	0001	
SYNCHR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

TABTYP . . . . . . . . . . . . .  	L NEAR	0097	CSEG
TEK  . . . . . . . . . . . . . .  	Number	0000	
TEMP2  . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
TEMP3  . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
TIMSHR . . . . . . . . . . . . .  	Number	0000	
TRNCHR . . . . . . . . . . . . .  	Number	0000	
TRSER2 . . . . . . . . . . . . .  	Number	0000	
TRSHHC . . . . . . . . . . . . .  	Number	0000	
TRUANS . . . . . . . . . . . . .  	Number	0000	
TRUROM . . . . . . . . . . . . .  	Number	0001	
TSDISK . . . . . . . . . . . . .  	Number	0000	
TSLPT  . . . . . . . . . . . . .  	Number	0000	

UMULT  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

VALTYP . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
VARNOT . . . . . . . . . . . . .  	L NEAR	0111	CSEG
VARTAB . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
VMORC1 . . . . . . . . . . . . .  	L NEAR	005A	CSEG
VMORCH . . . . . . . . . . . . .  	L NEAR	0047	CSEG

Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:31:59
 
BIPTRG  BASIC Interpreter pointer get routines/WHG/PGA      Symbols-7
                                                             

XTNSYS . . . . . . . . . . . . .  	Number	0000	

Z80  . . . . . . . . . . . . . .  	Number	0001	
Z80MAC . . . . . . . . . . . . .  	Number	0001	
ZERITA . . . . . . . . . . . . .  	L NEAR	02D0	CSEG
ZEROER . . . . . . . . . . . . .  	L NEAR	0163	CSEG

$DZERO . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
??L000 . . . . . . . . . . . . .  	L NEAR	0022	CSEG
??L001 . . . . . . . . . . . . .  	L NEAR	006C	CSEG
??L002 . . . . . . . . . . . . .  	L NEAR	00BB	CSEG
??L003 . . . . . . . . . . . . .  	L NEAR	00C0	CSEG
??L004 . . . . . . . . . . . . .  	L NEAR	00C9	CSEG
??L005 . . . . . . . . . . . . .  	L NEAR	00D0	CSEG
??L006 . . . . . . . . . . . . .  	L NEAR	01FC	CSEG
??L007 . . . . . . . . . . . . .  	L NEAR	0217	CSEG
??L008 . . . . . . . . . . . . .  	L NEAR	0222	CSEG
??L009 . . . . . . . . . . . . .  	L NEAR	024B	CSEG
??L010 . . . . . . . . . . . . .  	L NEAR	0256	CSEG
??L011 . . . . . . . . . . . . .  	L NEAR	025D	CSEG
??L012 . . . . . . . . . . . . .  	L NEAR	0276	CSEG
??L013 . . . . . . . . . . . . .  	L NEAR	02C9	CSEG
??L014 . . . . . . . . . . . . .  	L NEAR	030E	CSEG
??L015 . . . . . . . . . . . . .  	L NEAR	0334	CSEG


   1055 Source  Lines
   1056 Total   Lines
    333 Symbols

  40334 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
