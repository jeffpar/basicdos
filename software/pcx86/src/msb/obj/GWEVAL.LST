Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-1
                                                            

                                ; [ This translation created 10-Feb-83 by Versi
				on 4.3 ] 
                                 
 0008                           	.RADIX  8		; To be safe 
                                 
 0000                           CSEG	SEGMENT PUBLIC 'CODESG' 
                                	ASSUME  CS:CSEG 
                                 
                             C  INCLUDE	BINTRP.INC 
                             C  ; 
                             C  ;               Include file for BINTRP.ASM 
                             C  ; 
                             C   
                             C  INCLUDE OEM.INC                   ; General def
				initions 
                             C  ; [ This translation created 10-Feb-83 by Versi
				on 4.3 ] 
                             C   
                             C  	PAGE	,132D 
                             C  	SUBTTL  Common file to produce 2-segment 8086 GW-CPM BASIC 
                             C   
                             C  	.SALL 
                             C   
 000A                        C  	.RADIX	10 
 = 0000                      C  	OEMRAM=0D 
                             C  ;Pascal program HFILE searches for the following line - DO NOT MODIFY 
                             C  ;** (VERSION SPECIFIC VALUES) ************************************************ 
 = 0019                      C  	NMLINE=25		;Max screen display text lines 
 = 0001                      C  	NBANKS=1		;Number of graphic planes 
 = 0000                      C  	PALSIZ=0		;Size of OEM color palette 
 = 0000                      C  	DBLCHR=0		;Editor support for KANJI chars 
 = 0000                      C  	KANABS=0		;Kana BASIC (Japanese JIS codes) 
 = 0000                      C  	KANJFN=0		;KANJI String Functions KPOS, KLEN .. 
 = 0000                      C  	JISKTN=0		;&K, &J constants (KANJI) 
 = 0001                      C  	SUPRSH=1		;1=super shift key feature 
 = 000A                      C  	NMKEYF=10		;number of function keys 
 = 000E                      C  	NMKEYT=14		;number of function key traps 
 = 0001                      C  	FKEYON=1		;yes=display function keys 
 = 0001                      C  	SCROLT=1		;Line 25 allocated for status only 
 = 0001                      C  	PLAYSW=1		;for PLAY statement 
 = 0001                      C  	BEEPSW=1		;for SOUND, BEEP statements 
 = 0003                      C  	NMLPT=3			;number of line printers 
 = 0001                      C  	CONSSW=1		;Device CONS: 
 = 0002                      C  	NMCOMT=2		;number of COMmunications ports 
 = 0001                      C  	NMPENT=1		;number of light pens 
 = 0004                      C  	NMSTRT=4		;number of joysticks 
 = 0000                      C  	GWCASS=0		;Cassette switch (CSAVE,CLOAD,MOTOR) 
 = 0001                      C  	IBMLIK=1		;IBM compatibility package 
 = 0001                      C  	IBMTOK=1		;IBM token compatibility 
 = 0001                      C  	DYNCOM=1		;Dynamic communication buffers 
                             C  ;** (END OF VERSION SPECIFIC VALUES) ***************************************** 
                             C  ;Pascal program HFILE searches for the previous line - DO NOT MODIFY 
                             C  ; 
 = 0015                      C  	NUMTRP=NMKEYT+NMCOMT+NMPENT+NMSTRT 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-2
Common file to produce 2-segment 8086 GW-CPM BASIC          

 = 0001                      C  	GW=1			;GW BASIC 
 = 0000                      C  	ESCCTL=0		;Escape Sequence processing in SCROUT 
 = 0000                      C  	GWDBUG=0		;DEBUG statement (TEST VERSIONS ONLY) 
                             C  				; Support is in BINTRP.MAC and GWSTS.MAC 
 = 0000                      C  	SIXDIG=0		;# of digits of accuracy assumed when formatting 
                             C  				;single precision numbers for output. 
                             C  				; 0 := 7 digits 
                             C  				; 1 := 6 digits 
 = 0000                      C  	CASSW=0			;CASSETTE SWITCH 
 = 0001                      C  	LABKEY=1		;^T (LABEL) key capability 
 = 0001                      C  	HGHBIT=1		;8-bit characters (ASCII & Graphics) 
 = 0001                      C  	QUEUE=1			;Queued painting algorithm (vs. stack) 
 = 0001                      C  	GIO86=1			;BASIC-86 Generalized I/O 
 = 0001                      C  	SCRNIO=1		;Screen editor 
 = 0001                      C  	SCRN86=1		;8086 Screen editor 
 = 0001                      C  	I8086=1			;CROSS ASSEMBLING FOR 8086 
 = 0001                      C  	MULSEG=1		;MULTI-SEGMENT 8086 BASIC 
 = 0000                      C  	SMALL=0			;"SMALL" VERSION OF 8086 BASIC IF SET 
 = 0001                      C  	TRUROM=1 
 = 0000                      C  	SBC86=0			;SBC 86/02 BOARD? 
 = 0001                      C  	SHORTJ=1		;USE INTRA-SEGMENT SHORT JUMPS 
                             C  				;IN 8086 CODE 
 = 0001                      C  	LNGVAR=1		;LONG VARIABLE NAME SUPPORT (EXTENDED ONLY) 
 = 0000                      C  	SHTERR=0		;SHORT (2 CHAR) ERROR MESSAGES 
 = 0000                      C  	SHTINS=0		;INSTR IN NON-FAST LEN2 VERSIONS 
 = 0000                      C  	SHTLHM=0		;LEFT HAND SIDE MID IN NON FAST LEN2 VERSIONS 
 = 0000                      C  	SHTCHN=0		;ALLOW CHAIN IN NON-5.0 
 = 0000                      C  	SHTPRO=0		;ALLOW PROTECTED FILES IN NON-FIVDSK 
 = 0000                      C  	SHTLIN=0		;ALLOW LINE INPUT IN NON-EXTENDED NON-FAST 
 = 0000                      C  	SHTREN=0		;ALLOW RENUM IN NON-FST VERSIONS 
 = 0001                      C  	INKEYF=1		;ADDS INKEY$ FUNCTION 
 = 0000                      C  	NOIOS=0			;NO I/O STATMENTS (INP,OUT, WAIT) 
 = 0000                      C  	NOPEKS=0		;NO PEEK, POKE 
 = 0000                      C  	NOUSR=0			;NO USR 
 = 0000                      C  	NOCTLA=0		;NO CONTROL-A IN EXTENDED 
 = 0000                      C  	NORUBT=0		;NO RUBOUT 
 = 0000                      C  	NOROMP=0		;NO ROM PROGRAM FEATURE 
 = 0000                      C  	NOATDL=0		;NO AUTO DELETE IN NON-FAST EXTENDED 
 = 0000                      C  	NODOT=0			;NO DOT IN LEN2 
 = 0000                      C  	NOEDIT=0		;NO EDIT COMMAND 
 = 0000                      C  	CRONLY=0		;ONLY PUT OUT CR, NOT CRLF TO TERMINAL 
                             C  				;AND FILES 
 = 0000                      C  	NONULL=0		;NO NULL COMMAND, PUT OUT NULLS IN CRDO & OUTCH1 
 = 0000                      C  	NOVARP=0		;NO VARPTR FUNCTION 
 = 0001                      C  	FIVEO=1			;GENERATE VERSION WITH RELEASE 5.0 FEATURES 
 = 0001                      C  	FIVMEM=1 
 = 0001                      C  	ANSI=1 
 = 0001                      C  	FIVDSK=1		;5.0 NEW DSK CODE 
 = 0001                      C  	FIVLPT=1		;WIDTH LPRINT AND 255 FEATURE 
 = 0001                      C  	HEXOCT=1		;&H..., HEX$, &O..., OCT$ 
 = 0000                      C  	BINCSW=0		;&B..., BIN$ 
 = 0001                      C  	BLODSW=1		;BLOAD, BSAVE COMMANDS 
 = 0001                      C  	MEMIMG=1		;MEMORY IMAGE FILES 
 = 0001                      C  	GENBIN=1 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-3
Common file to produce 2-segment 8086 GW-CPM BASIC          

                             C   
 = 0000                      C  	TRUANS=0		;TRUE ANSI VERSION (STATIC SCAN, ON ERROR) 
 = 0000                      C  	COMMNT=0		;DONT WANT BIG COMMENT 
 = 0000                      C  	INTEL=0			;INTEL PROPRIETARY 
 = 0000                      C  	INTFSW=0		;INTEL FLOATING POINT 
 = 0000                      C  	INTFHW=0 
 = 0000                      C  	RMX=0			;INTEL RMX VERSION 
 = 0000                      C  	EDIT80=0		;FOR EDIT80 I/O ROUTINES 
 = 0000                      C  	RSHACK=0 
 = 0000                      C  	INTLEC=0 
 = 0002                      C  	LENGTH=2		;  1 MEANS 8K, 2 MEANS 12K 
 = 0000                      C  	BASDEB=0		;WHETHER DBG WILL BE LOADED WITH BASIC 
 = 0001                      C  	RSTLES=1		;WHETHER BASIC WILL USE RST LOCATIONS 
                             C  				;TO MAKE ITSELF SMALLER & QUICKER 
 = 0001                      C  	REALIO=1		;WHETHER SIMULATE (=0) OR ON MACHINE (=1) 
 = 0001                      C  	GENIO=1			;USE G/P ROUTINES 
 = 0001                      C  	CHSEAT=1		;CHSNS eats chars 
 = 0000                      C  	GENDSK=0		;USE G/P DSK CODE 
 = 0000                      C  	LONGI=0			;WHETHER WE ASK "TERMINAL WIDTH?" 
                             C  				;AND WANT SIN-TAN-COS-ATN? 
 = 0000                      C  	INSTSW=0		;FOR INSTR INSTRUCTION 
 = 0001                      C  	SWAPSW=1		;FOR SWAP STATEMENT 
 = 0000                      C  	MDS=0			;FOR INTEL MDS SYSTEMS 
 = 0000                      C  	SBC=0			;FOR INTEL SINGLE BOARD COMPUTER 
                             C  				;1=SBC 80/10, 2=SBC 80/20 
 = 0001                      C  	PURE=1			;ON FOR PURE CODE 
 = 0000                      C  	KILLER=0		;FOR ROM VERSION THAT WONT RUN IN RAM 
 = 0000                      C  	INTROM=0 
 = 0001                      C  	LPTSW=1 
 = 0001                      C  	NCRLPT=1 
 = 0000                      C  	NCRCAS=0 
 = 0000                      C  	ISC=0			;FOR ISC VERSION 
 = 0000                      C  	LPT3=0			;THREE LPT DRIVER VERSION(QUME,OKIA,CENT) 
 = 0000                      C  	TSLPT=0 
                             C   
 = 0000                      C  	DOS=0			;ON TO GEN ROUTINES FOR DOS 
 = 0001                      C  	DISK=1			;FILE I/O FEATURES 
 = 0000                      C  	TIMSHR=0		;NO TIME-SHARING DISK 
 = 0000                      C  	TSDISK=0		;NO TIME-SHARING DISK FOR US 
 = 0000                      C  	SPCDSK=0		;MAY HAVE MM'S DISK CODE 
 = 0000                      C  	SPCNDS=0 
 = 0001                      C  	FAST=1			;CONSTANT COMPRESSION, RENUM & FRIENDS 
 = 0000                      C  	KEYSTA=0 
 = 0000                      C  	ISIS=0			;FOR VERSION TO RUN UNDER INTEL'S ISIS II DOS 
 = 0000                      C  	MDSISS=0		;FOR MDS VERSION THAT RUNS UNDER ISIS-II 
 = 0001                      C  	CPM=1			;FOR CPM compatible operating systems 
 = 0001                      C  	CPM2=1			;VERSION 2. CPM 
 = 0000                      C  	CPM86=0			;FOR CP/M-86 operating system 
 = 0001                      C  	SCP=1			;MS-DOS operating system 
 = 0000                      C  	CPMCON=0 
 = 0000                      C  	CPMSER=0		;CHECK CPM SERIAL #'S 
 = 0000                      C  	CPMADD=0		;FOR VERSION TO RUN ON ADDS CPM 
 = 0000                      C  	CPMA75=0		;FOR VERSION TO RUN ON ADDS SYSTEM 75 
                             C  				;CP/M 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-4
Common file to produce 2-segment 8086 GW-CPM BASIC          

 = 0000                      C  	CPMRSH=0		;FOR RADIO SHACK CPM/M 
 = 0000                      C  	CPM110=0		;FOR CP/M @1100 HEX (INTERALIA) 
 = 0000                      C  	CPMSBC=0		;FOR VERSION TO RUN ON SBC CP/M AT 4100H 
 = 0000                      C  	CPMPER=0		;FOR PERTEC VERSION OF CPM 
 = 0000                      C  	CPMLIF=0		;LIFEBOAT CP/M AT 4200H 
 = 0000                      C  	CPMMDS=0		;MOHAWK DATA SYSTEMS CP/M 
 = 0000                      C  	CPMCON=0 
 = 0000                      C  	Z80=0 
 = 0001                      C  	DISK=1 
 = 0001                      C  	NCRLPT=1 
 = 0001                      C  	RSTLES=1 
 = 0000                      C  	DRVPOS=CPMADD 
 = 0000                      C  	TRNCHR=CPMADD 
 = 0000                      C  	INLADD=CPMADD 
 = 0001                      C  	LISTEN=1		;ON MEANS LISTEN FOR ^C 
 = 0001                      C  	LISTEN=1 
 = 0000                      C  	LEN2=0 
 = 0001                      C  	LEN2=1 
 = 0001                      C  	HEXOCT=1 
 = 0002                      C  	LENGTH=2 
 = 0001                      C  	RSTLES=1 
 = 0001                      C  	FIVLPT=1 
 = 0000                      C  	I8251=0			;THIS SWITCH IS USED FOR ROSEMOUNT VERSION 
 = 0001                      C  	CONTRO=1		;ALLOW ^O 
 = 0001                      C  	LEN3=LEN2 OR CASSW 
                             C   
                             C   
                             C   
 = 0001                      C  	STRING=1 
 = 0001                      C  	NCRLPT=1 
                             C   
                             C  ; *** OEM Switches which need to be defaulted to 0 
                             C  ; 
 = 0000                      C  	CMPUTN=0 
 = 0000                      C  	DUPONT=0 
 = 0000                      C  	EXIDY=0 
 = 0000                      C  	GESBC=0 
 = 0000                      C  	HEATH=0 
 = 0000                      C  	LOKHED=0 
 = 0000                      C  	MOSTEK=0 
 = 0000                      C  	TEK=0 
 = 0000                      C  	TRSER2=0 
 = 0000                      C  	NASCOM=0 
 = 0000                      C  	NATROM=0 
 = 0000                      C  	NCRBAS=0 
 = 0000                      C  	NCRDEB=0 
 = 0000                      C  	NCRDEB=0 
 = 0000                      C  	NCRELS=0 
 = 0000                      C  	ONTEL=0 
 = 0000                      C  	PCS=0 
 = 0000                      C  	SGSATS=0 
 = 0000                      C  	ALTAIR=0 
 = 0000                      C  	DMC=0 
 = 0000                      C  	PANBAS=0 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-5
Common file to produce 2-segment 8086 GW-CPM BASIC          

 = 0000                      C  	XTNSYS=0 
 = 0000                      C  	NECBAS=0 
                             C  ;******************************************************************* 
                             C  ; Z80 related macros 
                             C  ;******************************************************************* 
 = 0001                      C  	Z80=1			;FOR VERSION THAT RUNS ON BOTH 
                             C  				;8080'S AND ZILOG Z-80'S 
 = 0001                      C  	Z80MAC=1		;USE 8080 MACROS INSTEAD OF Z80 INSTRUCTIONS 
 = 0000                      C  	Z80=0 
 = 0001                      C  	Z80=1 
                             C  LDIR	MACRO 
                             C  	MOV	WORD PTR A,WORD PTR M 
                             C  	STAX	D 
                             C  	INXF	H 
                             C  	INXF	D 
                             C  	DCXF	B 
                             C  	MOV	WORD PTR A,WORD PTR B 
                             C  	ORA	C 
                             C  	JNZ	_-8D 
                             C  ENDM 
                             C  LDDR	MACRO 
                             C  	MOV	WORD PTR A,WORD PTR M 
                             C  	STAX	D 
                             C  	DCXF	H 
                             C  	DCXF	D 
                             C  	DCXF	B 
                             C  	MOV	WORD PTR A,WORD PTR B 
                             C  	ORA	C 
                             C  	JNZ	_-8D 
                             C  ENDM 
                             C  DJNZ	MACRO	    DEST 
                             C  	DCR	B 
                             C  	JNZ	DEST 
                             C  ENDM 
                             C  ;******************************************************************* 
                             C  ; Define reset routines. 
                             C  ;******************************************************************* 
                             C  FSIGN	MACRO 
                             C  	CALL	SIGN 
                             C  ENDM 
                             C  PUSHM	MACRO 
                             C  	MOV	WORD PTR C,WORD PTR M 
                             C  	INX	H 
                             C  	MOV	WORD PTR B,WORD PTR M 
                             C  	INX	H 
                             C  	PUSH	WORD PTR B 
                             C  ENDM 
                             C  SYNCHK	MACRO	X 
                             C  	CALL	SYNCHR 
                             C  	DB	OFFSET X 
                             C  ENDM 
                             C  OUTCHR	MACRO 
                             C  	CALL	OUTDO 
                             C  ENDM 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-6
Common file to produce 2-segment 8086 GW-CPM BASIC          

                             C  CHRGET	MACRO 
                             C  	CALL	CHRGTR 
                             C  ENDM 
                             C  COMPAR	MACRO 
                             C  	CALL	DCOMPR 
                             C  ENDM 
                             C  GETYPE	MACRO 
                             C  	CALL	GETYPR 
                             C  ENDM 
                             C  COMPAR	MACRO 
                             C  	DB	73O 
                             C  	DB	332O 
                             C   ENDM 
                             C  ACRLF	MACRO 
                             C  	DB	13D 
                             C  	DB	10D 
                             C  ENDM 
                             C  PUSHR	MACRO 
                             C  	PUSH	WORD PTR D 
                             C  	PUSH	WORD PTR B 
                             C  ENDM 
                             C  POPR	MACRO 
                             C  	POP	WORD PTR B 
                             C  	POP	WORD PTR D 
                             C  ENDM 
                             C  MOVRI	MACRO	B,C,D,E 
                             C  	DB	1O		; "LXI  B" 
                             C  	DB	OFFSET C 
                             C  	DB	OFFSET B 
                             C  	DB	21O		; "LXI  D" 
                             C  	DB	OFFSET E 
                             C  	DB	OFFSET D 
                             C  ENDM 
                             C  INST	MACRO	X 
                             C  	DB	OX 
                             C  ENDM 
                             C   
                             C   
 = 000F                      C  	CONTO=15		;CHARACTER TO SUPRESS OUTPUT (USUALLY CONTROL-O) 
 = 0000                      C  	DBLTRN=0		;FOR DOUBLE PRECISION TRANSCENDENTALS 
                             C   
 = 000E                      C  	CLMWID=14D		;MAKE COMMA COLUMNS FOURTEEN CHARACTERS 
 = 0080                      C  	DATPSC=128D		;NUMBER OF DATA BYTES IN DISK SECTOR 
 = 0050                      C  	LINLN=80D		;TERMINAL LINE LENGTH 
 = 0084                      C  	LPTLEN=132D 
 = 00FF                      C  	BUFLEN=255		;LONG LINES 
 = 0028                      C  	NAMLEN=40D		;MAXIMUM LENGTH NAME -- 3 TO 127 
                             C   
 = 006E                      C  	NUMLEV=110D		;NUMBER OF STACK LEVELS RESERVED 
                             C  				;BY AN EXPLICIT CALL TO GETSTK 
 = 0004                      C  	STRSIZ=4 
 = 0003                      C  	STRSIZ=3 
 = 0003                      C  	NUMTMP=3		;NUMBER OF STRING TEMPORARIES 
 = 000A                      C  	NUMTMP=10 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-7
Common file to produce 2-segment 8086 GW-CPM BASIC          

                             C   
 0008                        C  	.RADIX	8 
                             C  ; 
                             C  ; Useful macros 
                             C  ; 
                             C   
                             C  ACRLF   MACRO 
                             C          DB      13D 
                             C          DB      10D 
                             C  ENDM 
                             C   
                             C  INS86   MACRO   A,B,C,D 
                             C          DB      A&O 
                             C  IFNB    <B> 
                             C          DB      B&O 
                             C  ENDIF 
                             C  IFNB    <D> 
                             C          DB      C&O 
                             C          DB      D&O 
                             C  ENDIF 
                             C  IFB     <D> 
                             C   IFNB   <C> 
                             C          DW      C 
                             C    ENDIF 
                             C   ENDIF 
                             C  ENDM 
                             C   
                             C  CALLOS  MACRO 
                             C          CALL    CPMENT 
                             C  ENDM 
                             C   
                             C  POPR    MACRO 
                             C          POP     CX 
                             C          POP     DX 
                             C  ENDM 
                             C   
                             C  ADR     MACRO   X 
                             C          DW      X 
                             C  ENDM 
                             C   
                             C  DC      MACRO   ARG 
                             C          IRPC    ZZ,<ARG> 
                             C              IFDIF       <ZZ>,<">
                             C                  DB      "&ZZ&" 
                             C                  _A="&ZZ&" 
                             C              ENDIF 
                             C          ENDM 
                             C  ENDM 
                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-8
Common file to produce 2-segment 8086 GW-CPM BASIC          

                             C          PAGE 
                             C   
                             C  DBGBRK	MACRO 
                             C  	DB	0CDh,06h,0CCh 
                             C  	ENDM 
                             C   
                             C   
                             C  MOVRI   MACRO   B,C,D,E 
                             C          DB      271O            ; "LXI  B" 
                             C          DB      C 
                             C          DB      B 
                             C          DB      272O            ; "LXI  D" 
                             C          DB      E 
                             C          DB      D 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; Reserve word table generating Macros 
                             C  ; 
                             C  un_def  MACRO   RESWRD 
                             C          %OUT +++ Undefined reserved word - &RESWRD 
                             C  ENDM 
                             C   
                             C  T       MACRO   RESWRD 
                             C          QQ=QQ+1 
                             C          $&RESWRD=QQ 
                             C  ENDM 
                             C   
                             C  Q       MACRO   RESWRD 
                             C   IFDEF  $&RESWRD 
                             C          $F=0 
                             C    IRPC  XX,<RESWRD> 
                             C     IF   $F 
                             C          $Q="&XX&" 
                             C          DB      "&XX&" 
                             C     ENDIF 
                             C     IFE  $F-1 
                             C          .XLIST 
                             C     ENDIF 
                             C          $F=$F+1 
                             C    ENDM 
                             C          .LIST 
                             C          ORG     $-1 
                             C          DB      $Q+128D 
                             C          DB      $&RESWRD 
                             C   ELSE 
                             C          un_def  RESWRD 
                             C   ENDIF 
                             C  ENDM 
                             C   
                             C  QF      MACRO   RESWRD 
                             C   IFDEF  $&RESWRD 
                             C          $F=0 
                             C    IRPC  XX,<RESWRD> 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-9
Common file to produce 2-segment 8086 GW-CPM BASIC          

                             C     IF   $F 
                             C          $Q="&XX&" 
                             C          DB      "&XX&" 
                             C     ENDIF 
                             C     IFE  $F-1 
                             C          .XLIST 
                             C     ENDIF 
                             C          $F=$F+1 
                             C    ENDM 
                             C          .LIST 
                             C          ORG     $-1 
                             C          DB      $Q+128D 
                             C          DB      $&RESWRD-128D 
                             C   ELSE 
                             C          un_def  RESWRD 
                             C   ENDIF 
                             C  ENDM 
                             C   
                             C  DERMAK  MACRO   X 
                             C          PUBLIC  DER&X 
                             C  DER&X:  MOV     DL,OFFSET ERR&X 
                             C          DB      271O                    ; LXI B over next error 
                             C  ENDM 
                             C  ; 
                             C  ; Dispatch table generating Macros.  We have to play games with the 
                             C  ; external declarations as ASM86 won't allow something to be declared 
                             C  ; external during pass 2.  Instead we build a chain of dummy macros 
                             C  ; that could generate the declaration for all potentially external 
                             C  ; reserve word dispatch addresses. 
                             C  ; 
                             C   
                             C  ; 
                             C  ; play games with a possible external.  Create a new 
                             C  ; macro for the symbol and text, and string it together 
                             C  ; with a central invoker 
                             C  ; 
                             C  ENDIF 
                             C   
                             C  ?z0 macro               ; Bottom of the chain 
                             C  endm 
                             C   
                             C  ; 
                             C  ; add an external declaration to S with type NEAR if it is not defined 
                             C  ; 
                             C  add_ext macro   s 
                             C      IFNDEF   ?&s 
                             C          ?i = ?i + 1 
                             C          def_mac     ?z&%?i,?z&%(?i-1),s 
                             C      ENDIF 
                             C  endm 
                             C   
                             C  ; 
                             C  ; define a macro called that possibly externals S:NEAR and then calls macro n 
                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-10
Common file to produce 2-segment 8086 GW-CPM BASIC          

                             C  def_mac macro   m,n,s 
                             C  m   macro 
                             C      ifndef s 
                             C          extrn s:NEAR 
                             C      endif 
                             C      purge m 
                             C      n 
                             C  endm 
                             C  ?&s macro 
                             C  &endm 
                             C  endm 
                             C   
                             C  ; 
                             C  ; call the macro chain 
                             C  ; 
                             C  do_ext  macro 
                             C      expand_mac  ?z%?i 
                             C  endm 
                             C   
                             C  expand_mac macro m 
                             C      m 
                             C  endm 
                             C  ; 
                             C  R       MACRO   RESWRD 
                             C   IFNDEF RESWRD 
                             C          add_ext RESWRD 
                             C   ENDIF 
                             C          DW      RESWRD 
                             C          QQ=QQ+1 
                             C          $&RESWRD=QQ 
                             C  ENDM 
                             C   
                             C  R2      MACRO   RESWRD,RESDSP 
                             C   IFNDEF RESDSP 
                             C          add_ext RESDSP 
                             C   ENDIF 
                             C          DW      RESDSP 
                             C          QQ=QQ+1 
                             C          $&RESWRD=QQ 
                             C  ENDM 
                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-11
Common file to produce 2-segment 8086 GW-CPM BASIC          

                             C  PAGE 
                             C   
                                 
                                 
                                	TITLE   GWEVAL Copied from BINTRP.MAC 
                                 
 000A                           	.RADIX	10 
                                 
                                	.LIST 
                                 
                                ;Local Switches 
                                ; 
 = 0000                         	LTRACE=ALPCPM		;trace output selectable 
 = 0000                         	LABEL=PC8A 
 = 0000                         	HLPEDT=PC8A 
 = 0000                         	UCEMSG=NNECBS		;Upper case error messages. 
 = 0000                         	OLD86=MELCO AND CPM86	;For "old" 8086 error messages (prior 
                                				;to alignment for IBM compatibility). 
                                 
 = 0001                         	OLDBLD=ALPCPM OR ALPS OR OKI OR HAL OR PC8A OR BUBL OR GW OR TSHIBA 
                                 
                             C  	INCLUDE	GIO86U.INC 
                             C  ; [ This translation created 12-Jan-83 by Version 4.3 ] 
                             C   
                             C  	SUBTTL GIO86U - Device Independent I/O Constants and Macros 
                             C   
                             C  COMMENT	* 
                             C   
                             C  --------- --- ---- -- --------- 
                             C  COPYRIGHT (C) 1982 BY MICROSOFT 
                             C  --------- --- ---- -- --------- 
                             C   
                             C          Programmer: Tom Corbett,  Microsoft Inc. 
                             C   
                             C          * 
                             C   
                             C  ROFFST	MACRO	NAME,SIZE	;define record macro 
                             C  	NAME=_OFFST 
                             C  	_OFFST=_OFFST+SIZE 
                             C  ENDM  
                             C   
                             C   
                             C  ;ASCII character definitions 
                             C  ; 
 = 0003                      C  	ASCCTC=3D		;CTL-C 
 = 0008                      C  	ASCBS=8D		;backspace 
 = 0009                      C  	ASCTAB=9D		;Tab 
 = 000A                      C  	ASCLF=10D		;Line Feed 
 = 000D                      C  	ASCCR=13D		;Carriage Return 
 = 0013                      C  	ASCCTS=19D		;CTL-S 
 = 001A                      C  	ASCCTZ=26D		;Control Z (End-of-file for some devices) 
 = 001B                      C  	ASCESC=27D		;Escape 
 = 0020                      C  	ASCSPC=32D		;Space 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-12
GIO86U - Device Independent I/O Constants and Macros        

                             C  ;Special File ID's (identified by 1st byte of file) 
                             C  ; 
 = 00FF                      C  	BINFID=255D		;files created by SAVE "fn" 
 = 00FE                      C  	PROFID=254D		;files created by SAVE "fn",P 
 = 00FD                      C  	BSVFID=253D		;files created by BSAVE "fn" 
                             C   
                             C  ;Generalized I/O Function Codes: 
                             C  ; 
 = 0000                      C  	_OFFST=0		;initialize count 
                             C  	ROFFST	G_EOF,2		;test EOF for file opened to this device 
                             C  	ROFFST	G_LOC,2		;LOC 
                             C  	ROFFST	G_LOF,2		;LOF 
                             C  	ROFFST	G_CLS,2		;perform special CLOSE functions for this device 
                             C  	ROFFST	G_SWD,2		;set device width 
                             C  	ROFFST	G_RND,2		;GET/PUT random record from/to this device 
                             C  	ROFFST	G_OPN,2		;perform special OPEN functions for this device 
                             C  	ROFFST	G_SIN,2		;input 1 byte from file opened on this device 
                             C  	ROFFST	G_SOT,2		;output 1 byte to file opened on this device 
                             C  	ROFFST	G_GPS,2		;POS 
                             C  	ROFFST	G_GWD,2		;get device width 
                             C  	ROFFST	G_SCW,2		;set device column width 
                             C  	ROFFST	G_GCW,2		;get device column width 
                             C  	ROFFST	G_BIN,2		;block input from file opened on this device 
                             C  	ROFFST	G_BOT,2		;block output to file opened on this device 
                             C   
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-13
GIO86U - Device Independent I/O Constants and Macros        

                             C          PAGE 
                                 
                             C  	INCLUDE	MSDOSU.INC	;MSDOS constants 
                             C  ; [ This translation created 12-Jan-83 by Version 4.3 ] 
                             C   
                             C  	SUBTTL    MSDOSU - MS-DOS Constants and Data-Structure Definitions 
                             C   
                             C  COMMENT	* 
                             C   
                             C  --------- --- ---- -- --------- 
                             C  COPYRIGHT (C) 1982 BY MICROSOFT 
                             C  --------- --- ---- -- --------- 
                             C   
                             C  	Programmer: Tom Corbett,  Microsoft Inc. 
                             C   
                             C  	* 
                             C   
                             C  CALLOS	MACRO	FUNC 
                             C  IFNB	<FUNC>   
                             C  	MOV	AH,LOW OFFSET FUNC 
                             C  ENDIF  
                             C  	INT	33D		;MSDOS system call 
                             C  ENDM  
                             C   
                             C  ROFFST	MACRO	NAME,SIZE	;define record macro 
                             C  	NAME=_OFFST 
                             C  	_OFFST=_OFFST+SIZE 
                             C  ENDM  
                             C   
                             C   
                             C  ; MSDOS System Call codes 
                             C  ; 
 = 0005                      C  	C_PRTO=5D		;Printer output 
 = 0006                      C  	C_DCIO=6D		;Direct console I/O 
 = 000D                      C  	C_REST=13D		;INITIALIZE BDOS 
 = 000E                      C  	C_SDRV=14D		;SET CURRENTLY SELECTED DRIVE 
 = 000F                      C  	C_OPEN=15D 
 = 0010                      C  	C_CLOS=16D 
 = 0011                      C  	C_SEAR=17D		;SEARCH FOR FILE 
 = 0013                      C  	C_DELE=19D 
 = 0014                      C  	C_READ=20D 
 = 0016                      C  	C_MAKE=22D 
 = 0017                      C  	C_RENA=23D 
 = 0019                      C  	C_GDRV=25D		;GET CURRENTLY SELECTED DRIVE 
 = 001A                      C  	C_BUFF=26D		;SET DMA ADDRESS 
 = 0021                      C  	C_RNDR=33D		;Random read 
 = 0022                      C  	C_RNDW=34D		;Random write 
 = 0027                      C  	C_RBR=39D		;Random Block Read 
 = 0029                      C  	C_PARS=41D		;Parse Filename 
                             C   
 = 000B                      C  	FNAML=11D		;number of bytes in Filename with extension 
 = 0080                      C  	DATPSC=128D		;bytes per sector 
 = 0026                      C  	FCBSIZ=38D		;File Control Block size 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-14
MSDOSU - MS-DOS Constants and Data-Structure Definitions    

                             C  ;MS-DOS FILE-DATA-BLOCK Record Definition 
                             C  ; 
 = 0000                      C  	_OFFST=0		;initialize count 
                             C  	ROFFST	F_NUL1,1	;not used by basic interpreter 
                             C  	ROFFST	F_NUM,1		;file number 0..255 
                             C  	ROFFST	F_NUL2,2	;not used by basic interpreter 
                             C  	ROFFST	F_NEXT,2	;thread for linked list, [MEMSIZ]=end 
                             C  	ROFFST	F_MODE,1	;file mode: 
 = 0001                      C  	MD_SQI=1D		;sequential input 
 = 0002                      C  	MD_SQO=2D		;sequential output 
 = 0004                      C  	MD_RND=4D		;random 
 = 0008                      C  	MD_APP=8D		;append 
                             C  	ROFFST	F_FCB,FCBSIZ	;File Control Block: used to communicate with OS 
                             C  	ROFFST	F_CLOC,2	;for seq files: num sectors read/written   (LOCOFS) 
                             C  				;for rnd files: last record number + 1 
                             C  	ROFFST	F_ORCT,1	;"Original Byte Count"                     (ORNOFS) 
                             C  				;for seq input: #bytes in sector when read 
                             C  				;for seq output: #bytes in output sector 
                             C  				;for random files: bytes per sector 
                             C  	ROFFST	F_BREM,1	;number of bytes till end-of-buffer        (NMLOFS) 
                             C  	ROFFST	F_CODE,1	;file encoding: 
 = 0000                      C  	FC_ASC=0		;Ascii SAVE, Data files 
 = 0001                      C  	FC_BIN=1		;binary file (BSAVE, binary SAVE) 
                             C  	ROFFST	F_BAKC,1	;holds next sequential input when F.FLBS.FL.BKC is true 
                             C  	ROFFST	F_NUL3,1	;not used by basic interpreter 
                             C  	ROFFST	F_DEV,1		;Device number                             (FL.DSK) 
                             C  	ROFFST	F_WID,1		;File width 
                             C  	ROFFST	F_NUL4,1	;not used by basic interpreter 
                             C  	ROFFST	F_FLGS,1	;flags 
 = 0080                      C  	FL_BKC=200O		;when true, F.BAKC contains next sequential input 
                             C  	ROFFST	F_POS,1		;Current column position                   (FL.OPS) 
                             C  	ROFFST	FDBSIZ,0	;size of device independent part of FDB 
                             C  				;device dependant FDB entries start here 
                             C   
                             C  	ROFFST	DATOFS,DATPSC	;Operating System interface buffer 
                             C  	ROFFST	FD_SIZ,2	;variable record length for random files 
                             C  	ROFFST	FD_PHY,2	;current physical record number 
                             C  	ROFFST	FD_LOG,2	;current logical record number 
                             C  	ROFFST	F_NUL5,1	;Future use 
                             C  	ROFFST	FD_OPS,2	;current output position for sequential I/O 
                             C  	ROFFST	FD_DAT,0	;field buffer of random file 
                             C   
                             C  ; OFFSETS INTO MSDOS FCB 
                             C  ; 
 = 0007                      C  	FCB_DV=F_FCB+0D		;DRIVE (0=default, 1=A:, 2=B:, ...) 
 = 0008                      C  	FCB_FN=F_FCB+1D		;FILE NAME 
 = 0010                      C  	FCB_FT=F_FCB+9D		;EXTENSION 
 = 0013                      C  	FCB_EX=F_FCB+12D	;FILE EXTENT (identifies block of 128 logical records) 
 = 0015                      C  	FCB_RC=F_FCB+14D	;RECORD SIZE 
 = 0017                      C  	FCB_FS=F_FCB+16D	;FILE SIZE IN BYTES 
 = 001B                      C  	FCB_DT=F_FCB+20D	;Date of last write to file 
 = 001D                      C  	FCB_DT=F_FCB+22D	;Time of last write to file 
 = 0027                      C  	FCB_NR=F_FCB+32D	;NEXT RECORD NUMBER 
 = 0028                      C  	FCB_RN=F_FCB+33D	;CP/M 2.x Random Record Number 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-15
MSDOSU - MS-DOS Constants and Data-Structure Definitions    

                             C   
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-16
MSDOSU - MS-DOS Constants and Data-Structure Definitions    

                             C          PAGE 
                                 
                                 
                                 
                                 
                                 
                                	EXTRN	INIT:NEAR 
                                 
                                 
                                 
                                 
                                	EXTRN	SETGSB:NEAR 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	ASSUME DS:DSEG 
                                	EXTRN	ONGSBF:WORD 
 0000                           DSEG	ENDS 
                                 
                                 
 = 0000                         	BUFOFS=0 
                                 
 = 0002                         	BUFOFS=2		;MUST CRUNCH INTO ERALIER PLACE FOR 
                                				; SINGLE QUOTE 
                                 
 = 013E                         	KBFLEN=BUFLEN+(BUFLEN/4)	;MAKE KRUNCH BUFFER SOMEWHAT 
                                				; LARGER THAN SOURCE BUFFER (BUF) 
                                 
                                 
                                 
                                 
                                	EXTRN	NAME:NEAR 
                                	EXTRN	INLIN:NEAR,CRDO:NEAR,CRDONZ:NEAR,STRCMP:NEAR,FININL:NEAR 
                                	EXTRN	PPSWRT:NEAR 
                                 
                                	EXTRN	OUTDO:NEAR 
                                 
                                	EXTRN	BLTU:NEAR,CLEARC:NEAR,GTMPRT:NEAR,ISLET:NEAR,ISLET2:NEAR 
                                	EXTRN	PTRGET:NEAR 
                                	EXTRN	QINLIN:NEAR,SCRTCH:NEAR,STKINI:NEAR,RUNC:NEAR,RESFIN:NEAR 
                                	EXTRN	PTRGT2:NEAR,STPEND:NEAR,DIM:NEAR 
                                 
                                	EXTRN	DCOMPR:NEAR,SYNCHR:NEAR 
                                 
                                	EXTRN	SIGN:NEAR 
                                 
                                	EXTRN	PRGFIN:NEAR,FILIND:NEAR 
                                 
                                	EXTRN	FILINP:NEAR,CLSALL:NEAR,INDSKC:NEAR 
                                 
                                 
                                	EXTRN	LRUN:NEAR 
                                 
                                	EXTRN	FILGET:NEAR 
                                 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-17
MSDOSU - MS-DOS Constants and Data-Structure Definitions    

                                	EXTRN	INXHRT:NEAR 
                                	EXTRN	SGN:NEAR,ABSFN:NEAR,SQR:NEAR,FDIV:NEAR,FSUB:NEAR 
                                	EXTRN	FMULT:NEAR,RND:NEAR	;MATHPK INTERNALS 
                                	EXTRN	ZERO:NEAR,MOVE:NEAR,FOUT:NEAR,FIN:NEAR,FCOMP:NEAR 
                                	EXTRN	FADD:NEAR,PUSHF:NEAR,INT:NEAR 
                                	EXTRN	MOVFR:NEAR,MOVRF:NEAR,MOVRM:NEAR,INPRT:NEAR,LINPRT:NEAR 
                                	EXTRN	FDIVT:NEAR 
                                	EXTRN	MOVFM:NEAR,MOVMF:NEAR,FADDS:NEAR 
                                	EXTRN	INRART:NEAR,NEG:NEAR 
                                	EXTRN	BSERR:NEAR 
                                	EXTRN	CAT:NEAR,FREFAC:NEAR,FRESTR:NEAR,FRETMP:NEAR,FRETMS:NEAR 
                                	EXTRN	STRCPY:NEAR,GETSTK:NEAR 
                                	EXTRN	STRLIT:NEAR,STRLT2:NEAR,STRLT3:NEAR,STRLTI:NEAR,STROUT:NEAR 
                                	EXTRN	STRPRT:NEAR,STROUI:NEAR 
                                	EXTRN	GETSPA:NEAR,PUTNEW:NEAR,STOP:NEAR,OMERR:NEAR,REASON:NEAR 
                                 
                                	EXTRN	GARBA2:NEAR	;We have our own G. C. 
                                 
                                 
                                	EXTRN	INSTR:NEAR 
                                 
                                	EXTRN	PRINUS:NEAR,PUTTMP:NEAR 
                                 
                                	EXTRN	FOUTH:NEAR,FOUTO:NEAR,STRO$:NEAR,STRH$:NEAR 
                                 
                                 
                                	EXTRN	STRNG$:NEAR 
                                	EXTRN	TON:NEAR,TOFF:NEAR 
                                	EXTRN	SPACE$:NEAR 
                                 
                                	EXTRN	SIGNS:NEAR 
                                 
                                 
                                 
                                 
                                	EXTRN	UMULT:NEAR 
                                 
                                	EXTRN	SIGNC:NEAR,POPHRT:NEAR 
                                 
                                	EXTRN	FINLPT:NEAR 
                                 
                                	EXTRN	CONSIH:NEAR,VMOVFA:NEAR,VMOVAF:NEAR,ISIGN:NEAR,CONIA:NEAR 
                                	EXTRN	VSIGN:NEAR,VDFACS:NEAR 
                                	EXTRN	VMOVMF:NEAR,VMOVFM:NEAR,FRCINT:NEAR,FRCSNG:NEAR,FRCDBL:NEAR 
                                	EXTRN	VNEG:NEAR,PUFOUT:NEAR,DCXBRT:NEAR,IADD:NEAR 
                                	EXTRN	ISUB:NEAR,IMULT:NEAR,ICOMP:NEAR,INEG:NEAR,DADD:NEAR 
                                	EXTRN	DSUB:NEAR,DMULT:NEAR,DDIV:NEAR,DCOMP:NEAR,VINT:NEAR 
                                	EXTRN	FINDBL:NEAR,INEG2:NEAR 
                                	EXTRN	IDIV:NEAR,IMOD:NEAR 
                                	EXTRN	VMOVE:NEAR,VALINT:NEAR,VALSNG:NEAR,FRCSTR:NEAR,CHKSTR:NEAR 
                                	EXTRN	MAKINT:NEAR 
                                	EXTRN	MOVE1:NEAR 
                                 
                                	EXTRN	SCNSEM:NEAR 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-18
MSDOSU - MS-DOS Constants and Data-Structure Definitions    

                                	EXTRN	WHILE:NEAR,WEND:NEAR 
                                	EXTRN	CALLS:NEAR 
                                	EXTRN	PROCHK:NEAR 
                                ;The following block of externals was added on Dec 19, 1982 when BINTRP was 
                                ; Split up after the freeze of GW-BASIC Version 1.0 
                                ; This Split-up was not reflected in the PS1:<BASIC>BINTRP.MAC source. 
                                ; See Tom Corbett if you have any questions. 
                                ; 
 0000                           DSEG	SEGMENT PUBLIC 'DATASG' 
                                	EXTRN	MEMSIZ:WORD,FRETOP:WORD,VARTAB:WORD,STREND:WORD,TXTTAB:WORD 
                                	EXTRN	ARYTAB:WORD 
                                	EXTRN	CURLIN:WORD,DOT:WORD,DATLIN:WORD,NLONLY:WORD,ERRLIN:WORD 
                                	EXTRN	ERRTXT:WORD 
                                	EXTRN	MRGFLG:WORD,CHNFLG:WORD 
                                	EXTRN	SAVSTK:WORD,SAVTXT:WORD,OLDLIN:WORD,NXTLIN:WORD,OLDTXT:WORD 
                                	EXTRN	ONELIN:WORD,ONEFLG:WORD 
                                	EXTRN	CNTOFL:WORD,TRCFLG:WORD,CONSAV:WORD,CONTXT:WORD,CONTYP:WORD 
                                	EXTRN	NUMCON:WORD,CONLO:WORD 
                                	EXTRN	AUTFLG:WORD,AUTLIN:WORD,AUTINC:WORD 
                                	EXTRN	KBUF:WORD,BUFMIN:WORD,BUF:WORD 
                                	EXTRN	PTRFIL:WORD,PTRFLG:WORD,DORES:WORD,VALTYP:WORD,FACLO:WORD 
                                	EXTRN	DFACLO:WORD,FAC:WORD 
                                	EXTRN	TEMP:WORD,TEMP2:WORD,TEMP3:WORD,TEMPA:WORD 
                                	EXTRN	DSCTMP:WORD,TEMPST:WORD 
                                	EXTRN	OPRTYP:WORD 
                                	EXTRN	SUBFLG:WORD,FVALSV:WORD,DEFTBL:WORD,FLGINP:WORD,FLGSCN:WORD 
                                	EXTRN	OVCSTR:WORD,INPPAS:WORD 
                                	EXTRN	USRTAB:WORD,DONUM:WORD,ENDPRG:WORD,ENDFOR:WORD,DATPTR:WORD 
                                	EXTRN	FLGOVC:WORD 
                                	EXTRN	ERRFLG:WORD,SAVSEG:WORD,PRMLN2:WORD,PARM2:WORD,PRMLEN:WORD 
                                	EXTRN	PRMSTK:WORD,PARM1:WORD 
                                	EXTRN	FUNACT:WORD,NOFUNS:WORD,OPTVAL:WORD,OPTFLG:WORD,RNDX:WORD 
 0000                           DSEG	ENDS 
                                 
                                	EXTRN	OPTAB:NEAR,OPCNT:ABS,INTDSP:NEAR,SNGDSP:NEAR,DBLDSP:NEAR 
                                	EXTRN	FRCTBL:NEAR,PRMSIZ:NEAR 
                                	EXTRN	$OVMSG:NEAR,ERRTAB:NEAR,LSTERR:NEAR,DSKERR:NEAR,NONDSK:NEAR 
                                	EXTRN	REDDY:NEAR 
                                	EXTRN	ERRSN:NEAR,ERRDV0:NEAR,ERRRE:NEAR,ERROV:NEAR,ERRMO:NEAR 
                                	EXTRN	ERRTM:NEAR,ERRNF:NEAR 
                                	EXTRN	ERRNR:NEAR,ERRLBO:NEAR,ERRDD:NEAR,ERRUF:NEAR,ERRUE:NEAR 
                                	EXTRN	ERRFC:NEAR 
                                	EXTRN	ERRIFN:NEAR,ERRFNO:NEAR,ERRDNA:NEAR,ERRFDR:NEAR,ERRRAD:NEAR 
                                	EXTRN	ERRDFL:NEAR 
                                	EXTRN	ERRIOE:NEAR,ERRBFM:NEAR,ERRFNF:NEAR,ERRBFN:NEAR,ERRIER:NEAR 
                                	EXTRN	ERRRPE:NEAR 
                                	EXTRN	ERRFAO:NEAR,ERRNMF:NEAR,ERRWH:NEAR,ERRBRN:NEAR,ERRFOV:NEAR 
                                	EXTRN	ERRTMF:NEAR 
                                	EXTRN	ERRFAE:NEAR,ERRUS:NEAR,ERRRG:NEAR,ERROD:NEAR,ERRID:NEAR 
                                	EXTRN	ERRFN:NEAR 
                                	EXTRN	ERRUE1:NEAR	;ERRUE+DSKERR-NONDSK 
                                	EXTRN	DSKER1:NEAR	;DSKERR-NONDSK 
                                 
                                ;The following externs are defined in GWMAIN.MAC 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-19
MSDOSU - MS-DOS Constants and Data-Structure Definitions    

                                ; 
                                	EXTRN	TMERR:NEAR,SNERR:NEAR,CHRGTR:NEAR,MOERR:NEAR,OVERR:NEAR 
                                	EXTRN	FCERR:NEAR,ERROR:NEAR 
                                	EXTRN	CONFAC:NEAR,FRMQNT:NEAR,DATA:NEAR,LETCN4:NEAR,$STPRN:NEAR 
                                	EXTRN	ONECON:NEAR,DBLCON:NEAR 
                                	EXTRN	FRQINT:NEAR,LINGET:NEAR,UFERR:NEAR 
                                 
                                 
                                 
                                 
                                ; 
                                ; The reserved word tables are in another module.  Consequently 
                                ; many things must be declared external.  All of these things 
                                ; are in the code segement or are absolutes (like tokens). 
                                ; I.e., they are not in the data segment. 
                                ; 
                                 
                                	EXTRN	CLINTK:NEAR 
                                	EXTRN	EQULTK:NEAR,ERCTK:NEAR,ERLTK:NEAR 
                                	EXTRN	FNTK:NEAR,FUNDSP:NEAR 
                                	EXTRN	GREATK:NEAR 
                                	EXTRN	INSRTK:NEAR 
                                	EXTRN	LESSTK:NEAR,LSTOPK:NEAR 
                                	EXTRN	MIDTK:NEAR,MINUTK:NEAR 
                                	EXTRN	NMREL:NEAR,NOTTK:NEAR 
                                	EXTRN	ONEFUN:NEAR 
                                	EXTRN	PLUSTK:NEAR 
                                	EXTRN	USRTK:NEAR 
                                	EXTRN	$INKEY$:NEAR,$INPUT:NEAR 
                                	EXTRN	$POINT:NEAR 
                                	EXTRN	$SCREEN:NEAR,$STRING$:NEAR 
                                	EXTRN	$VARPTR:NEAR 
                                ; 
                                ; Since the dispatch table is also no longer in BINTRP many 
                                ; addresses need to be declared internal. 
                                ; 
                                	PUBLIC	DEF 
                                	PUBLIC	FNINP,FNOUT,FNWAIT 
                                	PUBLIC	LABBCK 
                                 
                                	SUBTTL FORMULA EVALUATION CODE 
                                 
                                ; 
                                ; THE FORMULA EVALUATOR STARTS WITH 
                                ; [H,L] POINTING TO THE FIRST CHARACTER OF THE FORMULA. 
                                ; AT THE END [H,L] POINTS TO THE TERMINATOR. 
                                ; THE RESULT IS LEFT IN THE FAC. 
                                ; ON RETURN [A] DOES NOT REFLECT THE TERMINATING CHARACTER 
                                ; 
                                ; THE FORMULA EVALUATOR USES THE OPERATOR TABLE (OPTAB) 
                                ; TO DETERMINE PRECEDENCE AND DISPATCH ADDRESSES FOR 
                                ; EACH OPERATOR. 
                                ; A TEMPORARY RESULT ON THE STACK HAS THE FOLLOWING FORMAT 
                                ; 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-20
FORMULA EVALUATION CODE                                     

                                ; THE ADDRESS OF 'RETAOP' -- THE PLACE TO RETURN ON COMPLETION 
                                ; OF OPERATOR APPLICATION 
                                ; 
                                ; THE FLOATING POINT TEMPORARY RESULT 
                                ; 
                                ; THE ADDRESS OF THE OPERATOR ROUNTINE 
                                ; 
                                ; THE PRECEDENCE OF THE OPERATOR 
                                ; 
                                ; TOTAL 10 BYTES 
                                ; 
                                PUBLIC	FRMEQL 
 0000  E8 0000 E                FRMEQL:	CALL	SYNCHR 
 0003  00 E                     	DB	OFFSET EQULTK	;CHECK FOR EQUAL SIGN 
 0004  EB 05 90                 	JMP	FRMEVL 
                                PUBLIC	FRMPRN 
 0007  E8 0000 E                FRMPRN:	CALL	SYNCHR 
 000A  28                       	DB	OFFSET "("	;GET PAREN BEFORE FORMULA 
                                PUBLIC	FRMEVL 
 000B  4B                       FRMEVL:	DEC	BX		;BACK UP CHARACTER POINTER 
                                PUBLIC	FRMCHK 
 000C  B6 00                    FRMCHK:	MOV	DH,LOW 0	;INITIAL DUMMY PRECEDENCE IS 0 
 000E  52                       LPOPER:	PUSH	DX		;SAVE PRECEDENCE 
 000F  B1 01                    	MOV	CL,LOW 1	;EXTRA SPACE NEEDED FOR RETURN ADDRESS 
 0011  E8 0000 E                	CALL	GETSTK		;MAKE SURE THERE IS ROOM FOR RECURSIVE CALLS 
 0014  E8 01C7 R                	CALL	EVAL		;EVALUATE SOMETHING 
                                				;RESET OVERFLOW PRINTING BACK TO NORMAL 
 0017  32 C0                    	XOR	AL,AL		;(SET TO 1 AT FUNDSP TO SUPPRESS 
 0019  A2 0000 E                	MOV	BYTE PTR FLGOVC,AL	;MULTIPLE OVERFLOW MESSAGES) 
                                PUBLIC	TSTOP 
 001C  89 1E 0000 E             TSTOP:	MOV	TEMP2,BX	;SAVE TEXT POINTER 
 0020  8B 1E 0000 E             RETAOP:	MOV	BX,TEMP2	;RESTORE TEXT PTR 
 0024  59                       	POP	CX		;POP OFF THE PRECEDENCE OF OLDOP 
 0025  8A 07                    NOTSTV:	MOV	AL,BYTE PTR [BX]	;GET NEXT CHARACTER 
 0027  89 1E 0000 E             	MOV	TEMP3,BX	;SAVE UPDATED CHARACTER POINTER 
 002B  3C 00 E                  	CMP	AL,LOW OFFSET GREATK	;IS IT AN OPERATOR? 
 002D  73 01                    	JNB	SHORT $+3 
 002F  C3                       	RET			;NO, ALL DONE (THIS CAN RESULT IN OPERATOR 
                                				;APPLICATION OR ACTUAL RETURN) 
 0030  3C 01 E                  	CMP	AL,LOW OFFSET LESSTK+1	;SOME KIND OF RELATIONAL? 
 0032  72 73                    	JB	SHORT DORELS	;YES, DO IT 
 0034  2C 00 E                  	SUB	AL,LOW OFFSET PLUSTK	;SUBTRACT OFFSET FOR FIRST ARITHMETIC 
 0036  8A D0                    	MOV	DL,AL		;MUST MULTIPLY BY 3 SINCE 
                                				;OPTAB ENTRIES ARE 3 LONG 
 0038  75 0C                    	JNZ	SHORT NTPLUS	;NOT ADDITION OP 
 003A  A0 0000 E                	MOV	AL,BYTE PTR VALTYP	;SEE IF LEFT PART IS STRING 
 003D  3C 03                    	CMP	AL,LOW 3	;SEE IF ITS A STRING 
 003F  8A C2                    	MOV	AL,DL		;REFETCH OP-VALUE 
 0041  75 03                    	JNZ	SHORT ??L000 
 0043  E9 0000 E                	JMP	CAT		;MUST BE CAT 
 0046                           ??L000: 
 0046                           NTPLUS: 
 0046  3C 00 E                  	CMP	AL,LOW OFFSET LSTOPK	;HIGHER THAN THE LAST OP? 
 0048  72 01                    	JNAE	SHORT $+3 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-21
FORMULA EVALUATION CODE                                     

 004A  C3                       	RET			;YES, MUST BE TERMINATOR 
 004B  BB 0000 E                	MOV	BX,OFFSET OPTAB	;CREATE INDEX INTO OPTAB 
 004E  B6 00                    	MOV	DH,LOW 0	;MAKE HIGH BYTE OF OFFSET=0 
 0050  03 DA                    	ADD	BX,DX		;ADD IN CALCULATED OFFSET 
 0052  8A C5                    	MOV	AL,CH		;[A] GETS OLD PRECEDENCE 
                                	INS86	56		;CODE SEGMENT FETCH 
 0055  8A 37                    	MOV	DH,BYTE PTR [BX]	;REMEMBER NEW PRECEDENCE 
 0057  3A C6                    	CMP	AL,DH		;OLD-NEW 
 0059  72 01                    	JNAE	SHORT $+3 
 005B  C3                       	RET			;MUST APPLY OLD OP 
                                				;IF HAS GREATER OR = PRECEDENCE 
                                				;NEW OPERATOR 
                                 
 005C  51                       	PUSH	CX		;SAVE THE OLD PRECEDENCE 
 005D  B9 0020 R                	MOV	CX,OFFSET RETAOP	;PUT ON THE ADDRESS OF THE 
 0060  51                       	PUSH	CX		;PLACE TO RETURN TO AFTER OPERATOR APPLICATION 
 0061  8A C6                    	MOV	AL,DH		;SEE IF THE OPERATOR IS EXPONENTIATION 
 0063  3C 7F                    	CMP	AL,LOW 127	;WHICH HAS PRECEDENCE 127 
 0065  74 62                    	JZ	SHORT EXPSTK	;IF SO, "FRCSNG" AND MAKE A SPECIAL STACK ENTRY 
 0067  3C 51                    	CMP	AL,LOW 81	;SEE IF THE OPERATOR IS "AND" OR "OR" 
 0069  72 6B                    	JB	SHORT ANDORD	;AND IF SO "FRCINT" AND 
                                				;MAKE A SPECIAL STACK ENTRY 
 006B  24 FE                    	AND	AL,LOW 254	;MAKE 123 AND 122 BOTH MAP TO 122 
 006D  3C 7A                    	CMP	AL,LOW 122	;MAKE A SPECIAL CHECK FOR "MOD" AND "IDIV" 
 006F  74 65                    	JZ	SHORT ANDORD	;IF SO, COERCE ARGUMENTS TO INTEGER 
                                ; THIS CODE PUSHES THE CURRENT VALUE IN THE FAC 
                                ; ONTO THE STACK, EXCEPT IN THE CASE OF STRINGS IN WHICH IT CALLS 
                                ; TYPE MISMATCH ERROR. [D] AND [E] ARE PRESERVED. 
                                ; 
 0071                           NUMREL: 
 0071  A0 0000 E                	MOV	AL,BYTE PTR VALTYP	;FIND OUT WHAT TYPE OF VALUE WE ARE SAVING 
 0074  2C 03                    	SUB	AL,LOW 3	;SETUP THE CONDITION CODES 
                                				;SET ZERO FOR STRINGS 
 0076  75 03                    	JNZ	SHORT ??L001 
 0078  E9 0000 E                	JMP	TMERR 
 007B                           ??L001: 
                                	INS86	377,66,FACLO	;PUSH FACLO 
 007F  79 03                    	JNS	SHORT ??L002 
 0081  EB 12 90                 	JMP	VPUSHD		;ALL DONE IF THE DATA WAS AN INTEGER 
 0084                           ??L002: 
                                	INS86	377,66,FACLO+2	;PUSH FAC-1,0 ON THE STACK 
 0088  7A 03                    	JP	SHORT ??L003 
 008A  EB 09 90                 	JMP	VPUSHD		;ALL DONE IF WE HAD A SNG 
 008D                           ??L003: 
                                	INS86	377,66,DFACLO	;PUSH ON LOW BYTES OF DP FAC 
                                	INS86	377,66,DFACLO+2	;PUSH ON NEXT TWO BYES OF DP FAC 
 0095                           VPUSHD: 
 0095  04 03                    	ADD	AL,LOW 3	;FIX [A] TO BE THE VALTYP OF THE NUMBER 
                                				;JUST PUSHED ON THE STACK 
 0097  8A CA                    	MOV	CL,DL		;[C]=OPERATOR NUMBER 
 0099  8A E8                    	MOV	CH,AL		;[B]=TYPE OF VALUE ON THE STACK 
 009B  51                       	PUSH	CX		;SAVE THESE THINGS FOR APPLOP 
 009C  B9 0103 R                	MOV	CX,OFFSET APPLOP	;GENERAL OPERATOR APPLICATION 
                                				;ROUTINE -- DOES TYPE CONVERSIONS 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-22
FORMULA EVALUATION CODE                                     

 009F  51                       FINTMP:	PUSH	CX		;SAVE PLACE TO GO 
 00A0  8B 1E 0000 E             	MOV	BX,TEMP3	;REGET THE TEXT POINTER 
 00A4  E9 000E R                	JMP	LPOPER 
 00A7  B6 00                    DORELS:	MOV	DH,LOW 0	;ASSUME NO RELATION OPS 
                                				;ALSO SETUP THE HIGH ORDER OF THE INDEX INTO OPTAB 
 00A9  2C 00 E                  LOPREL:	SUB	AL,LOW OFFSET GREATK	;IS THIS ONE RELATION? 
 00AB  72 34                    	JB	SHORT FINREL	;RELATIONS ALL THROUGH 
 00AD  3C 00 E                  	CMP	AL,LOW OFFSET NMREL	;IS IT REALLY RELATIONAL? 
 00AF  73 30                    	JAE	SHORT FINREL	;NO JUST BIG 
 00B1  3C 01                    	CMP	AL,LOW 1	;SET UP BITS BY MAPPING 
 00B3  D0 D0                    	RCL	AL,1		;0 TO 1 1 TO 2 AND 2 TO 4 
 00B5  32 C6                    	XOR	AL,DH		;BRING IN THE OLD BITS 
 00B7  3A C6                    	CMP	AL,DH		;MAKE SURE RESULT IS BIGGER 
 00B9  8A F0                    	MOV	DH,AL		;SAVE THE MASK 
 00BB  73 03                    	JAE	SHORT ??L004 
 00BD  E9 0000 E                	JMP	SNERR		;DON'T ALLOW TWO OF THE SAME 
 00C0                           ??L004: 
 00C0  89 1E 0000 E             	MOV	TEMP3,BX	;SAVE CHARACTER POINTER 
 00C4  E8 0000 E                	CALL	CHRGTR		;GET THE NEXT CANDIDATE 
 00C7  EB E0                    	JMP	SHORT LOPREL 
                                ; 
                                ; FOR EXPONENTIATION WE WANT TO FORCE THE CURRENT VALUE IN THE FAC 
                                ; TO BE SINGLE PRECISION. WHEN APPLICATION TIME COMES WE FORCE 
                                ; THE RIGHT HAND OPERAND TO SINGLE PRECISION AS WELL 
                                ; 
                                	EXTRN	FPWRQ:NEAR 
 00C9  E8 0000 E                EXPSTK:	CALL	FRCSNG		;COERCE LEFT HAND OPERAND 
 00CC  E8 0000 E                	CALL	PUSHF		;PUT IT ON THE STACK 
 00CF  B9 0000 E                	MOV	CX,OFFSET FPWRQ	;PLACE TO COERCE RIGHT HAND 
                                				;OPERAND AND DO EXPONENTIATION 
 00D2  B6 7F                    	MOV	DH,LOW 127	;RESTORE THE PRECEDENCE 
 00D4  EB C9                    	JMP	SHORT FINTMP	;FINISH ENTRY AND EVALUATE MORE FORMULA 
                                ; 
                                ; FOR "AND" AND "OR" AND "\" AND "MOD" WE WANT TO FORCE THE CURRENT VALUE 
                                ; IN THE FAC TO BE AN INTEGER, AND AT APPLICATION TIME FORCE THE RIGHT 
                                ; HAND OPERAND TO BE AN INTEGER 
                                ; 
 00D6  52                       ANDORD:	PUSH	DX		;SAVE THE PRECEDENCE 
 00D7  E8 0000 E                	CALL	FRCINT 
 00DA  5A                       	POP	DX		;[D]=PRECEDENCE 
 00DB  53                       	PUSH	BX		;PUSH THE LEFT HAND OPERAND 
 00DC  B9 0441 R                	MOV	CX,OFFSET DANDOR	;"AND" AND "OR" DOER 
 00DF  EB BE                    	JMP	SHORT FINTMP	;PUSH ON THIS ADDRESS,PRECEDENCE 
                                				;AND CONTINUE EVALUATION 
                                ; 
                                ; HERE TO BUILD AN ENTRY FOR A RELATIONAL OPERATOR 
                                ; STRINGS ARE TREATED SPECIALLY. NUMERIC COMPARES ARE DIFFERENT 
                                ; FROM MOST OPERATOR ENTRIES ONLY IN THE FACT THAT AT THE 
                                ; BOTTOM INSTEAD OF HAVING RETAOP, DOCMP AND THE RELATIONAL 
                                ; BITS ARE STORED. STRINGS HAVE STRCMP,THE POINTER AT THE STRING DESCRIPTOR, 
                                ; DOCMP AND THE RELATIONAL BITS. 
                                ; 
 00E1  8A C5                    FINREL:	MOV	AL,CH		;[A]=OLD PRECEDENCE 
 00E3  3C 64                    	CMP	AL,LOW 100	;RELATIONALS HAVE PRECEDENCE 100 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-23
FORMULA EVALUATION CODE                                     

 00E5  72 01                    	JNAE	SHORT $+3 
 00E7  C3                       	RET			;APPLY EARLIER OPERATOR IF IT HAS 
                                				;HIGHER PRECEDENCE 
 00E8  51                       	PUSH	CX		;SAVE THE OLD PRECEDENCE 
 00E9  52                       	PUSH	DX		;SAVE [D]=RELATIONAL BITS 
 00EA  BA 6400 E                	MOV	DX,OFFSET 256*100+OPCNT	;[D]=PRECEDENCE=100 
                                				;[E]=DISPATCH OFFSET FOR 
                                				;COMPARES IN APPLOP=4 
                                				;IN CASE THIS IS A NUMERIC COMPARE 
 00ED  BB 0413 R                	MOV	BX,OFFSET DOCMP	;ROUTINE TO TAKE COMPARE ROUTINE RESULT 
                                				;AND RELATIONAL BITS AND RETURN THE ANSWER 
 00F0  53                       	PUSH	BX		;DOES A JMP TO RETAOP WHEN DONE 
 00F1  E8 0435 R                	CALL	GETYPR		;SEE IF WE HAVE A NUMERIC COMPARE 
 00F4  74 03                    	JZ	SHORT ??L005 
 00F6  E9 0071 R                	JMP	NUMREL		;YES, BUILD AN APPLOP ENTRY 
 00F9                           ??L005: 
 00F9  8B 1E 0000 E             	MOV	BX,FACLO	;GET THE POINTER AT THE STRING DESCRIPTOR 
 00FD  53                       	PUSH	BX		;SAVE IT FOR STRCMP 
 00FE  B9 0000 E                	MOV	CX,OFFSET STRCMP	;STRING COMPARE ROUTINE 
 0101  EB 9C                    	JMP	SHORT FINTMP	;PUSH THE ADDRESS, REGET THE TEXT POINTER 
                                				;SAVE THE PRECEDENCE AND SCAN 
                                				;MORE OF THE FORMULA 
                                ; 
                                ; APPLOP IS RETURNED TO WHEN IT IS TIME TO APPLY AN ARITHMETIC 
                                ; OR NUMERIC COMPARISON OPERATION. 
                                ; THE STACK HAS A DOUBLE BYTE ENTRY WITH THE OPERATOR 
                                ; NUMBER AND THE VALTYP OF THE VALUE ON THE STACK. 
                                ; APPLOP DECIDES WHAT VALUE LEVEL THE OPERATION 
                                ; WILL OCCUR AT, AND CONVERTS THE ARGUMENTS. APPLOP 
                                ; USES DIFFERENT CALLING CONVENTIONS FOR EACH VALUE TYPE. 
                                ; INTEGERS: LEFT IN [D,E] RIGHT IN [H,L] 
                                ; SINGLES:  LEFT IN [B,C,D,E] RIGHT IN THE FAC 
                                ; DOUBLES:  LEFT IN FAC   RIGHT IN ARG 
                                ; 
 0103  59                       APPLOP:	POP	CX		;[B]=STACK OPERAND VALUE TYPE 
                                				;[C]=OPERATOR OFFSET 
 0104  8A C1                    	MOV	AL,CL		;SAVE IN MEMORY SINCE THE STACK WILL BE BUSY 
 0106  A2 0000 E                	MOV	BYTE PTR OPRTYP,AL	;A RAM LOCATION 
 0109  A0 0000 E                	MOV	AL,BYTE PTR VALTYP	;GET VALTYP OF FAC 
 010C  3A C5                    	CMP	AL,CH		;ARE VALTYPES THE SAME? 
 010E  75 0D                    	JNZ	SHORT VALNSM	;NO 
 0110  3C 02                    	CMP	AL,LOW 2	;INTEGER? 
 0112  74 28                    	JZ	SHORT INTDPC	;YES, DISPATCH!! 
 0114  3C 04                    	CMP	AL,LOW 4	;SINGLE? 
 0116  75 03                    	JNZ	SHORT ??L006 
 0118  E9 019A R                	JMP	SNGDPC		;YES, DISPATCH!! 
 011B                           ??L006: 
 011B  73 39                    	JAE	SHORT DBLDPC	;MUST BE DOUBLE, DISPATCH!! 
 011D  8A F0                    VALNSM:	MOV	DH,AL		;SAVE IN [D] 
 011F  8A C5                    	MOV	AL,CH		;CHECK FOR DOUBLE 
 0121  3C 08                    	CMP	AL,LOW 8	;PRECISION ENTRY ON THE STACK 
 0123  74 2E                    	JZ	SHORT STKDBL	;FORCE FAC TO DOUBLE 
 0125  8A C6                    	MOV	AL,DH		;GET VALTYPE OF FAC 
 0127  3C 08                    	CMP	AL,LOW 8	;AND IF SO, CONVERT THE STACK OPERAND 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-24
FORMULA EVALUATION CODE                                     

 0129  74 57                    	JZ	SHORT FACDBL	;TO DOUBLE PRECISION 
 012B  8A C5                    	MOV	AL,CH		;SEE IF THE STACK ENTRY IS SINGLE 
 012D  3C 04                    	CMP	AL,LOW 4	;PRECISION AND IF SO, CONVERT 
 012F  74 66                    	JZ	SHORT STKSNG	;THE FAC TO SINGLE PRECISION 
 0131  8A C6                    	MOV	AL,DH		;SEE IF THE FAC IS SINGLE PRECISION 
 0133  3C 03                    	CMP	AL,LOW 3	;AND IF SO CONVERT THE STACK TO SINGLE 
 0135  75 03                    	JNZ	SHORT ??L007 
 0137  E9 0000 E                	JMP	TMERR		;BLOW UP ON RIGHT HAND STRING OPERAND 
 013A                           ??L007: 
 013A  73 65                    	JAE	SHORT FACSNG	;PRECISION 
                                				;NOTE: THE STACK MUST BE INTEGER AT THIS POINT 
 013C  BB 0000 E                INTDPC:	MOV	BX,OFFSET INTDSP	;INTEGER INTEGER CASE 
 013F  B5 00                    	MOV	CH,LOW 0	;SPECIAL DISPATCH FOR SPEED 
 0141  03 D9                    	ADD	BX,CX		;[H,L] POINTS TO THE ADDRESS TO GO TO 
 0143  03 D9                    	ADD	BX,CX 
                                	INS86	56		;FETCH FROM CODE SEGMENT 
 0146  8A 0F                    	MOV	CL,BYTE PTR [BX]	;[B,C]=ROUTINE ADDRESS 
 0148  43                       	INC	BX 
                                	INS86	56		;FETCH FROM CODE SEGMENT 
 014A  8A 2F                    	MOV	CH,BYTE PTR [BX] 
 014C  5A                       	POP	DX		;[D,E]=LEFT HAND OPERAND 
 014D  8B 1E 0000 E             	MOV	BX,FACLO	;[H,L]=RIGHT HAND OPERAND 
 0151  51                       	PUSH	CX		;DISPATCH 
 0152  C3                       	RET 
                                ; 
                                ; THE STACK OPERAND IS DOUBLE PRECISION, SO 
                                ; THE FAC MUST BE FORCED TO DOUBLE PRECISION, MOVED INTO ARG 
                                ; AND THE STACK VALUE POPED INTO THE FAC 
                                ; 
 0153  E8 0000 E                STKDBL:	CALL	FRCDBL		;MAKE THE FAC DOUBLE PRECISION 
 0156  E8 0000 E                DBLDPC:	CALL	VMOVAF		;MOVE THE FAC INTO ARG 
 0159  5B                       	POP	BX		;POP OFF THE STACK OPERAND INTO THE FAC 
 015A  89 1E 0002 E             	MOV	DFACLO+2,BX 
 015E  5B                       	POP	BX 
 015F  89 1E 0000 E             	MOV	DFACLO,BX	;STORE LOW BYTES AWAY 
 0163                           SNGDBL:	POPR			;POP OFF A FOUR BYTE VALUE 
 0165  E8 0000 E                	CALL	MOVFR		;INTO THE FAC 
 0168  E8 0000 E                SETDBL:	CALL	FRCDBL		;MAKE SURE THE LEFT OPERAND IS 
                                				;DOUBLE PRECISION 
 016B  BB 0000 E                	MOV	BX,OFFSET DBLDSP	;DISPATCH TO A DOUBLE PRECISION ROUTINE 
 016E  A0 0000 E                DODSP:	MOV	AL,BYTE PTR OPRTYP	;RECALL WHICH OPERAND IT WAS 
 0171  D0 C0                    	ROL	AL,1		;CREATE A DISPATCH OFFSET, SINCE 
                                				;TABLE ADDRESSES ARE TWO BYTES 
 0173  02 C3                    	ADD	AL,BL		;ADD LOW BYTE OF ADDRESS 
 0175  8A D8                    	MOV	BL,AL		;SAVE BACK 
 0177  12 C7                    	ADC	AL,BH		;ADD HIGH BYTE 
 0179  2A C3                    	SUB	AL,BL		;SUBTRACT LOW 
 017B  8A F8                    	MOV	BH,AL		;RESULT BACK 
                                	INS86	56		;FETCH FROM CODE SEGMENT 
 017E  8B 1F                    	MOV	BX,[BX]		;FETCH THE ADDRESS 
 0180  FF E3                    	JMP	BX		;AND PERFORM THE OPERATION, RETURNING 
                                				;TO RETAOP, EXCEPT FOR COMPARES WHICH 
                                				;RETURN TO DOCMP 
                                ; 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-25
FORMULA EVALUATION CODE                                     

                                ; THE FAC IS DOUBLE PRECISION AND THE STACK IS EITHER 
                                ; INTEGER OR SINGLE PRECISION AND MUST BE CONVERTED 
                                ; 
 0182  8A C5                    FACDBL:	MOV	AL,CH		;GET THE VALUE TYPE INTO [A] 
 0184  50                       	PUSH	AX		;SAVE THE STACK VALUE TYPE 
 0185  E8 0000 E                	CALL	VMOVAF		;MOVE THE FAC INTO ARG 
 0188  58                       	POP	AX		;POP THE STACK VALUE TYPE INTO [A] 
 0189  A2 0000 E                	MOV	BYTE PTR VALTYP,AL	;PUT IT IN VALTYP FOR THE FORCE 
                                				;ROUTINE 
 018C  3C 04                    	CMP	AL,LOW 4	;SEE IF ITS SINGLE, SO WE KNOW 
                                				;HOW TO POP THE VALUE OFF 
 018E  74 D3                    	JZ	SHORT SNGDBL	;IT'S SINGLE PRECISION 
                                				;SO DO A POPR / CALL MOVFR 
 0190  5B                       	POP	BX		;POP OFF THE INTEGER VALUE 
 0191  89 1E 0000 E             	MOV	FACLO,BX	;SAVE IT FOR CONVERSION 
 0195  EB D1                    	JMP	SHORT SETDBL	;SET IT UP 
                                ; 
                                ; THIS IS THE CASE WHERE THE STACK IS SINGLE PRECISION 
                                ; AND THE FAC IS EITHER SINGLE PRECISION OR INTEGER 
                                ; 
 0197  E8 0000 E                STKSNG:	CALL	FRCSNG		;CONVERT THE FAC IF NECESSARY 
 019A                           SNGDPC:	POPR			;PUT THE LEFT HAND OPERAND IN THE REGISTERS 
 019C  BB 0000 E                SNGDO:	MOV	BX,OFFSET SNGDSP	;SETUP THE DISPATCH ADDRESS 
                                				;FOR THE SINGLE PRECISION OPERATOR ROUTINES 
 019F  EB CD                    	JMP	SHORT DODSP	;DISPATCH 
                                ; 
                                ; THIS IS THE CASE WHERE THE FAC IS SINGLE PRECISION AND THE STACK 
                                ; IS AN INTEGER. 
                                ; 
 01A1  5B                       FACSNG:	POP	BX		;POP OFF THE INTEGER ON THE STACK 
 01A2  E8 0000 E                	CALL	PUSHF		;SAVE THE FAC ON THE STACK 
 01A5  E8 0000 E                	CALL	CONSIH		;CONVERT [H,L] TO A SINGLE PRECISION 
                                				;NUMBER IN THE FAC 
 01A8  E8 0000 E                	CALL	MOVRF		;PUT THE LEFT HAND OPERAND IN THE REGISTERS 
 01AB  5B                       	POP	BX		;RESTORE THE FAC 
 01AC  89 1E FFFF E             	MOV	FAC-1,BX	;FROM THE STACK 
 01B0  5B                       	POP	BX 
 01B1  89 1E 0000 E             	MOV	FACLO,BX 
 01B5  EB E5                    	JMP	SHORT SNGDO	;PERFORM THE OPERATION 
                                ; 
                                ; HERE TO DO INTEGER DIVISION. SINCE WE WANT 1/3 TO BE 
                                ; .333333 AND NOT ZERO WE HAVE TO FORCE BOTH ARGUMENTS 
                                ; TO BE SINGLE-PRECISION FLOATING POINT NUMBERS 
                                ; AND USE FDIV 
                                ; 
                                PUBLIC	INTDIV 
 01B7  53                       INTDIV:	PUSH	BX		;SAVE THE RIGHT HAND ARGUMENT 
 01B8  87 DA                    	XCHG	BX,DX		;[H,L]=LEFT HAND ARGUMENT 
 01BA  E8 0000 E                	CALL	CONSIH		;CONVERT [H,L] TO A SINGLE-PRECISION 
                                				;NUMBER IN THE FAC 
 01BD  5B                       	POP	BX		;GET BACK THE RIGHT HAND ARGUMENT 
 01BE  E8 0000 E                	CALL	PUSHF		;PUSH THE CONVERTED LEFT HAND ARGUMENT 
                                				;ONTO THE STACK 
 01C1  E8 0000 E                	CALL	CONSIH		;CONVERT THE RIGHT HAND ARGUMENT TO A 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-26
FORMULA EVALUATION CODE                                     

                                				;SINGLE PRECISION NUMBER IN THE FAC 
 01C4  E9 0000 E                	JMP	FDIVT 
                                				;REGISTERS THE LEFT HAND ARGUMENT 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-27
FORMULA EVALUATION CODE                                     

                                	PAGE 
                                 
                                	SUBTTL EVAL - EVALUATE VARIABLE, CONSTANT, FUNCTION CALL 
                                PUBLIC	EVAL 
 01C7                           EVAL: 
 01C7  E8 0000 E                	CALL	CHRGTR 
 01CA  75 03                    	JNZ	SHORT ??L008 
 01CC  E9 0000 E                	JMP	MOERR		;TEST FOR MISSING OPERAND - IF NONE GIVE ERROR 
 01CF                           ??L008: 
 01CF  73 03                    	JAE	SHORT ??L009 
 01D1  E9 0000 E                	JMP	FIN		;IF NUMERIC, INTERPRET CONSTANT 
 01D4                           ??L009: 
 01D4  E8 0000 E                	CALL	ISLET2		;VARIABLE NAME? 
 01D7  72 03                    	JNAE	SHORT ??L010 
 01D9  E9 02BD R                	JMP	ISVAR		;AN ALPHABETIC CHARACTER MEANS YES 
 01DC                           ??L010: 
 01DC  3C 01 E                  	CMP	AL,LOW OFFSET DBLCON+1	;IS IT AN EMBEDED CONSTANT 
 01DE  73 03                    	JAE	SHORT ??L011 
 01E0  E9 0000 E                	JMP	CONFAC		;RESCAN THE TOKEN & RESTORE OLD TEXT PTR 
 01E3                           ??L011: 
                                	EXTRN	EVALX:NEAR 
 01E3  E8 0000 E                	CALL	EVALX		;Handle extended functions. 
 01E6  FE C0                    	INC	AL		;IS IT A FUNCTION CALL (PRECEDED BY 377) 
 01E8  75 03                    	JNZ	SHORT ??L012 
 01EA  E9 0387 R                	JMP	ISFUN		;YES, DO IT 
 01ED                           ??L012: 
 01ED  FE C8                    	DEC	AL		;FIX A BACK 
 01EF  3C 00 E                  	CMP	AL,LOW OFFSET PLUSTK	;IGNORE "+" 
 01F1  74 D4                    	JZ	SHORT EVAL 
 01F3  3C 00 E                  	CMP	AL,LOW OFFSET MINUTK	;NEGATION? 
 01F5  75 03                    	JNZ	SHORT ??L013 
 01F7  E9 02AE R                	JMP	DOMIN 
 01FA                           ??L013: 
 01FA  3C 22                    	CMP	AL,LOW 34	;STRING CONSTANT? 
 01FC  75 03                    	JNZ	SHORT ??L014 
 01FE  E9 0000 E                	JMP	STRLTI		;IF SO BUILD A DESCRIPTOR IN A TEMPORARY 
 0201                           ??L014: 
                                				;DESCRIPTOR LOCATION AND PUT A POINTER TO THE 
                                				;DESCRIPTOR IN FACLO. 
 0201  3C 00 E                  	CMP	AL,LOW OFFSET NOTTK	;CHECK FOR "NOT" OPERATOR 
 0203  75 03                    	JNZ	SHORT ??L015 
 0205  E9 0423 R                	JMP	NOTER 
 0208                           ??L015: 
 0208  3C 26                    	CMP	AL,LOW "&"	;OCTAL CONSTANT? 
 020A  75 03                    	JNZ	SHORT ??L016 
 020C  E9 02E7 R                	JMP	OCTCNS 
 020F                           ??L016: 
 020F  3C 00 E                  	CMP	AL,LOW OFFSET ERCTK 
 0211  75 0C                    	JNZ	SHORT NTERC	;NO, TRY OTHER POSSIBILITIES 
 0213  E8 0000 E                	CALL	CHRGTR		;GRAB FOLLOWING CHAR 
 0216  A0 0000 E                	MOV	AL,BYTE PTR ERRFLG	;GET THE ERROR CODE. 
 0219  53                       NTDERC:	PUSH	BX		;SAVE TEXT POINTER 
 021A  E8 0485 R                	CALL	SNGFLT		;RETURN THE VALUE 
 021D  5B                       	POP	BX		;RESTORE TEXT POINTER 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-28
EVAL - EVALUATE VARIABLE, CONSTANT, FUNCTION CALL           

 021E  C3                       	RET			;ALL DONE. 
                                 
 021F  3C 00 E                  NTERC:	CMP	AL,LOW OFFSET ERLTK	;ERROR LINE NUMBER VARIABLE. 
 0221  75 0D                    	JNZ	SHORT NTERL	;NO, TRY MORE THINGS. 
 0223  E8 0000 E                	CALL	CHRGTR		;GET FOLLOWING CHARACTER 
 0226  53                       	PUSH	BX		;SAVE TEXT POINTER 
 0227  8B 1E 0000 E             	MOV	BX,ERRLIN	;GET THE OFFENDING LINE # 
 022B  E8 0000 E                	CALL	INEG2		;FLOAT 2 BYTE UNSINGED INT 
 022E  5B                       	POP	BX		;RESTORE TEXT POINTER 
 022F  C3                       	RET			;RETURN 
 0230                           NTERL: 
 0230  3C 00 E                  	CMP	AL,LOW OFFSET $VARPTR	;VARPTR CALL? 
 0232  75 33                    	JNZ	SHORT NTVARP	;NO 
 0234  E8 0000 E                	CALL	CHRGTR		;EAT CHAR AFTER 
                                	EXTRN	VARPT2:NEAR 
 0237  3C 24                    	CMP	AL,LOW "$" 
 0239  75 03                    	JNZ	SHORT ??L017 
 023B  E9 0000 E                	JMP	VARPT2		;branch if VARPTR$(x) 
 023E                           ??L017: 
 023E  E8 0000 E                	CALL	SYNCHR 
 0241  28                       	DB	OFFSET "("	;EAT LEFT PAREN 
                                	EXTRN	GETPTR:NEAR 
 0242  3C 23                    	CMP	AL,LOW "#"	;WANT POINTER TO FILE? 
 0244  75 0B                    	JNZ	SHORT NVRFIL	;NO, MUST BE VARIABLE 
 0246  E8 0798 R                	CALL	GTBYTC		;READ FILE # 
 0249  53                       	PUSH	BX		;SAVE TEXT PTR 
 024A  E8 0000 E                	CALL	GETPTR		;GET PTR TO FILE 
 024D  5B                       	POP	BX		;RESTORE TEXT PTR 
 024E  EB 04 90                 	JMP	VARRET 
 0251                           NVRFIL: 
                                	EXTRN	PTRGTN:NEAR 
 0251  E8 0000 E                	CALL	PTRGTN		;GET ADDRESS OF VARIABLE 
 0254  E8 0000 E                VARRET:	CALL	SYNCHR 
 0257  29                       	DB	OFFSET ")"	;EAT RIGHT PAREN 
 0258  53                       	PUSH	BX		;SAVE TEXT POINTER 
 0259  87 DA                    	XCHG	BX,DX		;GET VALUE TO RETURN IN [H,L] 
 025B  0B DB                    	OR	BX,BX		;MAKE SURE NOT UNDEFINED VAR 
                                				;SET CC'S. ZERO IF UNDEF 
 025D  75 03                    	JNZ	SHORT ??L018 
 025F  E9 0000 E                	JMP	FCERR		;ALL OVER IF UNDEF (DONT WANT 
 0262                           ??L018: 
                                				;USER POKING INTO ZERO IF HE'S 
                                				;TOO LAZY TO CHECK 
 0262  E8 0000 E                	CALL	MAKINT		;MAKE IT AN INT 
 0265  5B                       	POP	BX		;RESTORE TEXT POINTER 
 0266  C3                       	RET 
 0267                           NTVARP: 
 0267  3C 00 E                  	CMP	AL,LOW OFFSET USRTK	;USER ASSEMBLY LANGUAGE ROUTINE?? 
 0269  75 03                    	JNZ	SHORT ??L019 
 026B  E9 048E R                	JMP	USRFN		;GO HANDLE IT 
 026E                           ??L019: 
 026E  3C 00 E                  	CMP	AL,LOW OFFSET INSRTK	;IS IT THE INSTR FUNCTION?? 
 0270  75 03                    	JNZ	SHORT ??L020 
 0272  E9 0000 E                	JMP	INSTR		;DISPATCH 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-29
EVAL - EVALUATE VARIABLE, CONSTANT, FUNCTION CALL           

 0275                           ??L020: 
 0275  3C 00 E                  	CMP	AL,LOW OFFSET $SCREEN 
 0277  75 03                    	JNZ	SHORT ??L021 
                                EXTRN	SCRENF:NEAR 
 0279  E9 0000 E                	JMP	SCRENF 
 027C                           ??L021: 
 027C  3C 00 E                  	CMP	AL,LOW OFFSET $POINT 
 027E  75 03                    	JNZ	SHORT ??L022 
                                EXTRN	POINT:NEAR 
 0280  E9 0000 E                	JMP	POINT 
 0283                           ??L022: 
                                	EXTRN	INKEY:NEAR 
 0283  3C 00 E                  	CMP	AL,LOW OFFSET $INKEY$	;INKEY$ FUNCTION? 
 0285  75 03                    	JNZ	SHORT ??L023 
 0287  E9 0000 E                	JMP	INKEY 
 028A                           ??L023: 
 028A  3C 00 E                  	CMP	AL,LOW OFFSET $STRING$	;STRING FUNCTION? 
 028C  75 03                    	JNZ	SHORT ??L024 
 028E  E9 0000 E                	JMP	STRNG$		;YES, GO DO IT 
 0291                           ??L024: 
                                	EXTRN	FIXINP:NEAR 
 0291  3C 00 E                  	CMP	AL,LOW OFFSET $INPUT	;FIXED LENGTH INPUT? 
 0293  75 03                    	JNZ	SHORT ??L025 
 0295  E9 0000 E                	JMP	FIXINP		;YES 
 0298                           ??L025: 
 0298  3C 00 E                  	CMP	AL,LOW OFFSET CLINTK	;WANT TO KNOW CURRENT LINE ON SCREEN? 
 029A  75 03                    	JNZ	SHORT ??L026 
                                EXTRN	GETLIN:NEAR 
 029C  E9 0000 E                	JMP	GETLIN		;YES 
 029F                           ??L026: 
 029F  3C 00 E                  	CMP	AL,LOW OFFSET FNTK	;USER-DEFINED FUNCTION? 
 02A1  75 03                    	JNZ	SHORT ??L027 
 02A3  E9 0547 R                	JMP	FNDOER 
 02A6                           ??L027: 
                                ; 
                                ; ONLY POSSIBILITY LEFT IS A FORMULA IN PARENTHESES 
                                ; 
                                PUBLIC	PARCHK 
 02A6  E8 0007 R                PARCHK:	CALL	FRMPRN		;RECURSIVELY EVALUATE THE FORMULA 
 02A9  E8 0000 E                	CALL	SYNCHR 
 02AC  29                       	DB	OFFSET ")" 
 02AD  C3                       	RET 
 02AE                           DOMIN: 
 02AE  B6 7D                    	MOV	DH,LOW 125	;A PRECEDENCE BELOW ^ 
                                				;BUT ABOVE ALL ELSE 
 02B0  E8 000E R                	CALL	LPOPER		;SO ^ GREATER THAN UNARY MINUS 
 02B3  8B 1E 0000 E             	MOV	BX,TEMP2	;GET TEXT POINTER 
 02B7  53                       	PUSH	BX 
 02B8  E8 0000 E                	CALL	VNEG 
 02BB                           LABBCK:				;FUNCTIONS THAT DON'T RETURN 
                                				;STRING VALUES COME BACK HERE 
 02BB  5B                       	POP	BX 
 02BC  C3                       	RET 
                                PUBLIC	ISVAR 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-30
EVAL - EVALUATE VARIABLE, CONSTANT, FUNCTION CALL           

 02BD  E8 0000 E                ISVAR:	CALL	PTRGET		;GET A POINTER TO THE 
                                				;VARIABLE IN [D,E] 
                                PUBLIC	RETVAR 
 02C0  53                       RETVAR:	PUSH	BX		;SAVE THE TEXT POINTER 
 02C1  87 DA                    	XCHG	BX,DX		;PUT THE POINTER TO THE VARIABLE VALUE 
                                				;INTO [H,L]. IN THE CASE OF A STRING 
                                				;THIS IS A POINTER TO A DESCRIPTOR AND NOT 
                                				;AN ACTUAL VALUE 
 02C3  89 1E 0000 E             	MOV	FACLO,BX	;IN CASE IT'S STRING STORE THE POINTER 
                                				;TO THE DESCRIPTOR IN FACLO. 
 02C7  E8 0435 R                	CALL	GETYPR		;FOR STRINGS WE JUST LEAVE 
 02CA  74 03                    	JZ	SHORT ??L028 
 02CC  E8 0000 E                	CALL	VMOVFM		;A POINTER IN THE FAC 
 02CF                           ??L028: 
                                				;THE FAC USING [H,L] AS THE POINTER. 
 02CF  5B                       	POP	BX		;RESTORE THE TEXT POINTER 
 02D0  C3                       	RET 
                                PUBLIC	MAKUPL 
 02D1  8A 07                    MAKUPL:	MOV	AL,BYTE PTR [BX]	;GET CHAR FROM MEMORY 
                                PUBLIC	MAKUPS 
 02D3  3C 61                    MAKUPS:	CMP	AL,LOW OFFSET "A"+40O	;IS IT LOWER CASE RANGE 
 02D5  73 01                    	JNB	SHORT $+3 
 02D7  C3                       	RET			;LESS 
 02D8  3C 7B                    	CMP	AL,LOW OFFSET "Z"+41O	;GREATER 
 02DA  72 01                    	JNAE	SHORT $+3 
 02DC  C3                       	RET			;TEST 
 02DD  24 5F                    	AND	AL,LOW 137O	;MAKE UPPER CASE 
 02DF  C3                       	RET			;DONE 
                                PUBLIC	CNSGET 
 02E0                           CNSGET: 
 02E0  3C 26                    	CMP	AL,LOW "&"	;OCTAL PERHAPS? 
 02E2  74 03                    	JZ	SHORT ??L029 
 02E4  E9 0000 E                	JMP	LINGET 
 02E7                           ??L029: 
                                PUBLIC	$OHCNS 
 02E7                           $OHCNS: 
                                PUBLIC	OCTCNS 
 02E7  BA 0000                  OCTCNS:	MOV	DX,0		;INITIALIZE TO ZERO AND IGNORE OVERFLOW 
 02EA  E8 0000 E                	CALL	CHRGTR		;GET FIRST CHAR 
 02ED  E8 02D3 R                	CALL	MAKUPS		;MAKE UPPER IF NESC. 
 02F0  3C 4F                    	CMP	AL,LOW "O"	;OCTAL? 
 02F2  74 60                    	JZ	SHORT LOPOCT	;IF SO, DO IT 
 02F4  3C 48                    	CMP	AL,LOW "H"	;HEX? 
 02F6  75 5B                    	JNZ	SHORT LOPOC2	;THEN DO IT 
 02F8  B5 05                    	MOV	CH,LOW 5	;INIT DIGIT COUNT 
 02FA  43                       LOPHEX:	INC	BX		;BUMP POINTER 
 02FB  8A 07                    	MOV	AL,BYTE PTR [BX]	;GET CHAR 
 02FD  E8 02D3 R                	CALL	MAKUPS		;MAKE UPPER CASE 
 0300  E8 0000 E                	CALL	ISLET2		;FETCH CHAR, SEE IF ALPHA 
 0303  87 DA                    	XCHG	BX,DX		;SAVE [H,L] 
 0305  73 0A                    	JAE	SHORT ALPTST	;YES, MAKE SURE LEGAL HEC 
 0307  3C 3A                    	CMP	AL,LOW OFFSET "9"+1	;IS IT BIGGER THAN LARGEST DIGIT? 
 0309  73 76                    	JAE	SHORT OCTFIN	;YES, BE FORGIVING & RETURN 
 030B  2C 30                    	SUB	AL,LOW "0"	;CONVERT DIGIT, MAKE BINARY 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-31
EVAL - EVALUATE VARIABLE, CONSTANT, FUNCTION CALL           

 030D  72 72                    	JB	SHORT OCTFIN	;BE FORGIVING IF NOT HEX DIGIT 
 030F  EB 06                    	JMP	SHORT NXTHEX	;ADD IN OFFSET 
 0311  3C 47                    ALPTST:	CMP	AL,LOW OFFSET "F"+1	;IS IT LEGAL HEX? 
 0313  73 6C                    	JAE	SHORT HEXFIN	;YES, TERMINATE 
 0315  2C 37                    	SUB	AL,LOW OFFSET "A"-10	;MAKE BINARY VALUE 
 0317  03 DB                    NXTHEX:	ADD	BX,BX		;SHIFT RIGHT FOUR BITS 
 0319  03 DB                    	ADD	BX,BX 
 031B  03 DB                    	ADD	BX,BX 
 031D  03 DB                    	ADD	BX,BX 
 031F  0A C3                    	OR	AL,BL		;OR ON NEW DIGIT 
 0321  8A D8                    	MOV	BL,AL		;SAVE BACK 
 0323  87 DA                    	XCHG	BX,DX		;GET TEXT POINTER BACK IN [H,L] 
 0325  FE CD                    	DEC	CH 
 0327  75 D1                    	JNZ	SHORT LOPHEX	;KEEP EATING IF NOT TOO MANY DIGITS 
                                ;IF NOT INPUT STATEMENT GOTO OVFLW ERROR FROM HERE, ELSE PASS BACK ERROR 
 0329  A0 0000 E                CKOVER:	MOV	AL,BYTE PTR FLGSCN 
 032C  0A C0                    	OR	AL,AL 
 032E  75 03                    	JNZ	SHORT ??L030 
 0330  E9 0000 E                	JMP	OVERR		;IF NOT INPUT STATEMENT, THIS IS ERROR 
 0333                           ??L030: 
 0333  53                       	PUSH	BX 
 0334  BB 0000 E                	MOV	BX,OFFSET $OVMSG 
 0337  E8 0000 E                	CALL	$STPRN		;PRINT OVERFLOW MESSAGE 
 033A  E8 0000 E                	CALL	CRDO 
 033D  5B                       	POP	BX 
 033E  A0 0000 E                CONER2:	MOV	AL,BYTE PTR FLGOVC 
 0341  FE C0                    	INC	AL 
 0343  A2 0000 E                	MOV	BYTE PTR FLGOVC,AL	;TELL INPUT CODE THAT ERROR OCCURED 
 0346  C3                       	RET 
 0347  A0 0000 E                CONERR:	MOV	AL,BYTE PTR FLGSCN 
 034A  0A C0                    	OR	AL,AL 
 034C  74 02                    	JZ	SHORT ??L031 
 034E  EB EE                    	JMP	CONER2		;IF INPUT CODE ERROR, RETURN ERROR CODE 
 0350                           ??L031: 
 0350  E9 0000 E                	JMP	SNERR		;ELSE GOTO ERROR FROM HERE 
 0353  4B                       LOPOC2:	DEC	BX		;REGET LAST CHARACTER 
 0354  E8 0000 E                LOPOCT:	CALL	CHRGTR		;READ A DIGIT 
 0357  87 DA                    	XCHG	BX,DX		;RESULT INTO [H,L] 
 0359  73 26                    	JAE	SHORT OCTFIN	;OUT OF DIGITS MEANS DONE 
 035B  3C 38                    	CMP	AL,LOW "8"	;IS THIS AN OCTAL DIGIT 
 035D  72 02                    	JNAE	SHORT ??L032 
 035F  EB E6                    	JMP	CONERR		;NO, TOO BAD YOU WILL LOSE 
 0361                           ??L032: 
 0361  B9 0329 R                	MOV	CX,OFFSET CKOVER	;WHERE TO GO ON OVERFLOW ERROR 
 0364  51                       	PUSH	CX		;SAVE ADDR ON STACK 
 0365  03 DB                    	ADD	BX,BX		;MULTIPLY BY EIGHT 
 0367  73 01                    	JNB	SHORT $+3 
 0369  C3                       	RET			;OVERFLOW ERROR 
 036A  03 DB                    	ADD	BX,BX 
 036C  73 01                    	JNB	SHORT $+3 
 036E  C3                       	RET			;OVERFLOW ERROR 
 036F  03 DB                    	ADD	BX,BX 
 0371  73 01                    	JNB	SHORT $+3 
 0373  C3                       	RET			;OVERFLOW ERROR 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-32
EVAL - EVALUATE VARIABLE, CONSTANT, FUNCTION CALL           

 0374  59                       	POP	CX		;GET RID OF OVERR ADDR 
 0375  B5 00                    	MOV	CH,LOW 0	;SETUP TO ADD [B,C] 
 0377  2C 30                    	SUB	AL,LOW "0" 
 0379  8A C8                    	MOV	CL,AL 
 037B  03 D9                    	ADD	BX,CX		;ADD IN THE DIGIT 
 037D  87 DA                    	XCHG	BX,DX		;PUT TEXT POINTER BACK IN [H,L] 
 037F  EB D3                    	JMP	SHORT LOPOCT	;SCAN MORE DIGITS 
 0381                           HEXFIN: 
 0381                           OCTFIN: 
                                 
                                PUBLIC	HOCFIN 
 0381                           HOCFIN: 
 0381  E8 0000 E                	CALL	MAKINT		;SAVE AS AN INTEGER 
 0384  87 DA                    	XCHG	BX,DX		;[H,L]-TEXT POINTER 
 0386  C3                       	RET 
 0387                           ISFUN: 
 0387  43                       	INC	BX		;BUMP SOURCE TEXT POINTER 
 0388  8A 07                    	MOV	AL,BYTE PTR [BX]	;GET THE ACTUAL TOKEN FOR FN 
 038A  2C 00 E                  	SUB	AL,LOW OFFSET ONEFUN	;MAKE INTO OFFSET 
                                	EXTRN	RNDMON:NEAR 
                                	EXTRN	$RNDFN:NEAR 
 038C  3C 00 E                  	CMP	AL,LOW OFFSET $RNDFN	;IS IT RND? 
 038E  75 0E                    	JNZ	SHORT NTMRND	;IF NOT NO NEED TO CHECK MONADIC 
 0390  53                       	PUSH	BX		;SAVE TEXT POINTER 
 0391  E8 0000 E                	CALL	CHRGTR		;SEE IF NEXT CHAR IS "(" 
 0394  3C 28                    	CMP	AL,LOW "(" 
 0396  5B                       	POP	BX		;GET BACK THE OLD TEXT POINTER 
 0397  74 03                    	JZ	SHORT ??L033 
 0399  E9 0000 E                	JMP	RNDMON		;HANDLE MONADIC CASE 
 039C                           ??L033: 
 039C  B0 00 E                  	MOV	AL,LOW OFFSET $RNDFN 
 039E                           NTMRND: 
 039E  B5 00                    	MOV	CH,LOW 0 
 03A0  D0 C0                    	ROL	AL,1		;MULTIPLY BY 2 
 03A2  8A C8                    	MOV	CL,AL 
 03A4  51                       	PUSH	CX		;SAVE THE FUNCTION # ON THE STACK 
 03A5  E8 0000 E                	CALL	CHRGTR 
 03A8  8A C1                    	MOV	AL,CL		;LOOK AT FUNCTION # 
                                	EXTRN	NUMGFN:NEAR 
 03AA  3C 00 E                  	CMP	AL,LOW OFFSET NUMGFN	;IS IT PAST LASNUM? 
 03AC  73 22                    	JAE	SHORT OKNORM	;NO, MUST BE A NORMAL FUNCTION 
                                ; 
                                ; MOST FUNCTIONS TAKE A SINGLE ARGUMENT. 
                                ; THE RETURN ADDRESS OF THESE FUNCTIONS IS A SMALL ROUTINE 
                                ; THAT CHECKS TO MAKE SURE VALTYP IS 0 (NUMERIC) AND POPS OFF 
                                ; THE TEXT POINTER. SO NORMAL FUNCTIONS THAT RETURN STRING RESULTS (I.E. CHR$) 
                                ; MUST POP OFF THE RETURN ADDRESS OF LABBCK, AND POP OFF THE 
                                ; TEXT POINTER AND THEN RETURN TO FRMEVL. 
                                ; 
                                ; THE SO CALLED "FUNNY" FUNCTIONS CAN TAKE MORE THAN ONE ARGUMENT. 
                                ; THE FIRST OF WHICH MUST BE STRING AND THE SECOND OF WHICH 
                                ; MUST BE A NUMBER BETWEEN 0 AND 256. THE TEXT POINTER IS 
                                ; PASSED TO THESE FUNCTIONS SO ADDITIONAL ARGUMENTS 
                                ; CAN BE READ. THE TEXT POINTER IS PASSED IN [D,E]. 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-33
EVAL - EVALUATE VARIABLE, CONSTANT, FUNCTION CALL           

                                ; THE CLOSE PARENTHESIS MUST BE CHECKED AND RETURN IS DIRECTLY 
                                ; TO FRMEVL WITH [H,L] SETUP AS THE TEXT POINTER POINTING BEYOND THE ")". 
                                ; THE POINTER TO THE DESCRIPTOR OF THE STRING ARGUMENT 
                                ; IS STORED ON THE STACK UNDERNEATH THE VALUE OF THE INTEGER 
                                ; ARGUMENT (2 BYTES) 
                                ; 
                                ; FIRST ARGUMENT ALWAYS STRING -- SECOND INTEGER 
                                ; 
 03AE  E8 0007 R                	CALL	FRMPRN		;EAT OPEN PAREN AND FIRST ARG 
 03B1  E8 0000 E                	CALL	SYNCHR 
 03B4  2C                       	DB	OFFSET 44	;TWO ARGS SO COMMA MUST DELIMIT 
 03B5  E8 0000 E                	CALL	CHKSTR		;MAKE SURE THE FIRST ONE WAS STRING 
 03B8  87 DA                    	XCHG	BX,DX		;[D,E]=TXTPTR 
 03BA  8B 1E 0000 E             	MOV	BX,FACLO	;GET PTR AT STRING DESCRIPTOR 
 03BE  5E                       	POP	SI		;XTHL 
 03BF  87 F3                    	XCHG	SI,BX 
 03C1  56                       	PUSH	SI		;GET FUNCTION # 
                                				;SAVE THE STRING PTR 
 03C2  53                       	PUSH	BX		;PUT THE FUNCTION # ON 
 03C3  87 DA                    	XCHG	BX,DX		;[H,L]=TXTPTR 
 03C5  E8 079B R                	CALL	GETBYT		;[E]=VALUE OF FORMULA 
 03C8  87 DA                    	XCHG	BX,DX		;TEXT POINTER INTO [D,E] 
                                				;[H,L]=INT VALUE OF SECOND ARGUMENT 
 03CA  5E                       	POP	SI		;XTHL 
 03CB  87 F3                    	XCHG	SI,BX 
 03CD  56                       	PUSH	SI		;SAVE INT VALUE OF SECOND ARG 
                                				;[H,L]=FUNCTION NUMBER 
 03CE  EB 1F                    	JMP	SHORT FINGO	;DISPATCH TO FUNCTION 
 03D0                           OKNORM: 
 03D0  E8 02A6 R                	CALL	PARCHK		;CHECK OUT THE ARGUMENT 
                                				;AND MAKE SURE ITS FOLLOWED BY ")" 
 03D3  5E                       	POP	SI		;XTHL 
 03D4  87 F3                    	XCHG	SI,BX 
 03D6  56                       	PUSH	SI		;[H,L]=FUNCTION # AND SAVE TEXT POINTER 
                                ; 
                                ; CHECK IF SPECIAL COERCION MUST BE DONE FOR ONE OF THE TRANSCENDENTAL 
                                ; FUNCTIONS (RND, SQR, COS, SIN, TAN, ATN, LOG, AND EXP) 
                                ; THESE FUNCTIONS DO NOT LOOK AT VALTYP, BUT RATHER ASSUME THE 
                                ; ARGUMENT PASSED IN THE FAC IS SINGLE PRECISION, SO FRCSNG 
                                ; MUST BE CALLED BEFORE DISPATCHING TO THEM. 
                                ; 
 03D7  8A C3                    	MOV	AL,BL		;[A]=FUNCTION NUMBER 
                                	EXTRN	BOTCON:NEAR,TOPCON:NEAR 
 03D9  3C 00 E                  	CMP	AL,LOW OFFSET BOTCON	;LESS THAN SQUARE ROOT? 
 03DB  72 09                    	JB	SHORT NOTFRF	;DON'T FORCE THE ARGUMENT 
 03DD  3C 00 E                  	CMP	AL,LOW OFFSET TOPCON	;BIGGER THAN ARC-TANGENT? 
 03DF  53                       	PUSH	BX		;SAVE THE FUNCTION NUMBER 
 03E0  73 03                    	JNB	SHORT ??L034 
 03E2  E8 0000 E                	CALL	FRCSNG		;IF NOT, FORCE FAC TO SINGLE-PRECISION 
 03E5                           ??L034: 
 03E5  5B                       	POP	BX		;RESTORE THE FUNCTION NUMBER 
 03E6                           NOTFRF: 
 03E6  BA 02BB R                	MOV	DX,OFFSET LABBCK	;RETURN ADDRESS 
 03E9  52                       	PUSH	DX		;MAKE THEM REALLY COME BACK 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-34
EVAL - EVALUATE VARIABLE, CONSTANT, FUNCTION CALL           

 03EA  B0 01                    	MOV	AL,LOW 1	;FUNCTION SHOULD ONLY PRINT OVERFLOW ONCE 
 03EC  A2 0000 E                	MOV	BYTE PTR FLGOVC,AL 
 03EF                           FINGO: 
 03EF  B9 0000 E                	MOV	CX,OFFSET FUNDSP	;FUNCTION DISPATCH TABLE 
 03F2  03 D9                    DISPAT:	ADD	BX,CX		;ADD ON THE OFFSET 
                                 
                                	INS86	56		;FETCH FROM CODE SEGMENT 
                                	INS86	377,047		;JMPI   0(.BX) 
                                ; THE FOLOWING ROUTINE IS CALLED FROM FIN IN F4 
                                ; TO SCAN LEADING SIGNS FOR NUMBERS. IT WAS MOVED 
                                ; TO F3 TO ELIMINATE BYTE EXTERNALS 
                                PUBLIC	MINPLS 
 03F7                           MINPLS: 
 03F7  FE CE                    	DEC	DH		;SET SIGN OF EXPONENT FLAG 
 03F9  3C 00 E                  	CMP	AL,LOW OFFSET MINUTK	;NEGATIVE EXPONENT? 
 03FB  75 01                    	JNZ	SHORT $+3 
 03FD  C3                       	RET 
 03FE  3C 2D                    	CMP	AL,LOW "-" 
 0400  75 01                    	JNZ	SHORT $+3 
 0402  C3                       	RET 
 0403  FE C6                    	INC	DH		;NO, RESET FLAG 
 0405  3C 2B                    	CMP	AL,LOW "+" 
 0407  75 01                    	JNZ	SHORT $+3 
 0409  C3                       	RET 
 040A  3C 00 E                  	CMP	AL,LOW OFFSET PLUSTK	;IGNORE "+" 
 040C  75 01                    	JNZ	SHORT $+3 
 040E  C3                       	RET 
 040F  9F                       	LAHF 
 0410  4B                       	DEC	BX		;CHECK IF LAST CHARACTER WAS A DIGIT 
 0411  9E                       	SAHF 
 0412  C3                       	RET			;RETURN WITH NON-ZERO SET 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-35
EVAL - EVALUATE VARIABLE, CONSTANT, FUNCTION CALL           

                                	PAGE 
                                 
                                	SUBTTL MORE FORMULA EVALUATION - LOGICAL, RELATIONAL OPS 
 0413  FE C0                    DOCMP:	INC	AL		;SETUP BITS 
 0415  12 C0                    	ADC	AL,AL		;4=LESS 2=EQUAL 1=GREATER 
 0417  59                       	POP	CX		;WHAT DID HE WANT? 
 0418  22 C5                    	AND	AL,CH		;ANY BITS MATCH? 
 041A  04 FF                    	ADD	AL,LOW 255	;MAP 0 TO 0 
 041C  1A C0                    	SBB	AL,AL		;AND ALL OTHERS TO 377 
 041E  E8 0000 E                	CALL	CONIA		;CONVERT [A] TO AN INTEGER SIGNED 
 0421  EB 0F                    	JMP	SHORT RETAPG	;RETURN FROM OPERATOR APPLICATION 
 0423  B6 5A                    NOTER:	MOV	DH,LOW 90	;"NOT" HAS PRECEDENCE 90, SO 
 0425  E8 000E R                	CALL	LPOPER		;FORMULA EVALUATION IS ENTERED WITH A DUMMY 
                                				;ENTRY OF 90 ON THE STACK 
 0428  E8 0000 E                	CALL	FRCINT		;COERCE THE ARGUMENT TO INTEGER 
                                	INS86	367,323		;NOT [H,L] 
 042D  89 1E 0000 E             	MOV	FACLO,BX	;UPDATE THE FAC 
 0431  59                       	POP	CX		;FRMEVL, AFTER SEEING THE PRECEDENCE 
                                				;OF 90 THINKS IT IS APPLYING AN OPERATOR 
                                				;SO IT HAS THE TEXT POINTER IN TEMP2 SO 
                                 
 0432  E9 0020 R                RETAPG:	JMP	RETAOP		;RETURN TO REFETCH IT 
                                PUBLIC	GETYPR 
 0435  A0 0000 E                GETYPR:	MOV	AL,BYTE PTR VALTYP	;REPLACEMENT FOR "GETYPE" RST 
 0438  3C 08                    	CMP	AL,LOW 8 
                                ; 
                                ; CONTINUATION OF GETYPE RST 
                                ; 
 043A  FE C8                    CGETYP:	DEC	AL		;SET THE OTHER CONDITION CODES CORRECTLY 
 043C  FE C8                    	DEC	AL		; WITHOUT AFFECTING CARRY 
 043E  FE C8                    	DEC	AL 
 0440  C3                       	RET 
                                 
                                 
                                ; 
                                ; DANDOR APPLIES THE "AND" AND "OR" OPERATORS 
                                ; AND SHOULD BE USED TO IMPLEMENT ALL LOGICAL OPERATORS. 
                                ; WHENEVER AN OPERATOR IS APPLIED, ITS PRECEDENCE IS IN [B]. 
                                ; THIS FACT IS USED TO DISTINGUISH BETWEEN "AND" AND "OR". 
                                ; THE RIGHT HAND ARGUMENT IS COERCED TO INTEGER, JUST AS 
                                ; THE LEFT HAND ONE WAS WHEN IT WAS PUSHED ON THE STACK. 
                                ; 
 0441                           DANDOR: 
 0441  8A C5                    	MOV	AL,CH		;GET THE PRECEDENCE 
 0443  50                       	PUSH	AX		;SAVE THE PRECEDENCE "OR"=70 
 0444  E8 0000 E                	CALL	FRCINT		;COERCE RIGHT HAND ARGUMENT TO INTEGER 
 0447  58                       	POP	AX		;GET BACK THE PRECEDENCE TO DISTINGUISH 
                                				;"AND" AND "OR" 
 0448  5A                       	POP	DX		;POP OFF THE LEFT HAND ARGUMENT 
 0449  3C 7A                    	CMP	AL,LOW 122	;IS THE OPERATOR "MOD"? 
 044B  75 03                    	JNZ	SHORT ??L035 
 044D  E9 0000 E                	JMP	IMOD		;IF SO, USE MONTE'S SPECIAL ROUTINE 
 0450                           ??L035: 
 0450  3C 7B                    	CMP	AL,LOW 123	;IS THE OPERATOR "IDIV"? 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-36
MORE FORMULA EVALUATION - LOGICAL, RELATIONAL OPS           

 0452  75 03                    	JNZ	SHORT ??L036 
 0454  E9 0000 E                	JMP	IDIV		;LET MONTE HANDLE IT 
 0457                           ??L036: 
 0457  B9 0000 E                	MOV	CX,OFFSET MAKINT	;PLACE TO RETURN WHEN DONE 
 045A  51                       	PUSH	CX		;SAVE ON STACK 
 045B  3C 46                    	CMP	AL,LOW 70	;SET ZERO FOR "OR" 
 045D  75 03                    	JNZ	SHORT NOTOR 
                                	INS86	13,332		;OR BX,BX 
 0461  C3                       	RET			;RETURN THE INTEGER [A,L] 
 0462                           NOTOR: 
 0462  3C 50                    	CMP	AL,LOW 80	;AND? 
 0464  75 03                    	JNZ	SHORT NOTAND 
                                	INS86	43,332		;AND BX,DX 
 0468  C3                       	RET			;RETURN THE INTEGER [A,L] 
                                 
 0469  3C 3C                    NOTAND:	CMP	AL,LOW 60	;XOR? 
 046B  75 03                    	JNZ	SHORT NOTXOR	;NO 
                                	INS86	63,332		;XOR BX,DX 
 046F  C3                       	RET 
                                 
 0470  3C 32                    NOTXOR:	CMP	AL,LOW 50	;EQV? 
 0472  75 05                    	JNZ	SHORT NOTEQV	;NO 
                                	INS86	63,332		;XOR BX,DX 
                                	INS86	367,323		;NOT BX 
 0478  C3                       	RET 
                                ;FOR "IMP" USE A IMP B = NOT(A AND NOT(B)) 
 0479                           NOTEQV: 
                                	INS86	367,323		;NOT BX 
                                	INS86	43,332		;AND BX,DX 
                                	INS86	367,323		;NOT BX 
 047F  C3                       	RET 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-37
MORE FORMULA EVALUATION - LOGICAL, RELATIONAL OPS           

                                	PAGE 
                                ; 
                                ; THIS ROUTINE SUBTRACTS [D,E] FROM [H,L] 
                                ; AND FLOATS THE RESULT LEAVING IT IN FAC. 
                                ; 
                                PUBLIC	GIVDBL 
 0480  2B DA                    GIVDBL:	SUB	BX,DX		;[H,L]=[H,L]-[D,E] 
 0482  E9 0000 E                	JMP	INEG2		;FLOAT 2 BYTE UNSIGNED INT 
                                PUBLIC	SNGFLT 
 0485  8A D8                    SNGFLT:	MOV	BL,AL		;MAKE [A] AN UNSIGNED INTEGER 
 0487  32 C0                    	XOR	AL,AL 
                                PUBLIC	GIVINT 
 0489  8A F8                    GIVINT:	MOV	BH,AL 
 048B  E9 0000 E                	JMP	MAKINT 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-38
MORE FORMULA EVALUATION - LOGICAL, RELATIONAL OPS           

                                	PAGE 
                                 
                                	SUBTTL USER DEFINED (USR) ASSEMBLY LANGUAGE FUNCTION CODE 
                                 
 048E                           USRFN: 
                                	EXTRN	PRODIR:NEAR 
 048E  E8 0000 E                	CALL	PRODIR		;Don't allow in direct mode in 
                                				; protected environment 
 0491  E8 04C2 R                	CALL	SCNUSR		;SCAN THE USR# 
 0494  52                       	PUSH	DX		;SAVE POINTER 
 0495  E8 02A6 R                	CALL	PARCHK		;EAT LEFT PAREN AND FORMULA 
 0498  5E                       	POP	SI		;XTHL 
 0499  87 F3                    	XCHG	SI,BX 
 049B  56                       	PUSH	SI		;SAVE TEXT POINTER & GET INDEX INTO USRTAB 
 049C  8B 17                    	MOV	DX,[BX]		;GET DISPATCH ADDRESS 
                                	INS86	203,372		;CMPI DX, 
 04A0  FF                       	DB	377O		; 0FFFFH 
 04A1  75 03                    	JNZ	SHORT ??L037 
 04A3  E9 0000 E                	JMP	FCERR		;GIVE HIM AN ERROR IF HE CALLS A SUBROUTINE 
 04A6                           ??L037: 
                                				;AT FFFF, SINCE CANT INITIALIZE TABLE 
                                				;TO "FCERR" SINCE IT MAY NOT EXIST IN 
                                				;THE DESTINATION SEGMENT 
                                	INS86	16		;PUSH CS - PUSH BASIC'S CODE SEGMENT 
 04A7  BB 0000 E                	MOV	BX,OFFSET POPHRT	;GET ADDRESS OF POP H RET 
 04AA  53                       	PUSH	BX		;PUSH IT ON 
                                	INS86	377,66,SAVSEG	;PUSH ON SEGMENT ADDRESS OF SUBROUTINE 
 04AF  52                       	PUSH	DX		;SAVE ADDRESS OF USR ROUTINE 
 04B0  A0 0000 E                	MOV	AL,BYTE PTR VALTYP	;GET ARGUMENT TYPE IN [A] 
 04B3  50                       	PUSH	AX		;SAVE VALTYP 
 04B4  3C 03                    	CMP	AL,LOW 3	;STRING?? 
 04B6  75 03                    	JNZ	SHORT ??L038 
 04B8  E8 0000 E                	CALL	FREFAC		;FREE IT UP 
 04BB                           ??L038: 
 04BB  58                       	POP	AX		;GET BACK VALTYP 
 04BC  87 DA                    	XCHG	BX,DX		;MOVE POSSIBLE DESC. POINTER TO [D,E] 
 04BE  BB 0000 E                	MOV	BX,OFFSET FACLO	;POINTER TO FAC IN [H,L] 
                                	INS86	313		;INTER SEGMENT RETURN 
 04C2  E8 0000 E                SCNUSR:	CALL	CHRGTR		;GET A CHAR 
 04C5  B9 0000                  	MOV	CX,0		;ASSUME USR0 
 04C8  3C 0A E                  	CMP	AL,LOW OFFSET ONECON+10	;SINGLE BYTE INT EXPECTED 
 04CA  73 10                    	JAE	SHORT NOARGU	;NO, MUST BE DEFAULTING TO USR0 
 04CC  3C 00 E                  	CMP	AL,LOW OFFSET ONECON	;IS IT SMALLER THAN ONECON 
 04CE  72 0C                    	JB	SHORT NOARGU	;YES, ASSUME TRYING TO DEFAULT TO USR0 
 04D0  E8 0000 E                USERCN:	CALL	CHRGTR		;SCAN PAST NEXT CHAR 
 04D3  A0 0000 E                	MOV	AL,BYTE PTR CONLO	;GET VALUE OF 1 BYTER 
 04D6  0A C0                    	OR	AL,AL		;MAKE SURE CARRY IS OFF 
 04D8  D0 D0                    	RCL	AL,1		;MULTIPLY BY 2 
 04DA  8A C8                    	MOV	CL,AL		;SAVE OFFSET IN [C] 
 04DC  87 DA                    NOARGU:	XCHG	BX,DX		;SAVE TEXT POINTER IN [D,E] 
 04DE  BB 0000 E                	MOV	BX,OFFSET USRTAB	;GET START OF TABLE 
 04E1  03 D9                    	ADD	BX,CX		;ADD ON OFFSET 
 04E3  87 DA                    	XCHG	BX,DX		;RESTORE TEXT POINTER, ADDRESS TO [D,E] 
 04E5  C3                       	RET			;RETURN FROM SCAN ROUTINE 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-39
USER DEFINED (USR) ASSEMBLY LANGUAGE FUNCTION CODE          

                                 
 04E6  E8 04C2 R                DEFUSR:	CALL	SCNUSR		;SCAN THE USR NAME 
 04E9  52                       	PUSH	DX		;SAVE POINTER TO USRTAB ENTRY 
 04EA  E8 0000 E                	CALL	SYNCHR 
 04ED  00 E                     	DB	OFFSET EQULTK	;MUST HAVE EQUAL SIGN 
 04EE  E8 0000 E                	CALL	FRMQNT		;GET THE ADDRESS 
 04F1  5E                       	POP	SI		;XTHL 
 04F2  87 F3                    	XCHG	SI,BX 
 04F4  56                       	PUSH	SI		;TEXT POINTER TO STACK, GET ADDRESS 
 04F5  89 17                    	MOV	[BX],DX		;SAVE USR CALL ADDRESS 
 04F7  5B                       	POP	BX		;RESTORE TEXT POINTER 
 04F8  C3                       	RET			;RETURN TO NEWSTT 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-40
USER DEFINED (USR) ASSEMBLY LANGUAGE FUNCTION CODE          

                                	PAGE 
                                 
                                	SUBTTL SIMPLE-USER-DEFINED-FUNCTION CODE 
                                ; 
                                ; IN THE 8K VERSION (SEE LATER COMMENT FOR EXTENDED) 
                                ; NOTE ONLY SINGLE ARGUMENTS ARE ALLOWED TO FUNCTIONS 
                                ; AND FUNCTIONS MUST BE OF THE SINGLE LINE FORM: 
                                ; DEF FNA(X)=X^2+X-2 
                                ; NO STRINGS CAN BE INVOLVED WITH THESE FUNCTIONS 
                                ; 
                                ; IDEA: CREATE A FUNNY SIMPLE VARIABLE ENTRY 
                                ; WHOSE FIRST CHARACTER (SECOND WORD IN MEMORY) 
                                ; HAS THE 200 BIT SET. 
                                ; THE VALUE WILL BE: 
                                ; 
                                ;       A TXTPTR TO THE FORMULA 
                                ;       THE NAME OF THE PARAMETER VARIABLE 
                                ; 
                                ; FUNCTION NAMES CAN BE LIKE "FNA4" 
                                ; 
                                 
 04F9                           DEF: 
 04F9  3C 00 E                  	CMP	AL,LOW OFFSET USRTK	;DEFINING THE CALL ADDRESS OF USR ROUTINE? 
 04FB  74 E9                    	JZ	SHORT DEFUSR	;YES, DO IT 
 04FD  3C 00 E                  	CMP	AL,LOW OFFSET FNTK	; "FN"? 
 04FF  74 1C                    	JZ	SHORT DEFNC3	;THEN GO DO FUNCTION NAME 
 0501  E8 0000 E                	CALL	SYNCHR 
 0504  53                       	DB	OFFSET "S"	;Else must be "SEG" or error. 
 0505  E8 0000 E                	CALL	SYNCHR 
 0508  45                       	DB	OFFSET "E" 
 0509  E8 0000 E                	CALL	SYNCHR 
 050C  47                       	DB	OFFSET "G" 
                                	INS86	214,332		; MOV DX,DS 
 050F  74 07                    	JZ	SHORT DEFNC2	;NO ASSIGNMENT, USE CURRENT [DS]. 
 0511  E8 0000 E                	CALL	SYNCHR 
 0514  00 E                     	DB	OFFSET EQULTK	; ELSE MUST HAVE EQUAL SIGN 
 0515  E8 0000 E                	CALL	FRMQNT		;GET SEGMENT IN DX 
 0518  89 16 0000 E             DEFNC2:	MOV	SAVSEG,DX	;STORE FOR PEEK/POKE/CALL/BLOAD/BSAVE 
 051C  C3                       	RET			;RETURN TO NEWSTT 
 051D                           DEFNC3: 
 051D  E8 0718 R                	CALL	GETFNM		;GET A POINTER TO THE FUNCTION NAME 
 0520  E8 0707 R                	CALL	ERRDIR		;DEF IS "ILLEGAL DIRECT" 
 0523  87 DA                    	XCHG	BX,DX		;[D,E] = THE TEXT POINTER AFTER THE FUNCTION 
                                				;NAME AND [H,L] = POINTER AT PLACE TO STORE 
                                				;VALUE OF THE FUNCTION VARIABLE 
 0525  89 17                    	MOV	[BX],DX		;SAVE THE TEXT POINTER AS THE VALUE 
 0527  87 DA                    	XCHG	BX,DX		;RESTORE THE TEXT POINTER TO [H,L] 
 0529  8A 07                    	MOV	AL,BYTE PTR [BX]	;GET NEXT CHAR 
 052B  3C 28                    	CMP	AL,LOW "("	;DOES THIS FUNCTION HAVE ARGS? 
 052D  74 03                    	JZ	SHORT ??L039 
 052F  E9 0000 E                	JMP	DATA		;NO 
 0532                           ??L039: 
 0532  E8 0000 E                	CALL	CHRGTR 
 0535  E8 0000 E                SCNLIS:	CALL	PTRGET		;GET POINTER TO DUMMY VAR(CREATE VAR) 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-41
SIMPLE-USER-DEFINED-FUNCTION CODE                           

 0538  8A 07                    	MOV	AL,BYTE PTR [BX]	;GET TERMINATOR 
 053A  3C 29                    	CMP	AL,LOW ")"	;END OF ARG LIST? 
 053C  75 03                    	JNZ	SHORT ??L040 
 053E  E9 0000 E                	JMP	DATA		;YES 
 0541                           ??L040: 
 0541  E8 0000 E                	CALL	SYNCHR 
 0544  2C                       	DB	OFFSET 44	;"," MUST FOLLOW THEN 
 0545  EB EE                    	JMP	SHORT SCNLIS 
                                 
 0547  E8 0718 R                FNDOER:	CALL	GETFNM		;GET A POINTER TO 
 054A  A0 0000 E                	MOV	AL,BYTE PTR VALTYP	;FIND OUT WHAT KIND OF FUNCTION IT IS 
 054D  0A C0                    	OR	AL,AL		;PUSH THIS [A] ON WITH A PSW WITH CARRY OFF 
                                				;SO THAT WHEN VALUES ARE BEING POPPED OFF 
                                				;AND RESTORED TO PARAMETERS WE WILL KNOW 
                                				;WHEN TO STOP 
                                				;WHEN A VALTYP IS POPPED OFF WITH 
                                				;CARRY OFF 
 054F  50                       	PUSH	AX		;SAVE SO THAT THE FINAL RESULT WILL 
                                				;BE COERCED TO THE FUNCTION TYPE 
 0550  89 1E 0000 E             	MOV	TEMP2,BX	;SAVE THE TEXT POINTER THAT POINTS PAST 
                                				;THE FUNCTION NAME IN THE CALL 
 0554  87 DA                    	XCHG	BX,DX		;[H,L]=A POINTER TO THE VALUE OF FUNCTION 
 0556  8B 1F                    	MOV	BX,[BX]		;[H,L]=VALUE OF THE FUNCTION 
                                				;WHICH IS A TEXT POINTER AT THE FORMAL 
                                				;PARAMETER LIST IN THE DEFINITION 
 0558  0B DB                    	OR	BX,BX		;A ZERO TEXT POINTER MEANS THE FUNCTION 
                                				;WAS NEVER DEFINED 
 055A  75 03                    	JNZ	SHORT ??L041 
 055C  E9 0000 E                	JMP	UFERR		;IF SO, GIVEN AN "UNDEFINED FUNCTION" ERROR 
 055F                           ??L041: 
 055F  8A 07                    	MOV	AL,BYTE PTR [BX]	;SEE IF THERE ARE ANY PARAMETERS 
 0561  3C 28                    	CMP	AL,LOW "("	;PARAMETER LIST STARTS WITH "("" 
 0563  74 03                    	JZ	SHORT ??L042 
 0565  E9 0639 R                	JMP	FINVLS		;SKIP OVER PARAMETER SETUP 
 0568                           ??L042: 
 0568  E8 0000 E                	CALL	CHRGTR		;GO PAST THE "(" 
 056B  89 1E 0000 E             	MOV	TEMP3,BX	;SAVE THE TEXT POINTER TO THE START OF THE 
 056F  87 DA                    	XCHG	BX,DX		;PARAMETER LIST. 
 0571  8B 1E 0000 E             	MOV	BX,TEMP2	;NOW GET THE TEXT-POINTER FROM THE CALL 
                                				;WHICH IS POINTING JUST PAST THE 
                                				;FUNCTION NAME AT THE ARGUMENT LIST 
 0575  E8 0000 E                	CALL	SYNCHR 
 0578  28                       	DB	OFFSET "("	;MAKE SURE THE ARGUMENT LIST IS THERE 
 0579  32 C0                    	XOR	AL,AL		;INDICATE END OF VALUES TO ASSIGN 
 057B  50                       	PUSH	AX 
 057C  53                       	PUSH	BX		;SAVE THE CALLERS TEXT POINTER 
 057D  87 DA                    	XCHG	BX,DX		;GET THE POINTER TO THE BEGINNING OF THE 
                                				;PARAMETER LIST 
 057F  B0 80                    ASGMOR:	MOV	AL,LOW 128	;OUTLAW ARRAYS WHEN SCANNING 
 0581  A2 0000 E                	MOV	BYTE PTR SUBFLG,AL	;PARAMETERS 
 0584  E8 0000 E                	CALL	PTRGET		;READ A PARAMETER 
 0587  87 DA                    	XCHG	BX,DX		;[D,E]=PARAMETER LIST TEXT,[H,L]=VARIABLE POINTER 
 0589  5E                       	POP	SI		;XTHL 
 058A  87 F3                    	XCHG	SI,BX 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-42
SIMPLE-USER-DEFINED-FUNCTION CODE                           

 058C  56                       	PUSH	SI		;SAVE THE VARIABLES POSITION AND 
                                				;GET THE POINTER AT THE ARG LIST 
 058D  A0 0000 E                	MOV	AL,BYTE PTR VALTYP	;AND ITS TYPE (FOR COERCION) 
 0590  50                       	PUSH	AX 
 0591  52                       	PUSH	DX		;SAVE THE TEXT POINTER INTO THE PARAMETER 
 0592  E8 000B R                	CALL	FRMEVL		;EVALUATE THE ARGUMENT 
 0595  89 1E 0000 E             	MOV	TEMP2,BX	;SAVE THE ARGUMENT LIST POINTER 
 0599  5B                       	POP	BX		;AND THE PARAMETER LIST POINTER 
 059A  89 1E 0000 E             	MOV	TEMP3,BX 
 059E  58                       	POP	AX		;GET THE VALUE TYPE 
 059F  E8 06E6 R                	CALL	DOCNVF		;COERCE THE ARGUMENT 
 05A2  B1 04                    	MOV	CL,LOW 4	;MAKE SURE THERE IS ROOM FOR THE VALUE 
 05A4  E8 0000 E                	CALL	GETSTK 
 05A7  BB FFF8                  	MOV	BX,OFFSET 0-8	;SAVE EIGHT PLACES 
 05AA  03 DC                    	ADD	BX,SP 
 05AC  8B E3                    	MOV	SP,BX 
 05AE  E8 0000 E                	CALL	VMOVMF		;PUT VALUE INTO RESERVED PLACE IN STACK 
 05B1  A0 0000 E                	MOV	AL,BYTE PTR VALTYP	;SAVE TYPE FOR ASSIGNMENT 
 05B4  50                       	PUSH	AX 
 05B5  8B 1E 0000 E             	MOV	BX,TEMP2	;REGET THE ARGUMENT LIST POINTER 
 05B9  8A 07                    	MOV	AL,BYTE PTR [BX]	;SEE WHAT COMES AFTER THE ARGUMENT FORMULA 
 05BB  3C 29                    	CMP	AL,LOW ")"	;IS THE ARGUMENT LIST ENDING? 
 05BD  74 13                    	JZ	SHORT POPASG	;MAKE SURE THE ARGUMENT LIST ALSO ENDED 
 05BF  E8 0000 E                	CALL	SYNCHR 
 05C2  2C                       	DB	OFFSET 54O	;SKIP OVER ARGUMENT COMMA 
 05C3  53                       	PUSH	BX		;SAVE THE ARGUMENT LIST TEXT POINTER 
 05C4  8B 1E 0000 E             	MOV	BX,TEMP3	;GET THE TEXT POINTER INTO THE DEFINTION'S 
                                				;PARAMETER LIST 
 05C8  E8 0000 E                	CALL	SYNCHR 
 05CB  2C                       	DB	OFFSET 54O	;SKIP OVER THE PARAMETER LIST COMMA 
 05CC  EB B1                    	JMP	SHORT ASGMOR	;AND BIND THE REST OF THE PARAMETERS 
 05CE  58                       POPAS2:	POP	AX		;IF ASSIGNMENT IS SUCESSFUL UPDATE PRMLN2 
 05CF  A2 0000 E                	MOV	BYTE PTR PRMLN2,AL	;INDICATE NEW VARIABLE IS IN PLACE 
 05D2  58                       POPASG:	POP	AX		;GET THE VALUE TYPE 
 05D3  0A C0                    	OR	AL,AL 
 05D5  74 51                    	JZ	SHORT FINASG	;ZERO MEANS NO MORE LEFT TO POP AND ASSIGN 
 05D7  A2 0000 E                	MOV	BYTE PTR VALTYP,AL 
 05DA  BB 0000                  	MOV	BX,0		;POINT INTO STACK 
 05DD  03 DC                    	ADD	BX,SP		;TO GET SAVED VALUE 
 05DF  E8 0000 E                	CALL	VMOVFM		;PUT VALUE INTO FAC 
 05E2  BB 0008                  	MOV	BX,8		;FREE UP STACK AREA 
 05E5  03 DC                    	ADD	BX,SP 
 05E7  8B E3                    	MOV	SP,BX 
 05E9  5A                       	POP	DX		;GET PLACE TO STORE TO 
 05EA  B3 03                    	MOV	BL,LOW 3	;CALCULATE THE SIZE OF THE LOOKS (NAME) 
 05EC  FE C3                    LPSIZL:	INC	BL		;INCREMENT SIZE 
 05EE  4A                       	DEC	DX		;POINT AT PREVIOUS CHARACTER 
 05EF  8B F2                    	MOV	SI,DX 
 05F1  8A 04                    	MOV	AL,[SI]		;SEE IF IT IS THE LENGTH OR ANOTHER CHARACTER 
 05F3  0A C0                    	OR	AL,AL 
 05F5  79 02                    	JNS	SHORT ??L043 
 05F7  EB F3                    	JMP	LPSIZL		;HIGH BIT INDICATES STILL PART OF NAME 
 05F9                           ??L043: 
 05F9  4A                       	DEC	DX		;BACK UP OVER LOOKS 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-43
SIMPLE-USER-DEFINED-FUNCTION CODE                           

 05FA  4A                       	DEC	DX 
 05FB  4A                       	DEC	DX 
 05FC  A0 0000 E                	MOV	AL,BYTE PTR VALTYP	;GET SIZE OF VALUE 
 05FF  02 C3                    	ADD	AL,BL		;ADD ON SIZE OF NAME 
 0601  8A E8                    	MOV	CH,AL		;SAVE TOTAL LENGTH IN [B] 
 0603  A0 0000 E                	MOV	AL,BYTE PTR PRMLN2	;GET CURRENT SIZE OF BLOCK 
 0606  8A C8                    	MOV	CL,AL		;SAVE IN [C] 
 0608  02 C5                    	ADD	AL,CH		;GET POTENTIAL NEW SIZE 
 060A  3C 00 E                  	CMP	AL,LOW OFFSET PRMSIZ	;CAN'T EXCEED ALLOCATED STORAGE 
 060C  72 03                    	JNAE	SHORT ??L044 
 060E  E9 0000 E                	JMP	FCERR 
 0611                           ??L044: 
 0611  50                       	PUSH	AX		;SAVE NEW SIZE 
 0612  8A C3                    	MOV	AL,BL		;[A]=SIZE OF NAME 
 0614  B5 00                    	MOV	CH,LOW 0	;[B,C]=SIZE OF PARM2 
 0616  BB 0000 E                	MOV	BX,OFFSET PARM2	;BASE OF PLACE TO STORE INTO 
 0619  03 D9                    	ADD	BX,CX		;[H,L]=PLACE TO START THE NEW VARIABLE 
 061B  8A C8                    	MOV	CL,AL		;[B,C]=LENGTH OF NAME OF VARIABLE 
 061D  E8 0700 R                	CALL	BCTRAN		;PUT IN THE NEW NAME 
 0620  B9 05CE R                	MOV	CX,OFFSET POPAS2	;PLACE TO RETURN AFTER ASSIGNMENT 
 0623  51                       	PUSH	CX 
 0624  51                       	PUSH	CX		;SAVE EXTRA ENTRY ON STACK 
 0625  E9 0000 E                	JMP	LETCN4		;PERFORM ASSIGNMENT ON [H,L] (EXTRA POP D) 
 0628  8B 1E 0000 E             FINASG:	MOV	BX,TEMP2	;GET ARGUMENT LIST POINTER 
 062C  E8 0000 E                	CALL	CHRGTR		;SKIP OVER THE CLOSING PARENTHESIS 
 062F  53                       	PUSH	BX		;SAVE THE ARGUMENT TEXT POINTER 
 0630  8B 1E 0000 E             	MOV	BX,TEMP3	;GET THE PARAMETER LIST TEXT POINTER 
 0634  E8 0000 E                	CALL	SYNCHR 
 0637  29                       	DB	OFFSET ")"	;MAKE SURE THE PARAMETER LIST 
                                				;ENDED AT THE SAME TIME 
 0638  B0                       	DB	260O	; SKIP	;SKIP THE NEXT BYTE WITH "MVI AL," 
 0639  52                       FINVLS:	PUSH	DX		;HERE WHEN THERE WERE NO ARGUMENTS 
                                				;OR PARAMETERS 
                                				;SAVE THE TEXT POINTER OF THE CALLER 
 063A  89 1E 0000 E             	MOV	TEMP3,BX	;SAVE THE TEXT POINTER OF THE FUNCTION 
 063E  A0 0000 E                	MOV	AL,BYTE PTR PRMLEN	;PUSH PARM1 STUFF ONTO THE STACK 
 0641  04 04                    	ADD	AL,LOW 4	;WITH PRMLEN AND PRMSTK (4 BYTES EXTRA) 
 0643  50                       	PUSH	AX		;SAVE THE NUMBER OF BYTES 
 0644  D0 C8                    	ROR	AL,1		;NUMBER OF TWO BYTE ENTRIES IN [A] 
 0646  8A C8                    	MOV	CL,AL 
 0648  E8 0000 E                	CALL	GETSTK		;IS THERE ROOM ON THE STACK? 
 064B  58                       	POP	AX		;[A]=AMOUNT TO PUT ONTO STACK 
 064C  8A C8                    	MOV	CL,AL 
 064E  F6 D0                    	NOT	AL		;COMPLEMENT [A] 
 0650  FE C0                    	INC	AL 
 0652  8A D8                    	MOV	BL,AL 
 0654  B7 FF                    	MOV	BH,LOW 255 
 0656  03 DC                    	ADD	BX,SP 
 0658  8B E3                    	MOV	SP,BX		;SET UP NEW STACK 
 065A  53                       	PUSH	BX		;SAVE THE NEW VALUE FOR PRMSTK 
 065B  BA 0000 E                	MOV	DX,OFFSET PRMSTK	;FETCH DATA FROM HERE 
 065E  E8 0700 R                	CALL	BCTRAN 
 0661  5B                       	POP	BX 
 0662  89 1E 0000 E             	MOV	PRMSTK,BX	;LINK PARAMETER BLOCK FOR GARBAGE COLLECTION 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-44
SIMPLE-USER-DEFINED-FUNCTION CODE                           

 0666  8B 1E 0000 E             	MOV	BX,PRMLN2	;NOW PUT PARM2 INTO PARM1 
 066A  89 1E 0000 E             	MOV	PRMLEN,BX	;SET UP LENGTH 
 066E  8B CB                    	MOV	CX,BX		;[B,C]=TRANSFER COUNT 
 0670  BB 0000 E                	MOV	BX,OFFSET PARM1 
 0673  BA 0000 E                	MOV	DX,OFFSET PARM2 
 0676  E8 0700 R                	CALL	BCTRAN 
 0679  8A F8                    	MOV	BH,AL		;CLEAR OUT PARM2 
 067B  8A D8                    	MOV	BL,AL 
 067D  89 1E 0000 E             	MOV	PRMLN2,BX 
 0681  8B 1E 0000 E             	MOV	BX,FUNACT	;INCREMENT FUNCTION COUNT 
 0685  43                       	INC	BX 
 0686  89 1E 0000 E             	MOV	FUNACT,BX 
 068A  8A C7                    	MOV	AL,BH 
 068C  0A C3                    	OR	AL,BL		;SET UP ACTIVE FLAG NON-ZERO 
 068E  A2 0000 E                	MOV	BYTE PTR NOFUNS,AL 
 0691  8B 1E 0000 E             	MOV	BX,TEMP3	;GET BACK THE FUNCTION DEFINITION TEXT POINTER 
                                ;       DCX     H               ;DETECT A MULTI-LINE FUNCTION 
                                ;       CHRGET                  ;IF THE DEFINITION ENDS NOW 
                                ;       JZ      MULFUN          ;IF ENDS, ITS A MULTI-LINE FUNCTION 
                                				;SKIP OVER THE "=" IN THE DEFINITION 
 0695  E8 0000 R                	CALL	FRMEQL		;AND EVALUATE THE DEFINITION FORMULA 
                                				;CAN HAVE RECURSION AT THIS POINT 
 0698  4B                       	DEC	BX 
 0699  E8 0000 E                	CALL	CHRGTR		;SEE IF THE STATEMENT ENDED RIGHT 
 069C  74 03                    	JZ	SHORT ??L045 
 069E  E9 0000 E                	JMP	SNERR		;THIS IS A CHEAT, SINCE THE LINE 
 06A1                           ??L045: 
                                				;NUMBER OF THE ERROR WILL BE THE CALLERS 
                                				;LINE # INSTEAD OF THE DEFINITIONS LINE # 
 06A1  E8 0435 R                	CALL	GETYPR		;SEE IT THE RESULT IS A STRING 
 06A4  75 11                    	JNZ	SHORT NOCPRS	;WHOSE DESCRIPTOR IS ABOUT TO BE WIPED OUT 
                                				;BECAUSE IT IS SITTING IN PARM1 (THIS 
                                				; HAPPENS IT THE FUNCTION IS A PROJECTION 
                                				; FUNCTION ON A STRING ARGUMENT) 
 06A6  BA 0000 E                	MOV	DX,OFFSET DSCTMP	;DSCTMP IS PAST ALL THE TEMP AREA 
 06A9  8B 1E 0000 E             	MOV	BX,FACLO	;GET THE ADDRESS OF THE DESCRIPTOR 
 06AD  3B DA                    	CMP	BX,DX 
 06AF  72 06                    	JB	SHORT NOCPRS	;RESULT IS A TEMP - NO COPY NESC 
 06B1  E8 0000 E                	CALL	STRCPY		;MAKE A COPY IN DSCTMP 
 06B4  E8 0000 E                	CALL	PUTTMP		;PUT RESULT IN A TEMP AND MAKE FACLO POINT AT IT 
 06B7  8B 1E 0000 E             NOCPRS:	MOV	BX,PRMSTK	;GET PLACE TO RESTORE PARM1 FROM STACK 
 06BB  8A F7                    	MOV	DH,BH 
 06BD  8A D3                    	MOV	DL,BL 
 06BF  43                       	INC	BX		;POINT AT LENGTH 
 06C0  43                       	INC	BX 
 06C1  8A 0F                    	MOV	CL,BYTE PTR [BX]	;[B,C]=LENGTH 
 06C3  43                       	INC	BX 
 06C4  8A 2F                    	MOV	CH,BYTE PTR [BX] 
 06C6  41                       	INC	CX		;INCLUDE EXTRA BYTES 
 06C7  41                       	INC	CX 
 06C8  41                       	INC	CX 
 06C9  41                       	INC	CX 
 06CA  BB 0000 E                	MOV	BX,OFFSET PRMSTK	;PLACE TO STORE INTO 
 06CD  E8 0700 R                	CALL	BCTRAN 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-45
SIMPLE-USER-DEFINED-FUNCTION CODE                           

 06D0  87 DA                    	XCHG	BX,DX		;[D,E]=PLACE TO RESTORE STACK TO 
 06D2  8B E3                    	MOV	SP,BX 
 06D4  8B 1E 0000 E             	MOV	BX,FUNACT	;DECREASE ACTIVE FUNCTION COUNT 
 06D8  4B                       	DEC	BX 
 06D9  89 1E 0000 E             	MOV	FUNACT,BX 
 06DD  8A C7                    	MOV	AL,BH 
 06DF  0A C3                    	OR	AL,BL		;SET UP FUNCTION FLAG 
 06E1  A2 0000 E                	MOV	BYTE PTR NOFUNS,AL 
 06E4  5B                       	POP	BX		;GET BACK THE CALLERS TEXT POINTER 
 06E5  58                       	POP	AX		;GET BACK THE TYPE OF THE FUNCTION 
                                PUBLIC	DOCNVF 
 06E6  53                       DOCNVF:	PUSH	BX		;SAVE THE TEXT POINTER 
 06E7  24 07                    	AND	AL,LOW 7	;SETUP DISPATCH TO FORCE 
                                				;FORMULA TYPE TO CONFORM 
                                				;TO THE VARIABLE ITS BEING ASSIGNED TO 
 06E9  BB 0000 E                	MOV	BX,OFFSET FRCTBL	;TABLE OF FORCE ROUTINES 
 06EC  8A C8                    	MOV	CL,AL		;[B,C]=TWO BYTE OFFSET 
 06EE  B5 00                    	MOV	CH,LOW 0 
 06F0  03 D9                    	ADD	BX,CX 
 06F2  E8 03F2 R                	CALL	DISPAT		;DISPATCH 
 06F5  5B                       	POP	BX		;GET BACK THE TEXT POINTER 
 06F6  C3                       	RET 
                                ; 
                                ; BLOCK TRANSFER ROUTINE WITH SOURCE IN [D,E] DESTINATION IN [H,L] 
                                ; AND COUNT IN [B,C]. TRANSFER IS FORWARD. 
                                ; 
 06F7  8B F2                    BCTRAL:	MOV	SI,DX 
 06F9  8A 04                    	MOV	AL,[SI] 
 06FB  88 07                    	MOV	BYTE PTR [BX],AL 
 06FD  43                       	INC	BX 
 06FE  42                       	INC	DX 
 06FF  49                       	DEC	CX 
 0700  8A C5                    BCTRAN:	MOV	AL,CH 
 0702  0A C1                    	OR	AL,CL 
 0704  75 F1                    	JNZ	SHORT BCTRAL 
 0706  C3                       	RET 
                                ; 
                                ; SUBROUTINE TO SEE IF WE ARE IN DIRECT MODE AND 
                                ; COMPLAIN IF SO 
                                ; 
 0707  53                       ERRDIR:	PUSH	BX		;SAVE THEIR [H,L] 
 0708  8B 1E 0000 E             	MOV	BX,CURLIN	;SEE WHAT THE CURRENT LINE IS 
 070C  43                       	INC	BX		;DIRECT IS 65,535 SO NOW 0 
 070D  0B DB                    	OR	BX,BX		;IS IT ZERO NOW? 
 070F  5B                       	POP	BX 
 0710  74 01                    	JZ	SHORT $+3 
 0712  C3                       	RET			;RETURN IF NOT 
 0713  B2 00 E                  	MOV	DL,LOW OFFSET ERRID	;"ILLEGAL DIRECT" ERROR 
 0715  E9 0000 E                	JMP	ERROR 
                                ; 
                                ; 
                                ; SUBROUTINE TO GET A POINTER TO A FUNCTION NAME 
                                ; 
 0718  E8 0000 E                GETFNM:	CALL	SYNCHR 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-46
SIMPLE-USER-DEFINED-FUNCTION CODE                           

 071B  00 E                     	DB	OFFSET FNTK	;MUST START WITH "FN" 
 071C  B0 80                    	MOV	AL,LOW 128	;DONT ALLOW AN ARRAY 
 071E  A2 0000 E                	MOV	BYTE PTR SUBFLG,AL	;DON'T RECOGNIZE THE "(" AS 
                                				;THE START OF AN ARRAY REFEREENCE 
 0721  0A 07                    	OR	AL,BYTE PTR [BX]	;PUT FUNCTION BIT ON 
 0723  8A C8                    	MOV	CL,AL		;GET FIRST CHARACTER INTO [C] 
 0725  E9 0000 E                	JMP	PTRGT2 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-47
SIMPLE-USER-DEFINED-FUNCTION CODE                           

                                	PAGE 
                                 
                                	SUBTTL STRING FUNCTIONS - LEFT HAND SIDE MID$ 
                                 
                                PUBLIC	ISMID$ 
 0728  3C 7E                    ISMID$:	CMP	AL,LOW 126D	;FUNCTION? (FF - $END) 
 072A  74 03                    	JZ	SHORT ??L046 
 072C  E9 0000 E                	JMP	SNERR		;NO, ERROR. 
 072F                           ??L046: 
 072F  43                       	INC	BX		;POINT TO NEXT CHAR 
 0730  8A 07                    	MOV	AL,BYTE PTR [BX]	;GET FN DESCRIPTOR 
 0732  43                       	INC	BX		;POINT TO CHAR AFTER 
 0733  3C 00 E                  	CMP	AL,LOW OFFSET MIDTK	;IS IT MID? 
                                	EXTRN	LHSMID:NEAR	;CODE IS IN BISTRS.MAC 
 0735  75 03                    	JNZ	SHORT ??L047 
 0737  E9 0000 E                	JMP	LHSMID 
 073A                           ??L047: 
 073A  E9 0000 E                	JMP	SNERR 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-48
STRING FUNCTIONS - LEFT HAND SIDE MID$                      

                                	PAGE 
                                 
                                	SUBTTL INP, OUT, WAIT, CONSOLE, WIDTH 
                                ; 
                                ; THE FOLLOWING FUNCTIONS ALLOW THE 
                                ; USER FULL ACCESS TO THE 8080/Z80  I/O PORTS 
                                ; INP(CHANNEL#) RETURNS AN INTEGER WHICH IS THE STATUS 
                                ; OF THE CHANNEL. OUT CHANNEL#,VALUE PUTS OUT THE INTEGER 
                                ; VALUE ON CHANNEL #. IT IS A STATEMENT, NOT A FUNCTION. 
                                ; 
 073D                           FNINP: 
 073D  E8 0000 E                	CALL	FRQINT		;MAKE ARGUMENT AN INTEGER CHANNEL NUMBER 
 0740  87 DA                    	XCHG	BX,DX 
                                	INS86	354		;READ BYTE INTO AL FROM DX=[D,E] FOR 8086 
 0743  E9 0485 R                	JMP	SNGFLT 
 0746                           SETIO: 
 0746  E8 0000 E                	CALL	FRMQNT		;READ A 16-BIT PORT FOR Z80 AND 8086 
 0749  52                       	PUSH	DX		;SAVE FOR USE BY WAIT AND FNOUT 
 074A  E8 0000 E                	CALL	SYNCHR 
 074D  2C                       	DB	OFFSET 44D 
 074E  E8 079B R                	CALL	GETBYT		;READ THE DATA BYTE TO [A] AND [E] 
 0751  5A                       	POP	DX		;RETURN PORT IN [D,E]=DX FOR 8086 
 0752  C3                       	RET 
 0753  E8 0746 R                FNOUT:	CALL	SETIO		;GET PORT IN [B,C] AND DATA IN [A] & [E] 
                                	INS86	356		;OUTPUT TO PORT DX=[D,E] FROM [A] 
 0757  C3                       	RET 
                                ; 
                                ; THE WAIT CHANNEL#,MASK,MASK2 WAITS UNTIL THE STATUS 
                                ; RETURNED BY CHANNEL# IS NON ZERO WHEN XORED WITH MASK2 
                                ; AND THEN ANDED WITH MASK. IF MASK2 IS NOT PRESENT IT IS ASSUMED 
                                ; TO BE ZERO. 
                                ; 
 0758  E8 0746 R                FNWAIT:	CALL	SETIO		;SET UP FOR WAIT 
 075B  52                       	PUSH	DX		;SAVE THE I/O PORT 
 075C  50                       	PUSH	AX		;SAVE THE MASK 
 075D  B2 00                    	MOV	DL,LOW 0	;DEFAULT MASK2 TO ZERO 
 075F  4B                       	DEC	BX 
 0760  E8 0000 E                	CALL	CHRGTR		;SEE IF THE STATEMENT ENDED 
 0763  74 07                    	JZ	SHORT NOTTHR	;IF NO THIRD ARGUMENT SKIP THIS 
 0765  E8 0000 E                	CALL	SYNCHR 
 0768  2C                       	DB	OFFSET 44	;MAKE SURE THERE IS A "," 
 0769  E8 079B R                	CALL	GETBYT 
 076C  58                       NOTTHR:	POP	AX		;REGET THE "AND" MASK 
 076D  8A F0                    	MOV	DH,AL		;KEEP AND MASK IN [D] 
 076F  5E                       	POP	SI		;XTHL 
 0770  87 F3                    	XCHG	SI,BX 
 0772  56                       	PUSH	SI		;GET BACK THE PORT NUMBER FOR 8086 
 0773                           LOPINP: 
                                EXTRN	POLKEY:NEAR 
 0773  E8 0000 E                	CALL	POLKEY		;Exit if User CTRL-C'd. 
 0776  87 DA                    	XCHG	BX,DX		;GET READY TO READ PORT IN [D,E] 
                                	INS86	354		;READ BYTE INTO [A] 
 0779  87 DA                    	XCHG	BX,DX 
 077B  32 C2                    	XOR	AL,DL		;XOR WITH MASK2 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-49
INP, OUT, WAIT, CONSOLE, WIDTH                              

 077D  22 C6                    	AND	AL,DH		;AND WITH MASK 
 077F  74 F2                    	JZ	SHORT LOPINP	;LOOP UNTIL RESULT IS NON-ZERO 
                                				;NOTE: THIS LOOP CANNOT BE CONTROL-C'ED 
 0781  5B                       LOPINX:	POP	BX		;Restore the Text pointer. 
 0782  C3                       	RET 
 0783  E9 0000 E                CONSOL:	JMP	SNERR 
                                	EXTRN	WIDTHS:NEAR 
                                PUBLIC	GETINT 
 0786  E8 0000 E                GETINT:	CALL	CHRGTR 
                                PUBLIC	GETIN2 
 0789  E8 000B R                GETIN2:	CALL	FRMEVL		;EVALUATE A FORMULA 
                                PUBLIC	INTFR2 
 078C  53                       INTFR2:	PUSH	BX		;SAVE THE TEXT POINTER 
 078D  E8 0000 E                	CALL	FRCINT		;CONVERT THE FORMULA TO AN INTEGER IN [H,L] 
 0790  87 DA                    	XCHG	BX,DX		;PUT THE INTEGER INTO [D,E] 
 0792  5B                       	POP	BX		;RESTORE THE TEXT POINTER 
 0793  8A C6                    	MOV	AL,DH		;SET THE CONDITION CODES ON THE HIGH ORDER 
 0795  0A C0                    	OR	AL,AL 
 0797  C3                       	RET 
                                PUBLIC	GTBYTC 
 0798  E8 0000 E                GTBYTC:	CALL	CHRGTR 
                                PUBLIC	GETBYT 
 079B  E8 000B R                GETBYT:	CALL	FRMEVL		;EVALUATE A FORMULA 
                                PUBLIC	CONINT 
 079E  E8 078C R                CONINT:	CALL	INTFR2		;CONVERT THE FAC TO AN INTEGER IN [D,E] 
                                				;AND SET THE CONDITION CODES BASED 
                                				;ON THE HIGH ORDER 
 07A1  74 03                    	JZ	SHORT ??L048 
 07A3  E9 0000 E                	JMP	FCERR		;WASN'T ERROR 
 07A6                           ??L048: 
 07A6  4B                       	DEC	BX		;ACTUALLY FUNCTIONS CAN GET HERE 
                                				;WITH BAD [H,L] BUT NOT SERIOUS 
                                				;SET CONDITION CODES ON TERMINATOR 
 07A7  E8 0000 E                	CALL	CHRGTR 
 07AA  8A C2                    	MOV	AL,DL		;RETURN THE RESULT IN [A] AND [E] 
 07AC  C3                       	RET 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Page     1-50
INP, OUT, WAIT, CONSOLE, WIDTH                              

                                	PAGE 
                                 
                                	SUBTTL EXECUTE BASIC PROGRAM ON PROM 
                                 
                                 
                                 
                                ; 
                                ; The reserve word tables have dispatch address the could be external. 
                                ; ASM86 can only output external declarations during pass 1, so we 
                                ; have to construct a chain of possible externals and check each one. 
                                ; The following macro runs through the chain and declares any undefined 
                                ; addresses as external :NEAR.  For more information, see the file 
                                ; PS1:<BASIC.ASM86>BINTRP.H 
                                ; 
                                	DO_EXT 
                                ; 
 07AD                           CSEG	ENDS 
                                	END 

Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Symbols-1
                                                             

Macros:

		N a m e			Lines

?Z0  . . . . . . . . . . . . . .  	   0
ACRLF  . . . . . . . . . . . . .  	   2
ADD_EXT  . . . . . . . . . . . .  	   4
ADR  . . . . . . . . . . . . . .  	   1
CALLOS . . . . . . . . . . . . .  	   4
CHRGET . . . . . . . . . . . . .  	   1
COMPAR . . . . . . . . . . . . .  	   2
DBGBRK . . . . . . . . . . . . .  	   1
DC . . . . . . . . . . . . . . .  	   6
DEF_MAC  . . . . . . . . . . . .  	   9
DERMAK . . . . . . . . . . . . .  	   3
DJNZ . . . . . . . . . . . . . .  	   2
DO_EXT . . . . . . . . . . . . .  	   1
EXPAND_MAC . . . . . . . . . . .  	   1
FSIGN  . . . . . . . . . . . . .  	   1
GETYPE . . . . . . . . . . . . .  	   1
INS86  . . . . . . . . . . . . .  	  13
INST . . . . . . . . . . . . . .  	   1
LDDR . . . . . . . . . . . . . .  	   8
LDIR . . . . . . . . . . . . . .  	   8
MOVRI  . . . . . . . . . . . . .  	   6
OUTCHR . . . . . . . . . . . . .  	   1
POPR . . . . . . . . . . . . . .  	   2
PUSHM  . . . . . . . . . . . . .  	   5
PUSHR  . . . . . . . . . . . . .  	   2
Q  . . . . . . . . . . . . . . .  	  19
QF . . . . . . . . . . . . . . .  	  19
R  . . . . . . . . . . . . . . .  	   6
R2 . . . . . . . . . . . . . . .  	   6
ROFFST . . . . . . . . . . . . .  	   2
SYNCHK . . . . . . . . . . . . .  	   2
T  . . . . . . . . . . . . . . .  	   2
UN_DEF . . . . . . . . . . . . .  	   1

Segments and Groups:

                N a m e         	Size	Align	Combine Class

CSEG . . . . . . . . . . . . . .  	07AD	PARA	PUBLIC	'CODESG'
DSEG . . . . . . . . . . . . . .  	0000	PARA	PUBLIC	'DATASG'

Symbols:            

                N a m e         	Type	Value	Attr         

ABSFN  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ALPCPM . . . . . . . . . . . . .  	Number	0000	
ALPS . . . . . . . . . . . . . .  	Number	0000	
ALPTST . . . . . . . . . . . . .  	L NEAR	0311	CSEG
ALTAIR . . . . . . . . . . . . .  	Number	0000	
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Symbols-2
                                                             

ANDORD . . . . . . . . . . . . .  	L NEAR	00D6	CSEG
ANSI . . . . . . . . . . . . . .  	Number	0001	
APPLOP . . . . . . . . . . . . .  	L NEAR	0103	CSEG
ARYTAB . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
ASCBS  . . . . . . . . . . . . .  	Number	0008	
ASCCR  . . . . . . . . . . . . .  	Number	000D	
ASCCTC . . . . . . . . . . . . .  	Number	0003	
ASCCTS . . . . . . . . . . . . .  	Number	0013	
ASCCTZ . . . . . . . . . . . . .  	Number	001A	
ASCESC . . . . . . . . . . . . .  	Number	001B	
ASCLF  . . . . . . . . . . . . .  	Number	000A	
ASCSPC . . . . . . . . . . . . .  	Number	0020	
ASCTAB . . . . . . . . . . . . .  	Number	0009	
ASGMOR . . . . . . . . . . . . .  	L NEAR	057F	CSEG
AUTFLG . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
AUTINC . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
AUTLIN . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External

BASDEB . . . . . . . . . . . . .  	Number	0000	
BCTRAL . . . . . . . . . . . . .  	L NEAR	06F7	CSEG
BCTRAN . . . . . . . . . . . . .  	L NEAR	0700	CSEG
BEEPSW . . . . . . . . . . . . .  	Number	0001	
BINCSW . . . . . . . . . . . . .  	Number	0000	
BINFID . . . . . . . . . . . . .  	Number	00FF	
BLODSW . . . . . . . . . . . . .  	Number	0001	
BLTU . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
BOTCON . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
BSERR  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
BSVFID . . . . . . . . . . . . .  	Number	00FD	
BUBL . . . . . . . . . . . . . .  	Number	0000	
BUF  . . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
BUFLEN . . . . . . . . . . . . .  	Number	00FF	
BUFMIN . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
BUFOFS . . . . . . . . . . . . .  	Number	0002	

CALLS  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
CAN8 . . . . . . . . . . . . . .  	Number	0000	
CASSW  . . . . . . . . . . . . .  	Number	0000	
CAT  . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
CGETYP . . . . . . . . . . . . .  	L NEAR	043A	CSEG
CHKSTR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
CHNFLG . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
CHRGTR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
CHSEAT . . . . . . . . . . . . .  	Number	0001	
CKOVER . . . . . . . . . . . . .  	L NEAR	0329	CSEG
CLEARC . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
CLINTK . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
CLMWID . . . . . . . . . . . . .  	Number	000E	
CLSALL . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
CMPUTN . . . . . . . . . . . . .  	Number	0000	
CNSGET . . . . . . . . . . . . .  	L NEAR	02E0	CSEG	Global
CNTOFL . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
COMMNT . . . . . . . . . . . . .  	Number	0000	
CONER2 . . . . . . . . . . . . .  	L NEAR	033E	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Symbols-3
                                                             

CONERR . . . . . . . . . . . . .  	L NEAR	0347	CSEG
CONFAC . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
CONIA  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
CONINT . . . . . . . . . . . . .  	L NEAR	079E	CSEG	Global
CONLO  . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
CONSAV . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
CONSIH . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
CONSOL . . . . . . . . . . . . .  	L NEAR	0783	CSEG
CONSSW . . . . . . . . . . . . .  	Number	0001	
CONTO  . . . . . . . . . . . . .  	Number	000F	
CONTRO . . . . . . . . . . . . .  	Number	0001	
CONTXT . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
CONTYP . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
CPM  . . . . . . . . . . . . . .  	Number	0001	
CPM110 . . . . . . . . . . . . .  	Number	0000	
CPM2 . . . . . . . . . . . . . .  	Number	0001	
CPM86  . . . . . . . . . . . . .  	Number	0000	
CPMA75 . . . . . . . . . . . . .  	Number	0000	
CPMADD . . . . . . . . . . . . .  	Number	0000	
CPMCON . . . . . . . . . . . . .  	Number	0000	
CPMLIF . . . . . . . . . . . . .  	Number	0000	
CPMMDS . . . . . . . . . . . . .  	Number	0000	
CPMPER . . . . . . . . . . . . .  	Number	0000	
CPMRSH . . . . . . . . . . . . .  	Number	0000	
CPMSBC . . . . . . . . . . . . .  	Number	0000	
CPMSER . . . . . . . . . . . . .  	Number	0000	
CRDO . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
CRDONZ . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
CRONLY . . . . . . . . . . . . .  	Number	0000	
CURLIN . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
C_BUFF . . . . . . . . . . . . .  	Number	001A	
C_CLOS . . . . . . . . . . . . .  	Number	0010	
C_DCIO . . . . . . . . . . . . .  	Number	0006	
C_DELE . . . . . . . . . . . . .  	Number	0013	
C_GDRV . . . . . . . . . . . . .  	Number	0019	
C_MAKE . . . . . . . . . . . . .  	Number	0016	
C_OPEN . . . . . . . . . . . . .  	Number	000F	
C_PARS . . . . . . . . . . . . .  	Number	0029	
C_PRTO . . . . . . . . . . . . .  	Number	0005	
C_RBR  . . . . . . . . . . . . .  	Number	0027	
C_READ . . . . . . . . . . . . .  	Number	0014	
C_RENA . . . . . . . . . . . . .  	Number	0017	
C_REST . . . . . . . . . . . . .  	Number	000D	
C_RNDR . . . . . . . . . . . . .  	Number	0021	
C_RNDW . . . . . . . . . . . . .  	Number	0022	
C_SDRV . . . . . . . . . . . . .  	Number	000E	
C_SEAR . . . . . . . . . . . . .  	Number	0011	

DADD . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
DANDOR . . . . . . . . . . . . .  	L NEAR	0441	CSEG
DATA . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
DATLIN . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
DATOFS . . . . . . . . . . . . .  	Number	0039	
DATPSC . . . . . . . . . . . . .  	Number	0080	
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Symbols-4
                                                             

DATPTR . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
DBLCHR . . . . . . . . . . . . .  	Number	0000	
DBLCON . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
DBLDPC . . . . . . . . . . . . .  	L NEAR	0156	CSEG
DBLDSP . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
DBLTRN . . . . . . . . . . . . .  	Number	0000	
DCOMP  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
DCOMPR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
DCXBRT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
DDIV . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
DEBUG  . . . . . . . . . . . . .  	Text  		
DEF  . . . . . . . . . . . . . .  	L NEAR	04F9	CSEG	Global
DEFNC2 . . . . . . . . . . . . .  	L NEAR	0518	CSEG
DEFNC3 . . . . . . . . . . . . .  	L NEAR	051D	CSEG
DEFTBL . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
DEFUSR . . . . . . . . . . . . .  	L NEAR	04E6	CSEG
DFACLO . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
DIM  . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
DISK . . . . . . . . . . . . . .  	Number	0001	
DISPAT . . . . . . . . . . . . .  	L NEAR	03F2	CSEG
DMC  . . . . . . . . . . . . . .  	Number	0000	
DMULT  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
DOCMP  . . . . . . . . . . . . .  	L NEAR	0413	CSEG
DOCNVF . . . . . . . . . . . . .  	L NEAR	06E6	CSEG	Global
DODSP  . . . . . . . . . . . . .  	L NEAR	016E	CSEG
DOMIN  . . . . . . . . . . . . .  	L NEAR	02AE	CSEG
DONUM  . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
DORELS . . . . . . . . . . . . .  	L NEAR	00A7	CSEG
DORES  . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
DOS  . . . . . . . . . . . . . .  	Number	0000	
DOT  . . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
DRVPOS . . . . . . . . . . . . .  	Number	0000	
DSCTMP . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
DSKER1 . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
DSKERR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
DSUB . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
DUPONT . . . . . . . . . . . . .  	Number	0000	
DYNCOM . . . . . . . . . . . . .  	Number	0001	

EDIT80 . . . . . . . . . . . . .  	Number	0000	
ENDFOR . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
ENDPRG . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
EQULTK . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERCTK  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERLTK  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRBFM . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRBFN . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRBRN . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRDD  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRDFL . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRDIR . . . . . . . . . . . . .  	L NEAR	0707	CSEG
ERRDNA . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRDV0 . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRFAE . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Symbols-5
                                                             

ERRFAO . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRFC  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRFDR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRFLG . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
ERRFN  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRFNF . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRFNO . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRFOV . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRID  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRIER . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRIFN . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRIOE . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRLBO . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRLIN . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
ERRMO  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRNF  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRNMF . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRNR  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERROD  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERROR  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERROV  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRRAD . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRRE  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRRG  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRRPE . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRSN  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRTAB . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRTM  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRTMF . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRTXT . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
ERRUE  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRUE1 . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRUF  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRUS  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ERRWH  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ESCCTL . . . . . . . . . . . . .  	Number	0000	
EUROPE . . . . . . . . . . . . .  	Number	0000	
EVAL . . . . . . . . . . . . . .  	L NEAR	01C7	CSEG	Global
EVALX  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
EXIDY  . . . . . . . . . . . . .  	Number	0000	
EXPSTK . . . . . . . . . . . . .  	L NEAR	00C9	CSEG

FAC  . . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
FACDBL . . . . . . . . . . . . .  	L NEAR	0182	CSEG
FACLO  . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
FACSNG . . . . . . . . . . . . .  	L NEAR	01A1	CSEG
FADD . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FADDS  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FAST . . . . . . . . . . . . . .  	Number	0001	
FCBSIZ . . . . . . . . . . . . .  	Number	0026	
FCB_DT . . . . . . . . . . . . .  	Number	001D	
FCB_DV . . . . . . . . . . . . .  	Number	0007	
FCB_EX . . . . . . . . . . . . .  	Number	0013	
FCB_FN . . . . . . . . . . . . .  	Number	0008	
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Symbols-6
                                                             

FCB_FS . . . . . . . . . . . . .  	Number	0017	
FCB_FT . . . . . . . . . . . . .  	Number	0010	
FCB_NR . . . . . . . . . . . . .  	Number	0027	
FCB_RC . . . . . . . . . . . . .  	Number	0015	
FCB_RN . . . . . . . . . . . . .  	Number	0028	
FCERR  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FCOMP  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FC_ASC . . . . . . . . . . . . .  	Number	0000	
FC_BIN . . . . . . . . . . . . .  	Number	0001	
FDBSIZ . . . . . . . . . . . . .  	Number	0039	
FDIV . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FDIVT  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FDTOK  . . . . . . . . . . . . .  	Number	0000	
FD_DAT . . . . . . . . . . . . .  	Number	00C2	
FD_LOG . . . . . . . . . . . . .  	Number	00BD	
FD_OPS . . . . . . . . . . . . .  	Number	00C0	
FD_PHY . . . . . . . . . . . . .  	Number	00BB	
FD_SIZ . . . . . . . . . . . . .  	Number	00B9	
FETOK  . . . . . . . . . . . . .  	Number	0000	
FILGET . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FILIND . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FILINP . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FIN  . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FINASG . . . . . . . . . . . . .  	L NEAR	0628	CSEG
FINDBL . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FINGO  . . . . . . . . . . . . .  	L NEAR	03EF	CSEG
FININL . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FINLPT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FINREL . . . . . . . . . . . . .  	L NEAR	00E1	CSEG
FINTMP . . . . . . . . . . . . .  	L NEAR	009F	CSEG
FINVLS . . . . . . . . . . . . .  	L NEAR	0639	CSEG
FIVDSK . . . . . . . . . . . . .  	Number	0001	
FIVEO  . . . . . . . . . . . . .  	Number	0001	
FIVLPT . . . . . . . . . . . . .  	Number	0001	
FIVMEM . . . . . . . . . . . . .  	Number	0001	
FIXINP . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FKEYON . . . . . . . . . . . . .  	Number	0001	
FLGINP . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
FLGOVC . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
FLGSCN . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
FL_BKC . . . . . . . . . . . . .  	Number	0080	
FMULT  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FN2SW  . . . . . . . . . . . . .  	Number	0000	
FNAML  . . . . . . . . . . . . .  	Number	000B	
FNDOER . . . . . . . . . . . . .  	L NEAR	0547	CSEG
FNINP  . . . . . . . . . . . . .  	L NEAR	073D	CSEG	Global
FNOUT  . . . . . . . . . . . . .  	L NEAR	0753	CSEG	Global
FNTK . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FNWAIT . . . . . . . . . . . . .  	L NEAR	0758	CSEG	Global
FOUT . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FOUTH  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FOUTO  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FPWRQ  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FRCDBL . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Symbols-7
                                                             

FRCINT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FRCSNG . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FRCSTR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FRCTBL . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FREFAC . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FRESTR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FRETMP . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FRETMS . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FRETOP . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
FRMCHK . . . . . . . . . . . . .  	L NEAR	000C	CSEG	Global
FRMEQL . . . . . . . . . . . . .  	L NEAR	0000	CSEG	Global
FRMEVL . . . . . . . . . . . . .  	L NEAR	000B	CSEG	Global
FRMPRN . . . . . . . . . . . . .  	L NEAR	0007	CSEG	Global
FRMQNT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FRQINT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FSUB . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FUNACT . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
FUNDSP . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
FVALSV . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
F_BAKC . . . . . . . . . . . . .  	Number	0032	
F_BREM . . . . . . . . . . . . .  	Number	0030	
F_CLOC . . . . . . . . . . . . .  	Number	002D	
F_CODE . . . . . . . . . . . . .  	Number	0031	
F_DEV  . . . . . . . . . . . . .  	Number	0034	
F_FCB  . . . . . . . . . . . . .  	Number	0007	
F_FLGS . . . . . . . . . . . . .  	Number	0037	
F_MODE . . . . . . . . . . . . .  	Number	0006	
F_NEXT . . . . . . . . . . . . .  	Number	0004	
F_NUL1 . . . . . . . . . . . . .  	Number	0000	
F_NUL2 . . . . . . . . . . . . .  	Number	0002	
F_NUL3 . . . . . . . . . . . . .  	Number	0033	
F_NUL4 . . . . . . . . . . . . .  	Number	0036	
F_NUL5 . . . . . . . . . . . . .  	Number	00BF	
F_NUM  . . . . . . . . . . . . .  	Number	0001	
F_ORCT . . . . . . . . . . . . .  	Number	002F	
F_POS  . . . . . . . . . . . . .  	Number	0038	
F_WID  . . . . . . . . . . . . .  	Number	0035	

GARBA2 . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
GENBIN . . . . . . . . . . . . .  	Number	0001	
GENDSK . . . . . . . . . . . . .  	Number	0000	
GENFLS . . . . . . . . . . . . .  	Number	0000	
GENIO  . . . . . . . . . . . . .  	Number	0001	
GENWID . . . . . . . . . . . . .  	Number	0000	
GESBC  . . . . . . . . . . . . .  	Number	0000	
GETBYT . . . . . . . . . . . . .  	L NEAR	079B	CSEG	Global
GETFNM . . . . . . . . . . . . .  	L NEAR	0718	CSEG
GETIN2 . . . . . . . . . . . . .  	L NEAR	0789	CSEG	Global
GETINT . . . . . . . . . . . . .  	L NEAR	0786	CSEG	Global
GETLIN . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
GETPTR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
GETSPA . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
GETSTK . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
GETYPR . . . . . . . . . . . . .  	L NEAR	0435	CSEG	Global
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Symbols-8
                                                             

GIO86  . . . . . . . . . . . . .  	Number	0001	
GIVDBL . . . . . . . . . . . . .  	L NEAR	0480	CSEG	Global
GIVINT . . . . . . . . . . . . .  	L NEAR	0489	CSEG	Global
GREATK . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
GTBYTC . . . . . . . . . . . . .  	L NEAR	0798	CSEG	Global
GTMPRT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
GW . . . . . . . . . . . . . . .  	Number	0001	
GWCASS . . . . . . . . . . . . .  	Number	0000	
GWDBUG . . . . . . . . . . . . .  	Number	0000	
G_BIN  . . . . . . . . . . . . .  	Number	001A	
G_BOT  . . . . . . . . . . . . .  	Number	001C	
G_CLS  . . . . . . . . . . . . .  	Number	0006	
G_EOF  . . . . . . . . . . . . .  	Number	0000	
G_GCW  . . . . . . . . . . . . .  	Number	0018	
G_GPS  . . . . . . . . . . . . .  	Number	0012	
G_GWD  . . . . . . . . . . . . .  	Number	0014	
G_LOC  . . . . . . . . . . . . .  	Number	0002	
G_LOF  . . . . . . . . . . . . .  	Number	0004	
G_OPN  . . . . . . . . . . . . .  	Number	000C	
G_RND  . . . . . . . . . . . . .  	Number	000A	
G_SCW  . . . . . . . . . . . . .  	Number	0016	
G_SIN  . . . . . . . . . . . . .  	Number	000E	
G_SOT  . . . . . . . . . . . . .  	Number	0010	
G_SWD  . . . . . . . . . . . . .  	Number	0008	

HAL  . . . . . . . . . . . . . .  	Number	0000	
HEATH  . . . . . . . . . . . . .  	Number	0000	
HEXFIN . . . . . . . . . . . . .  	L NEAR	0381	CSEG
HEXOCT . . . . . . . . . . . . .  	Number	0001	
HGHBIT . . . . . . . . . . . . .  	Number	0001	
HLPEDT . . . . . . . . . . . . .  	Number	0000	
HOCFIN . . . . . . . . . . . . .  	L NEAR	0381	CSEG	Global

I8086  . . . . . . . . . . . . .  	Number	0001	
I8251  . . . . . . . . . . . . .  	Number	0000	
IADD . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
IBMLIK . . . . . . . . . . . . .  	Number	0001	
IBMTOK . . . . . . . . . . . . .  	Number	0001	
ICOMP  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
IDIV . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
IEESLV . . . . . . . . . . . . .  	Number	0000	
IMOD . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
IMULT  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
INDSKC . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
INEG . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
INEG2  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
INIT . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
INKEY  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
INKEYF . . . . . . . . . . . . .  	Number	0001	
INLADD . . . . . . . . . . . . .  	Number	0000	
INLIN  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
INPPAS . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
INPRT  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
INRART . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Symbols-9
                                                             

INSRTK . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
INSTR  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
INSTSW . . . . . . . . . . . . .  	Number	0000	
INT  . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
INTDEX . . . . . . . . . . . . .  	Number	0000	
INTDIV . . . . . . . . . . . . .  	L NEAR	01B7	CSEG	Global
INTDPC . . . . . . . . . . . . .  	L NEAR	013C	CSEG
INTDSP . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
INTEL  . . . . . . . . . . . . .  	Number	0000	
INTFHW . . . . . . . . . . . . .  	Number	0000	
INTFR2 . . . . . . . . . . . . .  	L NEAR	078C	CSEG	Global
INTFSW . . . . . . . . . . . . .  	Number	0000	
INTLEC . . . . . . . . . . . . .  	Number	0000	
INTROM . . . . . . . . . . . . .  	Number	0000	
INXHRT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ISC  . . . . . . . . . . . . . .  	Number	0000	
ISFUN  . . . . . . . . . . . . .  	L NEAR	0387	CSEG
ISIGN  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ISIS . . . . . . . . . . . . . .  	Number	0000	
ISLET  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ISLET2 . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ISMID$ . . . . . . . . . . . . .  	L NEAR	0728	CSEG	Global
ISUB . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ISVAR  . . . . . . . . . . . . .  	L NEAR	02BD	CSEG	Global

JISKTN . . . . . . . . . . . . .  	Number	0000	

KANABS . . . . . . . . . . . . .  	Number	0000	
KANJFN . . . . . . . . . . . . .  	Number	0000	
KBFLEN . . . . . . . . . . . . .  	Number	013E	
KBUF . . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
KEYSTA . . . . . . . . . . . . .  	Number	0000	
KILLER . . . . . . . . . . . . .  	Number	0000	

LABBCK . . . . . . . . . . . . .  	L NEAR	02BB	CSEG	Global
LABEL  . . . . . . . . . . . . .  	Number	0000	
LABKEY . . . . . . . . . . . . .  	Number	0001	
LEN2 . . . . . . . . . . . . . .  	Number	0001	
LEN3 . . . . . . . . . . . . . .  	Number	0001	
LENGTH . . . . . . . . . . . . .  	Number	0002	
LESSTK . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
LETCN4 . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
LHSMID . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
LINGET . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
LINLN  . . . . . . . . . . . . .  	Number	0050	
LINPRT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
LISTEN . . . . . . . . . . . . .  	Number	0001	
LNGVAR . . . . . . . . . . . . .  	Number	0001	
LNREAD . . . . . . . . . . . . .  	Number	0000	
LOKHED . . . . . . . . . . . . .  	Number	0000	
LONGI  . . . . . . . . . . . . .  	Number	0000	
LOPHEX . . . . . . . . . . . . .  	L NEAR	02FA	CSEG
LOPINP . . . . . . . . . . . . .  	L NEAR	0773	CSEG
LOPINX . . . . . . . . . . . . .  	L NEAR	0781	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Symbols-10
                                                             

LOPOC2 . . . . . . . . . . . . .  	L NEAR	0353	CSEG
LOPOCT . . . . . . . . . . . . .  	L NEAR	0354	CSEG
LOPREL . . . . . . . . . . . . .  	L NEAR	00A9	CSEG
LPOPER . . . . . . . . . . . . .  	L NEAR	000E	CSEG
LPSIZL . . . . . . . . . . . . .  	L NEAR	05EC	CSEG
LPT3 . . . . . . . . . . . . . .  	Number	0000	
LPTLEN . . . . . . . . . . . . .  	Number	0084	
LPTSW  . . . . . . . . . . . . .  	Number	0001	
LRUN . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
LSTERR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
LSTOPK . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
LTRACE . . . . . . . . . . . . .  	Number	0000	

MAKINT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
MAKUPL . . . . . . . . . . . . .  	L NEAR	02D1	CSEG	Global
MAKUPS . . . . . . . . . . . . .  	L NEAR	02D3	CSEG	Global
MCI  . . . . . . . . . . . . . .  	Number	0000	
MDS  . . . . . . . . . . . . . .  	Number	0000	
MDSISS . . . . . . . . . . . . .  	Number	0000	
MD_APP . . . . . . . . . . . . .  	Number	0008	
MD_RND . . . . . . . . . . . . .  	Number	0004	
MD_SQI . . . . . . . . . . . . .  	Number	0001	
MD_SQO . . . . . . . . . . . . .  	Number	0002	
MELCO  . . . . . . . . . . . . .  	Number	0000	
MEMIMG . . . . . . . . . . . . .  	Number	0001	
MEMSIZ . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
MIDTK  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
MINPLS . . . . . . . . . . . . .  	L NEAR	03F7	CSEG	Global
MINUTK . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
MOERR  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
MOSTEK . . . . . . . . . . . . .  	Number	0000	
MOVE . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
MOVE1  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
MOVFM  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
MOVFR  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
MOVMF  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
MOVRF  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
MOVRM  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
MRGFLG . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
MULSEG . . . . . . . . . . . . .  	Number	0001	

NAME . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
NAMLEN . . . . . . . . . . . . .  	Number	0028	
NASCOM . . . . . . . . . . . . .  	Number	0000	
NATROM . . . . . . . . . . . . .  	Number	0000	
NBANKS . . . . . . . . . . . . .  	Number	0001	
NCRBAS . . . . . . . . . . . . .  	Number	0000	
NCRCAS . . . . . . . . . . . . .  	Number	0000	
NCRDEB . . . . . . . . . . . . .  	Number	0000	
NCRELS . . . . . . . . . . . . .  	Number	0000	
NCRLPT . . . . . . . . . . . . .  	Number	0001	
NECBAS . . . . . . . . . . . . .  	Number	0000	
NECPPC . . . . . . . . . . . . .  	Number	0000	
NEG  . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Symbols-11
                                                             

NLONLY . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
NMCOMT . . . . . . . . . . . . .  	Number	0002	
NMKEYF . . . . . . . . . . . . .  	Number	000A	
NMKEYT . . . . . . . . . . . . .  	Number	000E	
NMLINE . . . . . . . . . . . . .  	Number	0019	
NMLPT  . . . . . . . . . . . . .  	Number	0003	
NMPAGE . . . . . . . . . . . . .  	Number	0001	
NMPENT . . . . . . . . . . . . .  	Number	0001	
NMREL  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
NMSTRT . . . . . . . . . . . . .  	Number	0004	
NNECBS . . . . . . . . . . . . .  	Number	0000	
NOARGU . . . . . . . . . . . . .  	L NEAR	04DC	CSEG
NOATDL . . . . . . . . . . . . .  	Number	0000	
NOCPRS . . . . . . . . . . . . .  	L NEAR	06B7	CSEG
NOCTLA . . . . . . . . . . . . .  	Number	0000	
NODOT  . . . . . . . . . . . . .  	Number	0000	
NOEDIT . . . . . . . . . . . . .  	Number	0000	
NOFUNS . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
NOIOS  . . . . . . . . . . . . .  	Number	0000	
NONDSK . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
NONULL . . . . . . . . . . . . .  	Number	0000	
NOPEKS . . . . . . . . . . . . .  	Number	0000	
NORNF  . . . . . . . . . . . . .  	Number	0000	
NOROMP . . . . . . . . . . . . .  	Number	0000	
NORUBT . . . . . . . . . . . . .  	Number	0000	
NOTAND . . . . . . . . . . . . .  	L NEAR	0469	CSEG
NOTEQV . . . . . . . . . . . . .  	L NEAR	0479	CSEG
NOTER  . . . . . . . . . . . . .  	L NEAR	0423	CSEG
NOTFRF . . . . . . . . . . . . .  	L NEAR	03E6	CSEG
NOTOR  . . . . . . . . . . . . .  	L NEAR	0462	CSEG
NOTSTV . . . . . . . . . . . . .  	L NEAR	0025	CSEG
NOTTHR . . . . . . . . . . . . .  	L NEAR	076C	CSEG
NOTTK  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
NOTXOR . . . . . . . . . . . . .  	L NEAR	0470	CSEG
NOUSR  . . . . . . . . . . . . .  	Number	0000	
NOVARP . . . . . . . . . . . . .  	Number	0000	
NTDERC . . . . . . . . . . . . .  	L NEAR	0219	CSEG
NTERC  . . . . . . . . . . . . .  	L NEAR	021F	CSEG
NTERL  . . . . . . . . . . . . .  	L NEAR	0230	CSEG
NTMRND . . . . . . . . . . . . .  	L NEAR	039E	CSEG
NTPLUS . . . . . . . . . . . . .  	L NEAR	0046	CSEG
NTVARP . . . . . . . . . . . . .  	L NEAR	0267	CSEG
NUMCON . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
NUMGFN . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
NUMLEV . . . . . . . . . . . . .  	Number	006E	
NUMREL . . . . . . . . . . . . .  	L NEAR	0071	CSEG
NUMTMP . . . . . . . . . . . . .  	Number	000A	
NUMTRP . . . . . . . . . . . . .  	Number	0015	
NVRFIL . . . . . . . . . . . . .  	L NEAR	0251	CSEG
NXTHEX . . . . . . . . . . . . .  	L NEAR	0317	CSEG
NXTLIN . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External

OCTCNS . . . . . . . . . . . . .  	L NEAR	02E7	CSEG	Global
OCTFIN . . . . . . . . . . . . .  	L NEAR	0381	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Symbols-12
                                                             

OEMRAM . . . . . . . . . . . . .  	Number	0000	
OKI  . . . . . . . . . . . . . .  	Number	0000	
OKNORM . . . . . . . . . . . . .  	L NEAR	03D0	CSEG
OLD86  . . . . . . . . . . . . .  	Number	0000	
OLDBLD . . . . . . . . . . . . .  	Number	0001	
OLDLIN . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
OLDTXT . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
OLVPPC . . . . . . . . . . . . .  	Number	0000	
OMERR  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ONECON . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ONEFLG . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
ONEFUN . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
ONELIN . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
ONGSBF . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
ONTEL  . . . . . . . . . . . . .  	Number	0000	
OPCNT  . . . . . . . . . . . . .  	Number	0000		External
OPRTYP . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
OPTAB  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
OPTFLG . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
OPTVAL . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
OUTDO  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
OVCSTR . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
OVERR  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

PALSIZ . . . . . . . . . . . . .  	Number	0000	
PANBAS . . . . . . . . . . . . .  	Number	0000	
PANDBL . . . . . . . . . . . . .  	Number	0000	
PARCHK . . . . . . . . . . . . .  	L NEAR	02A6	CSEG	Global
PARM1  . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
PARM2  . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
PC8A . . . . . . . . . . . . . .  	Number	0000	
PCS  . . . . . . . . . . . . . .  	Number	0000	
PLAYSW . . . . . . . . . . . . .  	Number	0001	
PLUSTK . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
POINT  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
POLKEY . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
POPAS2 . . . . . . . . . . . . .  	L NEAR	05CE	CSEG
POPASG . . . . . . . . . . . . .  	L NEAR	05D2	CSEG
POPHRT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
PPSWRT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
PRGFIN . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
PRINUS . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
PRMLEN . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
PRMLN2 . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
PRMSIZ . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
PRMSTK . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
PROCHK . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
PRODIR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
PROFID . . . . . . . . . . . . .  	Number	00FE	
PTRFIL . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
PTRFLG . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
PTRGET . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
PTRGT2 . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
PTRGTN . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Symbols-13
                                                             

PUFOUT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
PURE . . . . . . . . . . . . . .  	Number	0001	
PUSHF  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
PUTNEW . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
PUTTMP . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

QINLIN . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
QUEUE  . . . . . . . . . . . . .  	Number	0001	

REALIO . . . . . . . . . . . . .  	Number	0001	
REASON . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
REDDY  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
RESFIN . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
RETAOP . . . . . . . . . . . . .  	L NEAR	0020	CSEG
RETAPG . . . . . . . . . . . . .  	L NEAR	0432	CSEG
RETVAR . . . . . . . . . . . . .  	L NEAR	02C0	CSEG	Global
RMX  . . . . . . . . . . . . . .  	Number	0000	
RND  . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
RNDMON . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
RNDX . . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
RSHACK . . . . . . . . . . . . .  	Number	0000	
RSTLES . . . . . . . . . . . . .  	Number	0001	
RUNC . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

SAVSEG . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
SAVSTK . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
SAVTXT . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
SBC  . . . . . . . . . . . . . .  	Number	0000	
SBC86  . . . . . . . . . . . . .  	Number	0000	
SCNLIS . . . . . . . . . . . . .  	L NEAR	0535	CSEG
SCNSEM . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SCNUSR . . . . . . . . . . . . .  	L NEAR	04C2	CSEG
SCP  . . . . . . . . . . . . . .  	Number	0001	
SCRENF . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SCRN86 . . . . . . . . . . . . .  	Number	0001	
SCRNIO . . . . . . . . . . . . .  	Number	0001	
SCROLT . . . . . . . . . . . . .  	Number	0001	
SCRTCH . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SETDBL . . . . . . . . . . . . .  	L NEAR	0168	CSEG
SETGSB . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SETIO  . . . . . . . . . . . . .  	L NEAR	0746	CSEG
SGN  . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SGS  . . . . . . . . . . . . . .  	Number	0000	
SGSATS . . . . . . . . . . . . .  	Number	0000	
SHORTJ . . . . . . . . . . . . .  	Number	0001	
SHTCHN . . . . . . . . . . . . .  	Number	0000	
SHTERR . . . . . . . . . . . . .  	Number	0000	
SHTINS . . . . . . . . . . . . .  	Number	0000	
SHTLHM . . . . . . . . . . . . .  	Number	0000	
SHTLIN . . . . . . . . . . . . .  	Number	0000	
SHTPRO . . . . . . . . . . . . .  	Number	0000	
SHTREN . . . . . . . . . . . . .  	Number	0000	
SIGN . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SIGNC  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Symbols-14
                                                             

SIGNS  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SIRIUS . . . . . . . . . . . . .  	Number	0000	
SIXDIG . . . . . . . . . . . . .  	Number	0000	
SMALL  . . . . . . . . . . . . .  	Number	0000	
SNERR  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SNGDBL . . . . . . . . . . . . .  	L NEAR	0163	CSEG
SNGDO  . . . . . . . . . . . . .  	L NEAR	019C	CSEG
SNGDPC . . . . . . . . . . . . .  	L NEAR	019A	CSEG
SNGDSP . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SNGFLT . . . . . . . . . . . . .  	L NEAR	0485	CSEG	Global
SPACE$ . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SPCDSK . . . . . . . . . . . . .  	Number	0000	
SPCNDS . . . . . . . . . . . . .  	Number	0000	
SQR  . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
STKDBL . . . . . . . . . . . . .  	L NEAR	0153	CSEG
STKINI . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
STKSNG . . . . . . . . . . . . .  	L NEAR	0197	CSEG
STOP . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
STPEND . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
STRCMP . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
STRCPY . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
STREND . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
STRH$  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
STRING . . . . . . . . . . . . .  	Number	0001	
STRLIT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
STRLT2 . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
STRLT3 . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
STRLTI . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
STRNG$ . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
STRO$  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
STROUI . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
STROUT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
STRPRT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
STRSIZ . . . . . . . . . . . . .  	Number	0003	
SUBFLG . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
SUPRSH . . . . . . . . . . . . .  	Number	0001	
SWAPSW . . . . . . . . . . . . .  	Number	0001	
SYNCHR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

TEK  . . . . . . . . . . . . . .  	Number	0000	
TEMP . . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
TEMP2  . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
TEMP3  . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
TEMPA  . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
TEMPST . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
TETRA  . . . . . . . . . . . . .  	Number	0000	
TIMSHR . . . . . . . . . . . . .  	Number	0000	
TMERR  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
TOFF . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
TON  . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
TOPCON . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
TRCFLG . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
TRNCHR . . . . . . . . . . . . .  	Number	0000	
TRSER2 . . . . . . . . . . . . .  	Number	0000	
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Symbols-15
                                                             

TRSHHC . . . . . . . . . . . . .  	Number	0000	
TRUANS . . . . . . . . . . . . .  	Number	0000	
TRUROM . . . . . . . . . . . . .  	Number	0001	
TSDISK . . . . . . . . . . . . .  	Number	0000	
TSHIBA . . . . . . . . . . . . .  	Number	0000	
TSLPT  . . . . . . . . . . . . .  	Number	0000	
TSTOP  . . . . . . . . . . . . .  	L NEAR	001C	CSEG	Global
TXTTAB . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External

UCEMSG . . . . . . . . . . . . .  	Number	0000	
UFERR  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
UMULT  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
USA  . . . . . . . . . . . . . .  	Number	0000	
USERCN . . . . . . . . . . . . .  	L NEAR	04D0	CSEG
USRFN  . . . . . . . . . . . . .  	L NEAR	048E	CSEG
USRTAB . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
USRTK  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

VALINT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
VALNSM . . . . . . . . . . . . .  	L NEAR	011D	CSEG
VALSNG . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
VALTYP . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
VARPT2 . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
VARRET . . . . . . . . . . . . .  	L NEAR	0254	CSEG
VARTAB . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
VDFACS . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
VINT . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
VMOVAF . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
VMOVE  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
VMOVFA . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
VMOVFM . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
VMOVMF . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
VNEG . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
VPUSHD . . . . . . . . . . . . .  	L NEAR	0095	CSEG
VSIGN  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

WEND . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
WHILE  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
WIDTHS . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

XTNSYS . . . . . . . . . . . . .  	Number	0000	

Z80  . . . . . . . . . . . . . .  	Number	0001	
Z80MAC . . . . . . . . . . . . .  	Number	0001	
ZENITH . . . . . . . . . . . . .  	Number	0000	
ZERO . . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

$INKEY$  . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
$INPUT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
$OHCNS . . . . . . . . . . . . .  	L NEAR	02E7	CSEG	Global
$OVMSG . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
$POINT . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
$RNDFN . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
$SCREEN  . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Symbols-16
                                                             

$STPRN . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
$STRING$ . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
$VARPTR  . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
??L000 . . . . . . . . . . . . .  	L NEAR	0046	CSEG
??L001 . . . . . . . . . . . . .  	L NEAR	007B	CSEG
??L002 . . . . . . . . . . . . .  	L NEAR	0084	CSEG
??L003 . . . . . . . . . . . . .  	L NEAR	008D	CSEG
??L004 . . . . . . . . . . . . .  	L NEAR	00C0	CSEG
??L005 . . . . . . . . . . . . .  	L NEAR	00F9	CSEG
??L006 . . . . . . . . . . . . .  	L NEAR	011B	CSEG
??L007 . . . . . . . . . . . . .  	L NEAR	013A	CSEG
??L008 . . . . . . . . . . . . .  	L NEAR	01CF	CSEG
??L009 . . . . . . . . . . . . .  	L NEAR	01D4	CSEG
??L010 . . . . . . . . . . . . .  	L NEAR	01DC	CSEG
??L011 . . . . . . . . . . . . .  	L NEAR	01E3	CSEG
??L012 . . . . . . . . . . . . .  	L NEAR	01ED	CSEG
??L013 . . . . . . . . . . . . .  	L NEAR	01FA	CSEG
??L014 . . . . . . . . . . . . .  	L NEAR	0201	CSEG
??L015 . . . . . . . . . . . . .  	L NEAR	0208	CSEG
??L016 . . . . . . . . . . . . .  	L NEAR	020F	CSEG
??L017 . . . . . . . . . . . . .  	L NEAR	023E	CSEG
??L018 . . . . . . . . . . . . .  	L NEAR	0262	CSEG
??L019 . . . . . . . . . . . . .  	L NEAR	026E	CSEG
??L020 . . . . . . . . . . . . .  	L NEAR	0275	CSEG
??L021 . . . . . . . . . . . . .  	L NEAR	027C	CSEG
??L022 . . . . . . . . . . . . .  	L NEAR	0283	CSEG
??L023 . . . . . . . . . . . . .  	L NEAR	028A	CSEG
??L024 . . . . . . . . . . . . .  	L NEAR	0291	CSEG
??L025 . . . . . . . . . . . . .  	L NEAR	0298	CSEG
??L026 . . . . . . . . . . . . .  	L NEAR	029F	CSEG
??L027 . . . . . . . . . . . . .  	L NEAR	02A6	CSEG
??L028 . . . . . . . . . . . . .  	L NEAR	02CF	CSEG
??L029 . . . . . . . . . . . . .  	L NEAR	02E7	CSEG
??L030 . . . . . . . . . . . . .  	L NEAR	0333	CSEG
??L031 . . . . . . . . . . . . .  	L NEAR	0350	CSEG
??L032 . . . . . . . . . . . . .  	L NEAR	0361	CSEG
??L033 . . . . . . . . . . . . .  	L NEAR	039C	CSEG
??L034 . . . . . . . . . . . . .  	L NEAR	03E5	CSEG
??L035 . . . . . . . . . . . . .  	L NEAR	0450	CSEG
??L036 . . . . . . . . . . . . .  	L NEAR	0457	CSEG
??L037 . . . . . . . . . . . . .  	L NEAR	04A6	CSEG
??L038 . . . . . . . . . . . . .  	L NEAR	04BB	CSEG
??L039 . . . . . . . . . . . . .  	L NEAR	0532	CSEG
??L040 . . . . . . . . . . . . .  	L NEAR	0541	CSEG
??L041 . . . . . . . . . . . . .  	L NEAR	055F	CSEG
??L042 . . . . . . . . . . . . .  	L NEAR	0568	CSEG
??L043 . . . . . . . . . . . . .  	L NEAR	05F9	CSEG
??L044 . . . . . . . . . . . . .  	L NEAR	0611	CSEG
??L045 . . . . . . . . . . . . .  	L NEAR	06A1	CSEG
??L046 . . . . . . . . . . . . .  	L NEAR	072F	CSEG
??L047 . . . . . . . . . . . . .  	L NEAR	073A	CSEG
??L048 . . . . . . . . . . . . .  	L NEAR	07A6	CSEG
?I . . . . . . . . . . . . . . .  	Number	0000	
_OFFST . . . . . . . . . . . . .  	Number	00C2	
Microsoft (R) Macro Assembler  Version 4.00                 2/7/21 10:25:25
 
GWEVAL Copied from BINTRP.MAC                               Symbols-17
                                                             



   2326 Source  Lines
   2767 Total   Lines
    848 Symbols

  23256 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
